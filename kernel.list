
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <reset_handler>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <undefined_handler>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <swi_handler>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <prefetch_handler>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <data_handler>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <unused_handler>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <irq_handler>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <fiq_handler>

00008020 <reset_handler>:
    8020:	00008040 	andeq	r8, r0, r0, asr #32

00008024 <undefined_handler>:
    8024:	000142e4 	andeq	r4, r1, r4, ror #5

00008028 <swi_handler>:
    8028:	000103dc 	ldrdeq	r0, [r1], -ip

0000802c <prefetch_handler>:
    802c:	000142e8 	andeq	r4, r1, r8, ror #5

00008030 <data_handler>:
    8030:	000142ec 	andeq	r4, r1, ip, ror #5

00008034 <unused_handler>:
    8034:	000142f0 	strdeq	r4, [r1], -r0

00008038 <irq_handler>:
    8038:	00010490 	muleq	r1, r0, r4

0000803c <fiq_handler>:
    803c:	000142f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00008040 <reset>:
    8040:	e3a00902 	mov	r0, #32768	; 0x8000
    8044:	e3a01000 	mov	r1, #0
    8048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    804c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e3a000d2 	mov	r0, #210	; 0xd2
    805c:	e121f000 	msr	CPSR_c, r0
    8060:	e3a0d902 	mov	sp, #32768	; 0x8000
    8064:	e3a000d1 	mov	r0, #209	; 0xd1
    8068:	e121f000 	msr	CPSR_c, r0
    806c:	e3a0d901 	mov	sp, #16384	; 0x4000
    8070:	e3a000d3 	mov	r0, #211	; 0xd3
    8074:	e121f000 	msr	CPSR_c, r0
    8078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    807c:	e59f0018 	ldr	r0, [pc, #24]	; 809c <zero_loop+0x14>
    8080:	e59f1018 	ldr	r1, [pc, #24]	; 80a0 <zero_loop+0x18>
    8084:	e3a02000 	mov	r2, #0

00008088 <zero_loop>:
    8088:	e1500001 	cmp	r0, r1
    808c:	b4802004 	strlt	r2, [r0], #4
    8090:	bafffffc 	blt	8088 <zero_loop>
    8094:	eb002d64 	bl	1362c <irqBlock>
    8098:	ea0030b7 	b	1437c <main>
    809c:	00014750 	andeq	r4, r1, r0, asr r7
    80a0:	00015b30 	andeq	r5, r1, r0, lsr fp

Disassembly of section .text:

00010000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10004:	e28db000 	add	fp, sp, #0
   10008:	e24dd01c 	sub	sp, sp, #28
   1000c:	e50b0010 	str	r0, [fp, #-16]
   10010:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10014:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10018:	e51b3010 	ldr	r3, [fp, #-16]
   1001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10020:	e51b3010 	ldr	r3, [fp, #-16]
   10024:	e2433004 	sub	r3, r3, #4
   10028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   1002c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10030:	e2832004 	add	r2, r3, #4
   10034:	e51b3010 	ldr	r3, [fp, #-16]
   10038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1003c:	e51b3010 	ldr	r3, [fp, #-16]
   10040:	e2433004 	sub	r3, r3, #4
   10044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10048:	e51b3010 	ldr	r3, [fp, #-16]
   1004c:	e59f21b8 	ldr	r2, [pc, #440]	; 1020c <pxPortInitialiseStack+0x20c>
   10050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10054:	e51b3010 	ldr	r3, [fp, #-16]
   10058:	e2433004 	sub	r3, r3, #4
   1005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   10060:	e51b2008 	ldr	r2, [fp, #-8]
   10064:	e51b3010 	ldr	r3, [fp, #-16]
   10068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1006c:	e51b3010 	ldr	r3, [fp, #-16]
   10070:	e2433004 	sub	r3, r3, #4
   10074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10078:	e51b3010 	ldr	r3, [fp, #-16]
   1007c:	e59f218c 	ldr	r2, [pc, #396]	; 10210 <pxPortInitialiseStack+0x210>
   10080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10084:	e51b3010 	ldr	r3, [fp, #-16]
   10088:	e2433004 	sub	r3, r3, #4
   1008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   10090:	e51b3010 	ldr	r3, [fp, #-16]
   10094:	e59f2178 	ldr	r2, [pc, #376]	; 10214 <pxPortInitialiseStack+0x214>
   10098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1009c:	e51b3010 	ldr	r3, [fp, #-16]
   100a0:	e2433004 	sub	r3, r3, #4
   100a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100a8:	e51b3010 	ldr	r3, [fp, #-16]
   100ac:	e59f2164 	ldr	r2, [pc, #356]	; 10218 <pxPortInitialiseStack+0x218>
   100b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100b4:	e51b3010 	ldr	r3, [fp, #-16]
   100b8:	e2433004 	sub	r3, r3, #4
   100bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100c0:	e51b3010 	ldr	r3, [fp, #-16]
   100c4:	e59f2150 	ldr	r2, [pc, #336]	; 1021c <pxPortInitialiseStack+0x21c>
   100c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100cc:	e51b3010 	ldr	r3, [fp, #-16]
   100d0:	e2433004 	sub	r3, r3, #4
   100d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   100d8:	e51b3010 	ldr	r3, [fp, #-16]
   100dc:	e59f213c 	ldr	r2, [pc, #316]	; 10220 <pxPortInitialiseStack+0x220>
   100e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100e4:	e51b3010 	ldr	r3, [fp, #-16]
   100e8:	e2433004 	sub	r3, r3, #4
   100ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   100f0:	e51b3010 	ldr	r3, [fp, #-16]
   100f4:	e59f2128 	ldr	r2, [pc, #296]	; 10224 <pxPortInitialiseStack+0x224>
   100f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100fc:	e51b3010 	ldr	r3, [fp, #-16]
   10100:	e2433004 	sub	r3, r3, #4
   10104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   10108:	e51b3010 	ldr	r3, [fp, #-16]
   1010c:	e59f2114 	ldr	r2, [pc, #276]	; 10228 <pxPortInitialiseStack+0x228>
   10110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10114:	e51b3010 	ldr	r3, [fp, #-16]
   10118:	e2433004 	sub	r3, r3, #4
   1011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10120:	e51b3010 	ldr	r3, [fp, #-16]
   10124:	e59f2100 	ldr	r2, [pc, #256]	; 1022c <pxPortInitialiseStack+0x22c>
   10128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1012c:	e51b3010 	ldr	r3, [fp, #-16]
   10130:	e2433004 	sub	r3, r3, #4
   10134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10138:	e51b3010 	ldr	r3, [fp, #-16]
   1013c:	e59f20ec 	ldr	r2, [pc, #236]	; 10230 <pxPortInitialiseStack+0x230>
   10140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10144:	e51b3010 	ldr	r3, [fp, #-16]
   10148:	e2433004 	sub	r3, r3, #4
   1014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10150:	e51b3010 	ldr	r3, [fp, #-16]
   10154:	e59f20d8 	ldr	r2, [pc, #216]	; 10234 <pxPortInitialiseStack+0x234>
   10158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1015c:	e51b3010 	ldr	r3, [fp, #-16]
   10160:	e2433004 	sub	r3, r3, #4
   10164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   10168:	e51b3010 	ldr	r3, [fp, #-16]
   1016c:	e59f20c4 	ldr	r2, [pc, #196]	; 10238 <pxPortInitialiseStack+0x238>
   10170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10174:	e51b3010 	ldr	r3, [fp, #-16]
   10178:	e2433004 	sub	r3, r3, #4
   1017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   10180:	e51b3010 	ldr	r3, [fp, #-16]
   10184:	e59f20b0 	ldr	r2, [pc, #176]	; 1023c <pxPortInitialiseStack+0x23c>
   10188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1018c:	e51b3010 	ldr	r3, [fp, #-16]
   10190:	e2433004 	sub	r3, r3, #4
   10194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   10198:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1019c:	e51b3010 	ldr	r3, [fp, #-16]
   101a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   101a4:	e51b3010 	ldr	r3, [fp, #-16]
   101a8:	e2433004 	sub	r3, r3, #4
   101ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101b0:	e51b3010 	ldr	r3, [fp, #-16]
   101b4:	e3a0201f 	mov	r2, #31
   101b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   101bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   101c0:	e2033001 	and	r3, r3, #1
   101c4:	e3530000 	cmp	r3, #0
   101c8:	0a000004 	beq	101e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   101cc:	e51b3010 	ldr	r3, [fp, #-16]
   101d0:	e5933000 	ldr	r3, [r3]
   101d4:	e3832020 	orr	r2, r3, #32
   101d8:	e51b3010 	ldr	r3, [fp, #-16]
   101dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   101e0:	e51b3010 	ldr	r3, [fp, #-16]
   101e4:	e2433004 	sub	r3, r3, #4
   101e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   101ec:	e51b3010 	ldr	r3, [fp, #-16]
   101f0:	e3a02000 	mov	r2, #0
   101f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   101f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   101fc:	e1a00003 	mov	r0, r3
   10200:	e28bd000 	add	sp, fp, #0
   10204:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10208:	e12fff1e 	bx	lr
   1020c:	aaaaaaaa 	bge	feabacbc <_estack+0xf6aaacbc>
   10210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   10214:	11111111 	tstne	r1, r1, lsl r1
   10218:	10101010 	andsne	r1, r0, r0, lsl r0
   1021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   10220:	08080808 	stmdaeq	r8, {r3, fp}
   10224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   10228:	06060606 	streq	r0, [r6], -r6, lsl #12
   1022c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
   10230:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
   10234:	03030303 	movweq	r0, #13059	; 0x3303
   10238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   1023c:	01010101 	tsteq	r1, r1, lsl #2

00010240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   10240:	e92d4800 	push	{fp, lr}
   10244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   10248:	eb000017 	bl	102ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   1024c:	eb00003c 	bl	10344 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   10250:	e3a03000 	mov	r3, #0
}
   10254:	e1a00003 	mov	r0, r3
   10258:	e8bd8800 	pop	{fp, pc}

0001025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   1025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   10264:	e320f000 	nop	{0}
   10268:	e28bd000 	add	sp, fp, #0
   1026c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10270:	e12fff1e 	bx	lr

00010274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   10274:	e92d4800 	push	{fp, lr}
   10278:	e28db004 	add	fp, sp, #4
   1027c:	e24dd008 	sub	sp, sp, #8
   10280:	e50b0008 	str	r0, [fp, #-8]
   10284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   10288:	eb0009ae 	bl	12948 <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   1028c:	eb000a81 	bl	12c98 <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   10290:	e59f3010 	ldr	r3, [pc, #16]	; 102a8 <vTickISR+0x34>
   10294:	e3a02000 	mov	r2, #0
   10298:	e583200c 	str	r2, [r3, #12]
}
   1029c:	e320f000 	nop	{0}
   102a0:	e24bd004 	sub	sp, fp, #4
   102a4:	e8bd8800 	pop	{fp, pc}
   102a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000102ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   102ac:	e92d4800 	push	{fp, lr}
   102b0:	e28db004 	add	fp, sp, #4
   102b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   102b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   102bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   102c0:	eb000cd9 	bl	1362c <irqBlock>

	pRegs->CTL = 0x003E0000;
   102c4:	e59f3068 	ldr	r3, [pc, #104]	; 10334 <prvSetupTimerInterrupt+0x88>
   102c8:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   102cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   102d0:	e59f305c 	ldr	r3, [pc, #92]	; 10334 <prvSetupTimerInterrupt+0x88>
   102d4:	e59f205c 	ldr	r2, [pc, #92]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102d8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   102dc:	e59f3050 	ldr	r3, [pc, #80]	; 10334 <prvSetupTimerInterrupt+0x88>
   102e0:	e59f2050 	ldr	r2, [pc, #80]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102e4:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   102e8:	e59f3044 	ldr	r3, [pc, #68]	; 10334 <prvSetupTimerInterrupt+0x88>
   102ec:	e3a020f9 	mov	r2, #249	; 0xf9
   102f0:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   102f4:	e59f3038 	ldr	r3, [pc, #56]	; 10334 <prvSetupTimerInterrupt+0x88>
   102f8:	e3a02000 	mov	r2, #0
   102fc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   10300:	e59f302c 	ldr	r3, [pc, #44]	; 10334 <prvSetupTimerInterrupt+0x88>
   10304:	e59f2030 	ldr	r2, [pc, #48]	; 1033c <prvSetupTimerInterrupt+0x90>
   10308:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   1030c:	e3a02000 	mov	r2, #0
   10310:	e59f1028 	ldr	r1, [pc, #40]	; 10340 <prvSetupTimerInterrupt+0x94>
   10314:	e3a00040 	mov	r0, #64	; 0x40
   10318:	eb000cca 	bl	13648 <irqRegister>

	irqEnable(64);
   1031c:	e3a00040 	mov	r0, #64	; 0x40
   10320:	eb000ce1 	bl	136ac <irqEnable>

	irqUnblock();
   10324:	eb000cb9 	bl	13610 <irqUnblock>
}
   10328:	e320f000 	nop	{0}
   1032c:	e24bd004 	sub	sp, fp, #4
   10330:	e8bd8800 	pop	{fp, pc}
   10334:	2000b400 	andcs	fp, r0, r0, lsl #8
   10338:	000003e7 	andeq	r0, r0, r7, ror #7
   1033c:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   10340:	00010274 	andeq	r0, r1, r4, ror r2

00010344 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   10344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10348:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   1034c:	e59f307c 	ldr	r3, [pc, #124]	; 103d0 <vPortISRStartFirstTask+0x8c>
   10350:	e5933000 	ldr	r3, [r3]
   10354:	e2833001 	add	r3, r3, #1
   10358:	e59f2070 	ldr	r2, [pc, #112]	; 103d0 <vPortISRStartFirstTask+0x8c>
   1035c:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   10360:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   10364:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   10368:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   1036c:	e59f0274 	ldr	r0, [pc, #628]	; 105e8 <vPortExitCritical+0x64>
   10370:	e5900000 	ldr	r0, [r0]
   10374:	e590e000 	ldr	lr, [r0]
   10378:	e59f026c 	ldr	r0, [pc, #620]	; 105ec <vPortExitCritical+0x68>
   1037c:	e8be0002 	ldm	lr!, {r1}
   10380:	e5801000 	str	r1, [r0]
   10384:	e8be0001 	ldm	lr!, {r0}
   10388:	e16ff000 	msr	SPSR_fsxc, r0
   1038c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10390:	e320f000 	nop	{0}
   10394:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10398:	e25ef004 	subs	pc, lr, #4
   1039c:	e320f000 	nop	{0}
   103a0:	e320f000 	nop	{0}
   103a4:	e59f3028 	ldr	r3, [pc, #40]	; 103d4 <vPortISRStartFirstTask+0x90>
   103a8:	e5933000 	ldr	r3, [r3]
   103ac:	e59f3024 	ldr	r3, [pc, #36]	; 103d8 <vPortISRStartFirstTask+0x94>
   103b0:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   103b4:	e8bd4000 	ldmfd	sp!, {lr}
   103b8:	e24ee004 	sub	lr, lr, #4
   103bc:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   103c0:	e320f000 	nop	{0}
   103c4:	e28bd000 	add	sp, fp, #0
   103c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   103cc:	e12fff1e 	bx	lr
   103d0:	00014750 	andeq	r4, r1, r0, asr r7
   103d4:	00014744 	andeq	r4, r1, r4, asr #14
   103d8:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000103dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   103dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   103e0:	e92d0001 	stmfd	sp!, {r0}
   103e4:	e94d2000 	stmdb	sp, {sp}^
   103e8:	e24dd004 	sub	sp, sp, #4
   103ec:	e8bd0001 	ldmfd	sp!, {r0}
   103f0:	e9204000 	stmdb	r0!, {lr}
   103f4:	e1a0e000 	mov	lr, r0
   103f8:	e8bd0001 	ldmfd	sp!, {r0}
   103fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10400:	e320f000 	nop	{0}
   10404:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   10408:	e14f0000 	mrs	r0, SPSR
   1040c:	e92e0001 	stmdb	lr!, {r0}
   10410:	e59f01d4 	ldr	r0, [pc, #468]	; 105ec <vPortExitCritical+0x68>
   10414:	e5900000 	ldr	r0, [r0]
   10418:	e92e0001 	stmdb	lr!, {r0}
   1041c:	e59f01c4 	ldr	r0, [pc, #452]	; 105e8 <vPortExitCritical+0x64>
   10420:	e5900000 	ldr	r0, [r0]
   10424:	e580e000 	str	lr, [r0]
   10428:	e59f3058 	ldr	r3, [pc, #88]	; 10488 <vPortYieldProcessor+0xac>
   1042c:	e5933000 	ldr	r3, [r3]
   10430:	e59f3054 	ldr	r3, [pc, #84]	; 1048c <vPortYieldProcessor+0xb0>
   10434:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   10438:	eb000a16 	bl	12c98 <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   1043c:	e59f01a4 	ldr	r0, [pc, #420]	; 105e8 <vPortExitCritical+0x64>
   10440:	e5900000 	ldr	r0, [r0]
   10444:	e590e000 	ldr	lr, [r0]
   10448:	e59f019c 	ldr	r0, [pc, #412]	; 105ec <vPortExitCritical+0x68>
   1044c:	e8be0002 	ldm	lr!, {r1}
   10450:	e5801000 	str	r1, [r0]
   10454:	e8be0001 	ldm	lr!, {r0}
   10458:	e16ff000 	msr	SPSR_fsxc, r0
   1045c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10460:	e320f000 	nop	{0}
   10464:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10468:	e25ef004 	subs	pc, lr, #4
   1046c:	e320f000 	nop	{0}
   10470:	e320f000 	nop	{0}
   10474:	e59f300c 	ldr	r3, [pc, #12]	; 10488 <vPortYieldProcessor+0xac>
   10478:	e5933000 	ldr	r3, [r3]
   1047c:	e59f3008 	ldr	r3, [pc, #8]	; 1048c <vPortYieldProcessor+0xb0>
   10480:	e5933000 	ldr	r3, [r3]
}
   10484:	e320f000 	nop	{0}
   10488:	00014744 	andeq	r4, r1, r4, asr #14
   1048c:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00010490 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   10490:	e92d0001 	stmfd	sp!, {r0}
   10494:	e94d2000 	stmdb	sp, {sp}^
   10498:	e24dd004 	sub	sp, sp, #4
   1049c:	e8bd0001 	ldmfd	sp!, {r0}
   104a0:	e9204000 	stmdb	r0!, {lr}
   104a4:	e1a0e000 	mov	lr, r0
   104a8:	e8bd0001 	ldmfd	sp!, {r0}
   104ac:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   104b0:	e320f000 	nop	{0}
   104b4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   104b8:	e14f0000 	mrs	r0, SPSR
   104bc:	e92e0001 	stmdb	lr!, {r0}
   104c0:	e59f0124 	ldr	r0, [pc, #292]	; 105ec <vPortExitCritical+0x68>
   104c4:	e5900000 	ldr	r0, [r0]
   104c8:	e92e0001 	stmdb	lr!, {r0}
   104cc:	e59f0114 	ldr	r0, [pc, #276]	; 105e8 <vPortExitCritical+0x64>
   104d0:	e5900000 	ldr	r0, [r0]
   104d4:	e580e000 	str	lr, [r0]
   104d8:	e59f3058 	ldr	r3, [pc, #88]	; 10538 <vFreeRTOS_ISR+0xa8>
   104dc:	e5933000 	ldr	r3, [r3]
   104e0:	e59f3054 	ldr	r3, [pc, #84]	; 1053c <vFreeRTOS_ISR+0xac>
   104e4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   104e8:	eb000c20 	bl	13570 <irqHandler>
	portRESTORE_CONTEXT();	
   104ec:	e59f00f4 	ldr	r0, [pc, #244]	; 105e8 <vPortExitCritical+0x64>
   104f0:	e5900000 	ldr	r0, [r0]
   104f4:	e590e000 	ldr	lr, [r0]
   104f8:	e59f00ec 	ldr	r0, [pc, #236]	; 105ec <vPortExitCritical+0x68>
   104fc:	e8be0002 	ldm	lr!, {r1}
   10500:	e5801000 	str	r1, [r0]
   10504:	e8be0001 	ldm	lr!, {r0}
   10508:	e16ff000 	msr	SPSR_fsxc, r0
   1050c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10510:	e320f000 	nop	{0}
   10514:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10518:	e25ef004 	subs	pc, lr, #4
   1051c:	e320f000 	nop	{0}
   10520:	e320f000 	nop	{0}
   10524:	e59f300c 	ldr	r3, [pc, #12]	; 10538 <vFreeRTOS_ISR+0xa8>
   10528:	e5933000 	ldr	r3, [r3]
   1052c:	e59f3008 	ldr	r3, [pc, #8]	; 1053c <vFreeRTOS_ISR+0xac>
   10530:	e5933000 	ldr	r3, [r3]
}
   10534:	e320f000 	nop	{0}
   10538:	00014744 	andeq	r4, r1, r4, asr #14
   1053c:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00010540 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   10540:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10544:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10548:	e92d0001 	stmfd	sp!, {r0}
   1054c:	e10f0000 	mrs	r0, CPSR
   10550:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10554:	e129f000 	msr	CPSR_fc, r0
   10558:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   1055c:	e59f301c 	ldr	r3, [pc, #28]	; 10580 <vPortEnterCritical+0x40>
   10560:	e5933000 	ldr	r3, [r3]
   10564:	e2833001 	add	r3, r3, #1
   10568:	e59f2010 	ldr	r2, [pc, #16]	; 10580 <vPortEnterCritical+0x40>
   1056c:	e5823000 	str	r3, [r2]
}
   10570:	e320f000 	nop	{0}
   10574:	e28bd000 	add	sp, fp, #0
   10578:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1057c:	e12fff1e 	bx	lr
   10580:	00014744 	andeq	r4, r1, r4, asr #14

00010584 <vPortExitCritical>:

void vPortExitCritical( void )
{
   10584:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10588:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   1058c:	e59f3050 	ldr	r3, [pc, #80]	; 105e4 <vPortExitCritical+0x60>
   10590:	e5933000 	ldr	r3, [r3]
   10594:	e3530000 	cmp	r3, #0
   10598:	0a00000d 	beq	105d4 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   1059c:	e59f3040 	ldr	r3, [pc, #64]	; 105e4 <vPortExitCritical+0x60>
   105a0:	e5933000 	ldr	r3, [r3]
   105a4:	e2433001 	sub	r3, r3, #1
   105a8:	e59f2034 	ldr	r2, [pc, #52]	; 105e4 <vPortExitCritical+0x60>
   105ac:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   105b0:	e59f302c 	ldr	r3, [pc, #44]	; 105e4 <vPortExitCritical+0x60>
   105b4:	e5933000 	ldr	r3, [r3]
   105b8:	e3530000 	cmp	r3, #0
   105bc:	1a000004 	bne	105d4 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   105c0:	e92d0001 	stmfd	sp!, {r0}
   105c4:	e10f0000 	mrs	r0, CPSR
   105c8:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   105cc:	e129f000 	msr	CPSR_fc, r0
   105d0:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   105d4:	e320f000 	nop	{0}
   105d8:	e28bd000 	add	sp, fp, #0
   105dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   105e0:	e12fff1e 	bx	lr
   105e4:	00014744 	andeq	r4, r1, r4, asr #14
   105e8:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   105ec:	00014744 	andeq	r4, r1, r4, asr #14

000105f0 <xCoRoutineCreate>:

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   105f0:	e92d4800 	push	{fp, lr}
   105f4:	e28db004 	add	fp, sp, #4
   105f8:	e24dd018 	sub	sp, sp, #24
   105fc:	e50b0010 	str	r0, [fp, #-16]
   10600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );

		/* Now the co-routine has been initialised it can be added to the ready
   10608:	e3a00038 	mov	r0, #56	; 0x38
   1060c:	eb000e09 	bl	13e38 <pvPortMalloc>
   10610:	e50b000c 	str	r0, [fp, #-12]
		list at the correct priority. */
   10614:	e51b300c 	ldr	r3, [fp, #-12]
   10618:	e3530000 	cmp	r3, #0
   1061c:	0a000044 	beq	10734 <xCoRoutineCreate+0x144>
		prvAddCoRoutineToReadyQueue( pxCoRoutine );

		xReturn = pdPASS;
	}
   10620:	e59f3124 	ldr	r3, [pc, #292]	; 1074c <xCoRoutineCreate+0x15c>
   10624:	e5933000 	ldr	r3, [r3]
   10628:	e3530000 	cmp	r3, #0
   1062c:	1a000003 	bne	10640 <xCoRoutineCreate+0x50>
	else
	{
   10630:	e59f2114 	ldr	r2, [pc, #276]	; 1074c <xCoRoutineCreate+0x15c>
   10634:	e51b300c 	ldr	r3, [fp, #-12]
   10638:	e5823000 	str	r3, [r2]
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1063c:	eb000177 	bl	10c20 <prvInitialiseCoRoutineLists>
	}

	return xReturn;
}
   10640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10644:	e3530001 	cmp	r3, #1
   10648:	9a000001 	bls	10654 <xCoRoutineCreate+0x64>
/*-----------------------------------------------------------*/

   1064c:	e3a03001 	mov	r3, #1
   10650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
TickType_t xTimeToWake;

   10654:	e51b300c 	ldr	r3, [fp, #-12]
   10658:	e3a02000 	mov	r2, #0
   1065c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
	/* Calculate the time to wake - this may overflow but this is
   10660:	e51b300c 	ldr	r3, [fp, #-12]
   10664:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10668:	e583202c 	str	r2, [r3, #44]	; 0x2c
	not a problem. */
   1066c:	e51b300c 	ldr	r3, [fp, #-12]
   10670:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10674:	e5832030 	str	r2, [r3, #48]	; 0x30
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   10678:	e51b300c 	ldr	r3, [fp, #-12]
   1067c:	e51b2010 	ldr	r2, [fp, #-16]
   10680:	e5832000 	str	r2, [r3]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
   10684:	e51b300c 	ldr	r3, [fp, #-12]
   10688:	e2833004 	add	r3, r3, #4
   1068c:	e1a00003 	mov	r0, r3
   10690:	eb0001c9 	bl	10dbc <vListInitialiseItem>
	both lists. */
   10694:	e51b300c 	ldr	r3, [fp, #-12]
   10698:	e2833018 	add	r3, r3, #24
   1069c:	e1a00003 	mov	r0, r3
   106a0:	eb0001c5 	bl	10dbc <vListInitialiseItem>
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );

   106a4:	e51b300c 	ldr	r3, [fp, #-12]
   106a8:	e51b200c 	ldr	r2, [fp, #-12]
   106ac:	e5832010 	str	r2, [r3, #16]
	if( xTimeToWake < xCoRoutineTickCount )
   106b0:	e51b300c 	ldr	r3, [fp, #-12]
   106b4:	e51b200c 	ldr	r2, [fp, #-12]
   106b8:	e5832024 	str	r2, [r3, #36]	; 0x24
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
   106bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   106c0:	e2632005 	rsb	r2, r3, #5
   106c4:	e51b300c 	ldr	r3, [fp, #-12]
   106c8:	e5832018 	str	r2, [r3, #24]
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
	}
	else
	{
   106cc:	e51b300c 	ldr	r3, [fp, #-12]
   106d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106d4:	e59f3074 	ldr	r3, [pc, #116]	; 10750 <xCoRoutineCreate+0x160>
   106d8:	e5933000 	ldr	r3, [r3]
   106dc:	e1520003 	cmp	r2, r3
   106e0:	9a000003 	bls	106f4 <xCoRoutineCreate+0x104>
   106e4:	e51b300c 	ldr	r3, [fp, #-12]
   106e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   106ec:	e59f205c 	ldr	r2, [pc, #92]	; 10750 <xCoRoutineCreate+0x160>
   106f0:	e5823000 	str	r3, [r2]
   106f4:	e51b300c 	ldr	r3, [fp, #-12]
   106f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106fc:	e1a03002 	mov	r3, r2
   10700:	e1a03103 	lsl	r3, r3, #2
   10704:	e0833002 	add	r3, r3, r2
   10708:	e1a03103 	lsl	r3, r3, #2
   1070c:	e59f2040 	ldr	r2, [pc, #64]	; 10754 <xCoRoutineCreate+0x164>
   10710:	e0832002 	add	r2, r3, r2
   10714:	e51b300c 	ldr	r3, [fp, #-12]
   10718:	e2833004 	add	r3, r3, #4
   1071c:	e1a01003 	mov	r1, r3
   10720:	e1a00002 	mov	r0, r2
   10724:	eb0001af 	bl	10de8 <vListInsertEnd>
		/* The wake time has not overflowed, so we can use the
		current block list. */
   10728:	e3a03001 	mov	r3, #1
   1072c:	e50b3008 	str	r3, [fp, #-8]
   10730:	ea000001 	b	1073c <xCoRoutineCreate+0x14c>
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
	}

	if( pxEventList )
   10734:	e3e03000 	mvn	r3, #0
   10738:	e50b3008 	str	r3, [fp, #-8]
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
   1073c:	e51b3008 	ldr	r3, [fp, #-8]
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   10740:	e1a00003 	mov	r0, r3
   10744:	e24bd004 	sub	sp, fp, #4
   10748:	e8bd8800 	pop	{fp, pc}
   1074c:	000147c0 	andeq	r4, r1, r0, asr #15
   10750:	000147c4 	andeq	r4, r1, r4, asr #15
   10754:	00014754 	andeq	r4, r1, r4, asr r7

00010758 <vCoRoutineAddToDelayedList>:
	}
}
/*-----------------------------------------------------------*/

   10758:	e92d4800 	push	{fp, lr}
   1075c:	e28db004 	add	fp, sp, #4
   10760:	e24dd010 	sub	sp, sp, #16
   10764:	e50b0010 	str	r0, [fp, #-16]
   10768:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
   1076c:	e59f30b8 	ldr	r3, [pc, #184]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   10770:	e5932000 	ldr	r2, [r3]
   10774:	e51b3010 	ldr	r3, [fp, #-16]
   10778:	e0823003 	add	r3, r2, r3
   1077c:	e50b3008 	str	r3, [fp, #-8]
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
   10780:	e59f30a8 	ldr	r3, [pc, #168]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10784:	e5933000 	ldr	r3, [r3]
   10788:	e2833004 	add	r3, r3, #4
   1078c:	e1a00003 	mov	r0, r3
   10790:	eb0001f0 	bl	10f58 <vListRemove>
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
   10794:	e59f3094 	ldr	r3, [pc, #148]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10798:	e5933000 	ldr	r3, [r3]
   1079c:	e51b2008 	ldr	r2, [fp, #-8]
   107a0:	e5832004 	str	r2, [r3, #4]
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
   107a4:	e59f3080 	ldr	r3, [pc, #128]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   107a8:	e5933000 	ldr	r3, [r3]
   107ac:	e51b2008 	ldr	r2, [fp, #-8]
   107b0:	e1520003 	cmp	r2, r3
   107b4:	2a000008 	bcs	107dc <vCoRoutineAddToDelayedList+0x84>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
   107b8:	e59f3074 	ldr	r3, [pc, #116]	; 10834 <vCoRoutineAddToDelayedList+0xdc>
   107bc:	e5932000 	ldr	r2, [r3]
   107c0:	e59f3068 	ldr	r3, [pc, #104]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107c4:	e5933000 	ldr	r3, [r3]
   107c8:	e2833004 	add	r3, r3, #4
   107cc:	e1a01003 	mov	r1, r3
   107d0:	e1a00002 	mov	r0, r2
   107d4:	eb0001a9 	bl	10e80 <vListInsert>
   107d8:	ea000007 	b	107fc <vCoRoutineAddToDelayedList+0xa4>
	}
}
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   107dc:	e59f3054 	ldr	r3, [pc, #84]	; 10838 <vCoRoutineAddToDelayedList+0xe0>
   107e0:	e5932000 	ldr	r2, [r3]
   107e4:	e59f3044 	ldr	r3, [pc, #68]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107e8:	e5933000 	ldr	r3, [r3]
   107ec:	e2833004 	add	r3, r3, #4
   107f0:	e1a01003 	mov	r1, r3
   107f4:	e1a00002 	mov	r0, r2
   107f8:	eb0001a0 	bl	10e80 <vListInsert>
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   107fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10800:	e3530000 	cmp	r3, #0
   10804:	0a000005 	beq	10820 <vCoRoutineAddToDelayedList+0xc8>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
		xPassedTicks--;
   10808:	e59f3020 	ldr	r3, [pc, #32]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   1080c:	e5933000 	ldr	r3, [r3]
   10810:	e2833018 	add	r3, r3, #24
   10814:	e1a01003 	mov	r1, r3
   10818:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1081c:	eb000197 	bl	10e80 <vListInsert>

		/* If the tick count has overflowed we need to swap the ready lists. */
   10820:	e320f000 	nop	{0}
   10824:	e24bd004 	sub	sp, fp, #4
   10828:	e8bd8800 	pop	{fp, pc}
   1082c:	000147c8 	andeq	r4, r1, r8, asr #15
   10830:	000147c0 	andeq	r4, r1, r0, asr #15
   10834:	000147a8 	andeq	r4, r1, r8, lsr #15
   10838:	000147a4 	andeq	r4, r1, r4, lsr #15

0001083c <prvCheckPendingReadyList>:
		if( xCoRoutineTickCount == 0 )
		{
			List_t * pxTemp;

   1083c:	e92d4800 	push	{fp, lr}
   10840:	e28db004 	add	fp, sp, #4
   10844:	e24dd008 	sub	sp, sp, #8
			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10848:	ea00002c 	b	10900 <prvCheckPendingReadyList+0xc4>
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   1084c:	e92d0001 	stmfd	sp!, {r0}
   10850:	e10f0000 	mrs	r0, CPSR
   10854:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10858:	e129f000 	msr	CPSR_fc, r0
   1085c:	e8bd0001 	ldmfd	sp!, {r0}
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   10860:	e59f30b4 	ldr	r3, [pc, #180]	; 1091c <prvCheckPendingReadyList+0xe0>
   10864:	e593300c 	ldr	r3, [r3, #12]
   10868:	e593300c 	ldr	r3, [r3, #12]
   1086c:	e50b3008 	str	r3, [fp, #-8]

   10870:	e51b3008 	ldr	r3, [fp, #-8]
   10874:	e2833018 	add	r3, r3, #24
   10878:	e1a00003 	mov	r0, r3
   1087c:	eb0001b5 	bl	10f58 <vListRemove>
			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
			{
   10880:	e92d0001 	stmfd	sp!, {r0}
   10884:	e10f0000 	mrs	r0, CPSR
   10888:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   1088c:	e129f000 	msr	CPSR_fc, r0
   10890:	e8bd0001 	ldmfd	sp!, {r0}
				/* Timeout not yet expired. */
				break;
   10894:	e51b3008 	ldr	r3, [fp, #-8]
   10898:	e2833004 	add	r3, r3, #4
   1089c:	e1a00003 	mov	r0, r3
   108a0:	eb0001ac 	bl	10f58 <vListRemove>
			}
   108a4:	e51b3008 	ldr	r3, [fp, #-8]
   108a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108ac:	e59f306c 	ldr	r3, [pc, #108]	; 10920 <prvCheckPendingReadyList+0xe4>
   108b0:	e5933000 	ldr	r3, [r3]
   108b4:	e1520003 	cmp	r2, r3
   108b8:	9a000003 	bls	108cc <prvCheckPendingReadyList+0x90>
   108bc:	e51b3008 	ldr	r3, [fp, #-8]
   108c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   108c4:	e59f2054 	ldr	r2, [pc, #84]	; 10920 <prvCheckPendingReadyList+0xe4>
   108c8:	e5823000 	str	r3, [r2]
   108cc:	e51b3008 	ldr	r3, [fp, #-8]
   108d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108d4:	e1a03002 	mov	r3, r2
   108d8:	e1a03103 	lsl	r3, r3, #2
   108dc:	e0833002 	add	r3, r3, r2
   108e0:	e1a03103 	lsl	r3, r3, #2
   108e4:	e59f2038 	ldr	r2, [pc, #56]	; 10924 <prvCheckPendingReadyList+0xe8>
   108e8:	e0832002 	add	r2, r3, r2
   108ec:	e51b3008 	ldr	r3, [fp, #-8]
   108f0:	e2833004 	add	r3, r3, #4
   108f4:	e1a01003 	mov	r1, r3
   108f8:	e1a00002 	mov	r0, r2
   108fc:	eb000139 	bl	10de8 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10900:	e59f3014 	ldr	r3, [pc, #20]	; 1091c <prvCheckPendingReadyList+0xe0>
   10904:	e5933000 	ldr	r3, [r3]
   10908:	e3530000 	cmp	r3, #0
   1090c:	1affffce 	bne	1084c <prvCheckPendingReadyList+0x10>

			portDISABLE_INTERRUPTS();
   10910:	e320f000 	nop	{0}
   10914:	e24bd004 	sub	sp, fp, #4
   10918:	e8bd8800 	pop	{fp, pc}
   1091c:	000147ac 	andeq	r4, r1, ip, lsr #15
   10920:	000147c4 	andeq	r4, r1, r4, asr #15
   10924:	00014754 	andeq	r4, r1, r4, asr r7

00010928 <prvCheckDelayedList>:
			{
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
   10928:	e92d4800 	push	{fp, lr}
   1092c:	e28db004 	add	fp, sp, #4
   10930:	e24dd008 	sub	sp, sp, #8
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
   10934:	eb0007df 	bl	128b8 <xTaskGetTickCount>
   10938:	e1a02000 	mov	r2, r0
   1093c:	e59f3198 	ldr	r3, [pc, #408]	; 10adc <prvCheckDelayedList+0x1b4>
   10940:	e5933000 	ldr	r3, [r3]
   10944:	e0423003 	sub	r3, r2, r3
   10948:	e59f2190 	ldr	r2, [pc, #400]	; 10ae0 <prvCheckDelayedList+0x1b8>
   1094c:	e5823000 	str	r3, [r2]

   10950:	ea000056 	b	10ab0 <prvCheckDelayedList+0x188>
				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pxContainer )
   10954:	e59f3188 	ldr	r3, [pc, #392]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10958:	e5933000 	ldr	r3, [r3]
   1095c:	e2833001 	add	r3, r3, #1
   10960:	e59f217c 	ldr	r2, [pc, #380]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10964:	e5823000 	str	r3, [r2]
				{
   10968:	e59f3170 	ldr	r3, [pc, #368]	; 10ae0 <prvCheckDelayedList+0x1b8>
   1096c:	e5933000 	ldr	r3, [r3]
   10970:	e2433001 	sub	r3, r3, #1
   10974:	e59f2164 	ldr	r2, [pc, #356]	; 10ae0 <prvCheckDelayedList+0x1b8>
   10978:	e5823000 	str	r3, [r2]
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
				}
			}
   1097c:	e59f3160 	ldr	r3, [pc, #352]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10980:	e5933000 	ldr	r3, [r3]
   10984:	e3530000 	cmp	r3, #0
   10988:	1a000043 	bne	10a9c <prvCheckDelayedList+0x174>
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

   1098c:	e59f3154 	ldr	r3, [pc, #340]	; 10ae8 <prvCheckDelayedList+0x1c0>
   10990:	e5933000 	ldr	r3, [r3]
   10994:	e50b3008 	str	r3, [fp, #-8]
	xLastTickCount = xCoRoutineTickCount;
   10998:	e59f314c 	ldr	r3, [pc, #332]	; 10aec <prvCheckDelayedList+0x1c4>
   1099c:	e5933000 	ldr	r3, [r3]
   109a0:	e59f2140 	ldr	r2, [pc, #320]	; 10ae8 <prvCheckDelayedList+0x1c0>
   109a4:	e5823000 	str	r3, [r2]
}
   109a8:	e59f213c 	ldr	r2, [pc, #316]	; 10aec <prvCheckDelayedList+0x1c4>
   109ac:	e51b3008 	ldr	r3, [fp, #-8]
   109b0:	e5823000 	str	r3, [r2]
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   109b4:	ea000038 	b	10a9c <prvCheckDelayedList+0x174>
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   109b8:	e59f3128 	ldr	r3, [pc, #296]	; 10ae8 <prvCheckDelayedList+0x1c0>
   109bc:	e5933000 	ldr	r3, [r3]
   109c0:	e593300c 	ldr	r3, [r3, #12]
   109c4:	e593300c 	ldr	r3, [r3, #12]
   109c8:	e50b300c 	str	r3, [fp, #-12]

	/* See if any delayed co-routines have timed out. */
   109cc:	e51b300c 	ldr	r3, [fp, #-12]
   109d0:	e5932004 	ldr	r2, [r3, #4]
   109d4:	e59f3108 	ldr	r3, [pc, #264]	; 10ae4 <prvCheckDelayedList+0x1bc>
   109d8:	e5933000 	ldr	r3, [r3]
   109dc:	e1520003 	cmp	r2, r3
   109e0:	9a000000 	bls	109e8 <prvCheckDelayedList+0xc0>
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
   109e4:	ea000031 	b	10ab0 <prvCheckDelayedList+0x188>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   109e8:	e92d0001 	stmfd	sp!, {r0}
   109ec:	e10f0000 	mrs	r0, CPSR
   109f0:	e38000c0 	orr	r0, r0, #192	; 0xc0
   109f4:	e129f000 	msr	CPSR_fc, r0
   109f8:	e8bd0001 	ldmfd	sp!, {r0}
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
	}

   109fc:	e51b300c 	ldr	r3, [fp, #-12]
   10a00:	e2833004 	add	r3, r3, #4
   10a04:	e1a00003 	mov	r0, r3
   10a08:	eb000152 	bl	10f58 <vListRemove>
	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10a0c:	e51b300c 	ldr	r3, [fp, #-12]
   10a10:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   10a14:	e3530000 	cmp	r3, #0
   10a18:	0a000003 	beq	10a2c <prvCheckDelayedList+0x104>

	/* Call the co-routine. */
   10a1c:	e51b300c 	ldr	r3, [fp, #-12]
   10a20:	e2833018 	add	r3, r3, #24
   10a24:	e1a00003 	mov	r0, r3
   10a28:	eb00014a 	bl	10f58 <vListRemove>
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
   10a2c:	e92d0001 	stmfd	sp!, {r0}
   10a30:	e10f0000 	mrs	r0, CPSR
   10a34:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10a38:	e129f000 	msr	CPSR_fc, r0
   10a3c:	e8bd0001 	ldmfd	sp!, {r0}
}
/*-----------------------------------------------------------*/
   10a40:	e51b300c 	ldr	r3, [fp, #-12]
   10a44:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a48:	e59f30a0 	ldr	r3, [pc, #160]	; 10af0 <prvCheckDelayedList+0x1c8>
   10a4c:	e5933000 	ldr	r3, [r3]
   10a50:	e1520003 	cmp	r2, r3
   10a54:	9a000003 	bls	10a68 <prvCheckDelayedList+0x140>
   10a58:	e51b300c 	ldr	r3, [fp, #-12]
   10a5c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10a60:	e59f2088 	ldr	r2, [pc, #136]	; 10af0 <prvCheckDelayedList+0x1c8>
   10a64:	e5823000 	str	r3, [r2]
   10a68:	e51b300c 	ldr	r3, [fp, #-12]
   10a6c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a70:	e1a03002 	mov	r3, r2
   10a74:	e1a03103 	lsl	r3, r3, #2
   10a78:	e0833002 	add	r3, r3, r2
   10a7c:	e1a03103 	lsl	r3, r3, #2
   10a80:	e59f206c 	ldr	r2, [pc, #108]	; 10af4 <prvCheckDelayedList+0x1cc>
   10a84:	e0832002 	add	r2, r3, r2
   10a88:	e51b300c 	ldr	r3, [fp, #-12]
   10a8c:	e2833004 	add	r3, r3, #4
   10a90:	e1a01003 	mov	r1, r3
   10a94:	e1a00002 	mov	r0, r2
   10a98:	eb0000d2 	bl	10de8 <vListInsertEnd>
{
   10a9c:	e59f3044 	ldr	r3, [pc, #68]	; 10ae8 <prvCheckDelayedList+0x1c0>
   10aa0:	e5933000 	ldr	r3, [r3]
   10aa4:	e5933000 	ldr	r3, [r3]
   10aa8:	e3530000 	cmp	r3, #0
   10aac:	1affffc1 	bne	109b8 <prvCheckDelayedList+0x90>

   10ab0:	e59f3028 	ldr	r3, [pc, #40]	; 10ae0 <prvCheckDelayedList+0x1b8>
   10ab4:	e5933000 	ldr	r3, [r3]
   10ab8:	e3530000 	cmp	r3, #0
   10abc:	1affffa4 	bne	10954 <prvCheckDelayedList+0x2c>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;
   10ac0:	e59f301c 	ldr	r3, [pc, #28]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10ac4:	e5933000 	ldr	r3, [r3]
   10ac8:	e59f200c 	ldr	r2, [pc, #12]	; 10adc <prvCheckDelayedList+0x1b4>
   10acc:	e5823000 	str	r3, [r2]

   10ad0:	e320f000 	nop	{0}
   10ad4:	e24bd004 	sub	sp, fp, #4
   10ad8:	e8bd8800 	pop	{fp, pc}
   10adc:	000147cc 	andeq	r4, r1, ip, asr #15
   10ae0:	000147d0 	ldrdeq	r4, [r1], -r0
   10ae4:	000147c8 	andeq	r4, r1, r8, asr #15
   10ae8:	000147a4 	andeq	r4, r1, r4, lsr #15
   10aec:	000147a8 	andeq	r4, r1, r8, lsr #15
   10af0:	000147c4 	andeq	r4, r1, r4, asr #15
   10af4:	00014754 	andeq	r4, r1, r4, asr r7

00010af8 <vCoRoutineSchedule>:
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}
   10af8:	e92d4800 	push	{fp, lr}
   10afc:	e28db004 	add	fp, sp, #4
   10b00:	e24dd008 	sub	sp, sp, #8

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
   10b04:	ebffff4c 	bl	1083c <prvCheckPendingReadyList>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );

   10b08:	ebffff86 	bl	10928 <prvCheckDelayedList>
	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10b0c:	ea000008 	b	10b34 <vCoRoutineSchedule+0x3c>
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
   10b10:	e59f30fc 	ldr	r3, [pc, #252]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b14:	e5933000 	ldr	r3, [r3]
   10b18:	e3530000 	cmp	r3, #0
   10b1c:	0a000039 	beq	10c08 <vCoRoutineSchedule+0x110>
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
CRCB_t *pxUnblockedCRCB;
   10b20:	e59f30ec 	ldr	r3, [pc, #236]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b24:	e5933000 	ldr	r3, [r3]
   10b28:	e2433001 	sub	r3, r3, #1
   10b2c:	e59f20e0 	ldr	r2, [pc, #224]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b30:	e5823000 	str	r3, [r2]
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10b34:	e59f30d8 	ldr	r3, [pc, #216]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b38:	e5932000 	ldr	r2, [r3]
   10b3c:	e59f10d4 	ldr	r1, [pc, #212]	; 10c18 <vCoRoutineSchedule+0x120>
   10b40:	e1a03002 	mov	r3, r2
   10b44:	e1a03103 	lsl	r3, r3, #2
   10b48:	e0833002 	add	r3, r3, r2
   10b4c:	e1a03103 	lsl	r3, r3, #2
   10b50:	e0813003 	add	r3, r1, r3
   10b54:	e5933000 	ldr	r3, [r3]
   10b58:	e3530000 	cmp	r3, #0
   10b5c:	0affffeb 	beq	10b10 <vCoRoutineSchedule+0x18>
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
   10b60:	e59f30ac 	ldr	r3, [pc, #172]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b64:	e5932000 	ldr	r2, [r3]
   10b68:	e1a03002 	mov	r3, r2
   10b6c:	e1a03103 	lsl	r3, r3, #2
   10b70:	e0833002 	add	r3, r3, r2
   10b74:	e1a03103 	lsl	r3, r3, #2
   10b78:	e59f2098 	ldr	r2, [pc, #152]	; 10c18 <vCoRoutineSchedule+0x120>
   10b7c:	e0833002 	add	r3, r3, r2
   10b80:	e50b3008 	str	r3, [fp, #-8]
   10b84:	e51b3008 	ldr	r3, [fp, #-8]
   10b88:	e5933004 	ldr	r3, [r3, #4]
   10b8c:	e5932004 	ldr	r2, [r3, #4]
   10b90:	e51b3008 	ldr	r3, [fp, #-8]
   10b94:	e5832004 	str	r2, [r3, #4]
   10b98:	e51b3008 	ldr	r3, [fp, #-8]
   10b9c:	e5932004 	ldr	r2, [r3, #4]
   10ba0:	e51b3008 	ldr	r3, [fp, #-8]
   10ba4:	e2833008 	add	r3, r3, #8
   10ba8:	e1520003 	cmp	r2, r3
   10bac:	1a000004 	bne	10bc4 <vCoRoutineSchedule+0xcc>
   10bb0:	e51b3008 	ldr	r3, [fp, #-8]
   10bb4:	e5933004 	ldr	r3, [r3, #4]
   10bb8:	e5932004 	ldr	r2, [r3, #4]
   10bbc:	e51b3008 	ldr	r3, [fp, #-8]
   10bc0:	e5832004 	str	r2, [r3, #4]
   10bc4:	e51b3008 	ldr	r3, [fp, #-8]
   10bc8:	e5933004 	ldr	r3, [r3, #4]
   10bcc:	e593300c 	ldr	r3, [r3, #12]
   10bd0:	e59f2044 	ldr	r2, [pc, #68]	; 10c1c <vCoRoutineSchedule+0x124>
   10bd4:	e5823000 	str	r3, [r2]
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10bd8:	e59f303c 	ldr	r3, [pc, #60]	; 10c1c <vCoRoutineSchedule+0x124>
   10bdc:	e5933000 	ldr	r3, [r3]
   10be0:	e5933000 	ldr	r3, [r3]
   10be4:	e59f2030 	ldr	r2, [pc, #48]	; 10c1c <vCoRoutineSchedule+0x124>
   10be8:	e5920000 	ldr	r0, [r2]
   10bec:	e59f2028 	ldr	r2, [pc, #40]	; 10c1c <vCoRoutineSchedule+0x124>
   10bf0:	e5922000 	ldr	r2, [r2]
   10bf4:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   10bf8:	e1a01002 	mov	r1, r2
   10bfc:	e12fff33 	blx	r3

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10c00:	e320f000 	nop	{0}
   10c04:	ea000000 	b	10c0c <vCoRoutineSchedule+0x114>
BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
   10c08:	e320f000 	nop	{0}
	{
   10c0c:	e24bd004 	sub	sp, fp, #4
   10c10:	e8bd8800 	pop	{fp, pc}
   10c14:	000147c4 	andeq	r4, r1, r4, asr #15
   10c18:	00014754 	andeq	r4, r1, r4, asr r7
   10c1c:	000147c0 	andeq	r4, r1, r0, asr #15

00010c20 <prvInitialiseCoRoutineLists>:
		xReturn = pdTRUE;
	}
	else
	{
   10c20:	e92d4800 	push	{fp, lr}
   10c24:	e28db004 	add	fp, sp, #4
   10c28:	e24dd008 	sub	sp, sp, #8
		xReturn = pdFALSE;
	}

   10c2c:	e3a03000 	mov	r3, #0
   10c30:	e50b3008 	str	r3, [fp, #-8]
   10c34:	ea00000b 	b	10c68 <prvInitialiseCoRoutineLists+0x48>
	return xReturn;
}
   10c38:	e51b2008 	ldr	r2, [fp, #-8]
   10c3c:	e1a03002 	mov	r3, r2
   10c40:	e1a03103 	lsl	r3, r3, #2
   10c44:	e0833002 	add	r3, r3, r2
   10c48:	e1a03103 	lsl	r3, r3, #2
   10c4c:	e59f205c 	ldr	r2, [pc, #92]	; 10cb0 <prvInitialiseCoRoutineLists+0x90>
   10c50:	e0833002 	add	r3, r3, r2
   10c54:	e1a00003 	mov	r0, r3
   10c58:	eb00003d 	bl	10d54 <vListInitialise>

   10c5c:	e51b3008 	ldr	r3, [fp, #-8]
   10c60:	e2833001 	add	r3, r3, #1
   10c64:	e50b3008 	str	r3, [fp, #-8]
   10c68:	e51b3008 	ldr	r3, [fp, #-8]
   10c6c:	e3530001 	cmp	r3, #1
   10c70:	9afffff0 	bls	10c38 <prvInitialiseCoRoutineLists+0x18>

#endif /* configUSE_CO_ROUTINES == 0 */

   10c74:	e59f0038 	ldr	r0, [pc, #56]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c78:	eb000035 	bl	10d54 <vListInitialise>
   10c7c:	e59f0034 	ldr	r0, [pc, #52]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10c80:	eb000033 	bl	10d54 <vListInitialise>
   10c84:	e59f0030 	ldr	r0, [pc, #48]	; 10cbc <prvInitialiseCoRoutineLists+0x9c>
   10c88:	eb000031 	bl	10d54 <vListInitialise>
   10c8c:	e59f302c 	ldr	r3, [pc, #44]	; 10cc0 <prvInitialiseCoRoutineLists+0xa0>
   10c90:	e59f201c 	ldr	r2, [pc, #28]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c94:	e5832000 	str	r2, [r3]
   10c98:	e59f3024 	ldr	r3, [pc, #36]	; 10cc4 <prvInitialiseCoRoutineLists+0xa4>
   10c9c:	e59f2014 	ldr	r2, [pc, #20]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10ca0:	e5832000 	str	r2, [r3]
   10ca4:	e320f000 	nop	{0}
   10ca8:	e24bd004 	sub	sp, fp, #4
   10cac:	e8bd8800 	pop	{fp, pc}
   10cb0:	00014754 	andeq	r4, r1, r4, asr r7
   10cb4:	0001477c 	andeq	r4, r1, ip, ror r7
   10cb8:	00014790 	muleq	r1, r0, r7
   10cbc:	000147ac 	andeq	r4, r1, ip, lsr #15
   10cc0:	000147a4 	andeq	r4, r1, r4, lsr #15
   10cc4:	000147a8 	andeq	r4, r1, r8, lsr #15

00010cc8 <xCoRoutineRemoveFromEventList>:
   10cc8:	e92d4800 	push	{fp, lr}
   10ccc:	e28db004 	add	fp, sp, #4
   10cd0:	e24dd010 	sub	sp, sp, #16
   10cd4:	e50b0010 	str	r0, [fp, #-16]
   10cd8:	e51b3010 	ldr	r3, [fp, #-16]
   10cdc:	e593300c 	ldr	r3, [r3, #12]
   10ce0:	e593300c 	ldr	r3, [r3, #12]
   10ce4:	e50b300c 	str	r3, [fp, #-12]
   10ce8:	e51b300c 	ldr	r3, [fp, #-12]
   10cec:	e2833018 	add	r3, r3, #24
   10cf0:	e1a00003 	mov	r0, r3
   10cf4:	eb000097 	bl	10f58 <vListRemove>
   10cf8:	e51b300c 	ldr	r3, [fp, #-12]
   10cfc:	e2833018 	add	r3, r3, #24
   10d00:	e1a01003 	mov	r1, r3
   10d04:	e59f0040 	ldr	r0, [pc, #64]	; 10d4c <xCoRoutineRemoveFromEventList+0x84>
   10d08:	eb000036 	bl	10de8 <vListInsertEnd>
   10d0c:	e51b300c 	ldr	r3, [fp, #-12]
   10d10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10d14:	e59f3034 	ldr	r3, [pc, #52]	; 10d50 <xCoRoutineRemoveFromEventList+0x88>
   10d18:	e5933000 	ldr	r3, [r3]
   10d1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10d20:	e1520003 	cmp	r2, r3
   10d24:	3a000002 	bcc	10d34 <xCoRoutineRemoveFromEventList+0x6c>
   10d28:	e3a03001 	mov	r3, #1
   10d2c:	e50b3008 	str	r3, [fp, #-8]
   10d30:	ea000001 	b	10d3c <xCoRoutineRemoveFromEventList+0x74>
   10d34:	e3a03000 	mov	r3, #0
   10d38:	e50b3008 	str	r3, [fp, #-8]
   10d3c:	e51b3008 	ldr	r3, [fp, #-8]
   10d40:	e1a00003 	mov	r0, r3
   10d44:	e24bd004 	sub	sp, fp, #4
   10d48:	e8bd8800 	pop	{fp, pc}
   10d4c:	000147ac 	andeq	r4, r1, ip, lsr #15
   10d50:	000147c0 	andeq	r4, r1, r0, asr #15

00010d54 <vListInitialise>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;

   10d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10d58:	e28db000 	add	fp, sp, #0
   10d5c:	e24dd00c 	sub	sp, sp, #12
   10d60:	e50b0008 	str	r0, [fp, #-8]
	/* Only effective when configASSERT() is also defined, these tests may catch
	the list data structures being overwritten in memory.  They will not catch
	data errors caused by incorrect configuration or use of FreeRTOS. */
	listTEST_LIST_INTEGRITY( pxList );
   10d64:	e51b3008 	ldr	r3, [fp, #-8]
   10d68:	e2832008 	add	r2, r3, #8
   10d6c:	e51b3008 	ldr	r3, [fp, #-8]
   10d70:	e5832004 	str	r2, [r3, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
   10d74:	e51b3008 	ldr	r3, [fp, #-8]
   10d78:	e3e02000 	mvn	r2, #0
   10d7c:	e5832008 	str	r2, [r3, #8]
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

   10d80:	e51b3008 	ldr	r3, [fp, #-8]
   10d84:	e2832008 	add	r2, r3, #8
   10d88:	e51b3008 	ldr	r3, [fp, #-8]
   10d8c:	e583200c 	str	r2, [r3, #12]
	/* Only used during decision coverage testing. */
   10d90:	e51b3008 	ldr	r3, [fp, #-8]
   10d94:	e2832008 	add	r2, r3, #8
   10d98:	e51b3008 	ldr	r3, [fp, #-8]
   10d9c:	e5832010 	str	r2, [r3, #16]
	mtCOVERAGE_TEST_DELAY();

   10da0:	e51b3008 	ldr	r3, [fp, #-8]
   10da4:	e3a02000 	mov	r2, #0
   10da8:	e5832000 	str	r2, [r3]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   10dac:	e320f000 	nop	{0}
   10db0:	e28bd000 	add	sp, fp, #0
   10db4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10db8:	e12fff1e 	bx	lr

00010dbc <vListInitialiseItem>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   10dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dc0:	e28db000 	add	fp, sp, #0
   10dc4:	e24dd00c 	sub	sp, sp, #12
   10dc8:	e50b0008 	str	r0, [fp, #-8]

	( pxList->uxNumberOfItems )++;
   10dcc:	e51b3008 	ldr	r3, [fp, #-8]
   10dd0:	e3a02000 	mov	r2, #0
   10dd4:	e5832010 	str	r2, [r3, #16]
}
   10dd8:	e320f000 	nop	{0}
   10ddc:	e28bd000 	add	sp, fp, #0
   10de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10de4:	e12fff1e 	bx	lr

00010de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   10de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dec:	e28db000 	add	fp, sp, #0
   10df0:	e24dd014 	sub	sp, sp, #20
   10df4:	e50b0010 	str	r0, [fp, #-16]
   10df8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;

	/* Only effective when configASSERT() is also defined, these tests may catch
	the list data structures being overwritten in memory.  They will not catch
	data errors caused by incorrect configuration or use of FreeRTOS. */
	listTEST_LIST_INTEGRITY( pxList );
   10dfc:	e51b3010 	ldr	r3, [fp, #-16]
   10e00:	e5933004 	ldr	r3, [r3, #4]
   10e04:	e50b3008 	str	r3, [fp, #-8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

   10e08:	e51b3008 	ldr	r3, [fp, #-8]
   10e0c:	e5932004 	ldr	r2, [r3, #4]
   10e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e14:	e5832004 	str	r2, [r3, #4]
	/* Insert the new list item into the list, sorted in xItemValue order.
   10e18:	e51b3010 	ldr	r3, [fp, #-16]
   10e1c:	e5932004 	ldr	r2, [r3, #4]
   10e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e24:	e5832008 	str	r2, [r3, #8]

   10e28:	e51b3008 	ldr	r3, [fp, #-8]
   10e2c:	e5933004 	ldr	r3, [r3, #4]
   10e30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e34:	e5832008 	str	r2, [r3, #8]
	If the list already contains a list item with the same item value then the
   10e38:	e51b3008 	ldr	r3, [fp, #-8]
   10e3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e40:	e5832004 	str	r2, [r3, #4]
	new list item should be placed after it.  This ensures that TCBs which are
   10e44:	e51b3010 	ldr	r3, [fp, #-16]
   10e48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e4c:	e5832004 	str	r2, [r3, #4]
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
   10e50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e54:	e51b2010 	ldr	r2, [fp, #-16]
   10e58:	e5832010 	str	r2, [r3, #16]
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10e5c:	e51b3010 	ldr	r3, [fp, #-16]
   10e60:	e5933000 	ldr	r3, [r3]
   10e64:	e2832001 	add	r2, r3, #1
   10e68:	e51b3010 	ldr	r3, [fp, #-16]
   10e6c:	e5832000 	str	r2, [r3]
	{
   10e70:	e320f000 	nop	{0}
   10e74:	e28bd000 	add	sp, fp, #0
   10e78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10e7c:	e12fff1e 	bx	lr

00010e80 <vListInsert>:
		pxIterator = pxList->xListEnd.pxPrevious;
	}
	else
	{
   10e80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10e84:	e28db000 	add	fp, sp, #0
   10e88:	e24dd014 	sub	sp, sp, #20
   10e8c:	e50b0010 	str	r0, [fp, #-16]
   10e90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
		/* *** NOTE ***********************************************************
		If you find your application is crashing here then likely causes are
		listed below.  In addition see https://www.freertos.org/FAQHelp.html for
		more tips, and ensure configASSERT() is defined!
		https://www.freertos.org/a00110.html#configASSERT
   10e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e98:	e5933000 	ldr	r3, [r3]
   10e9c:	e50b300c 	str	r3, [fp, #-12]
			2) Incorrect interrupt priority assignment, especially on Cortex-M
			   parts where numerically high priority values denote low actual
			   interrupt priorities, which can seem counter intuitive.  See
			   https://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
			   https://www.freertos.org/a00110.html
   10ea0:	e51b300c 	ldr	r3, [fp, #-12]
   10ea4:	e3730001 	cmn	r3, #1
   10ea8:	1a000003 	bne	10ebc <vListInsert+0x3c>
			3) Calling an API function from within a critical section or when
			   the scheduler is suspended, or calling an API function that does
   10eac:	e51b3010 	ldr	r3, [fp, #-16]
   10eb0:	e5933010 	ldr	r3, [r3, #16]
   10eb4:	e50b3008 	str	r3, [fp, #-8]
   10eb8:	ea00000c 	b	10ef0 <vListInsert+0x70>
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
   10ebc:	e51b3010 	ldr	r3, [fp, #-16]
   10ec0:	e2833008 	add	r3, r3, #8
   10ec4:	e50b3008 	str	r3, [fp, #-8]
   10ec8:	ea000002 	b	10ed8 <vListInsert+0x58>
   10ecc:	e51b3008 	ldr	r3, [fp, #-8]
   10ed0:	e5933004 	ldr	r3, [r3, #4]
   10ed4:	e50b3008 	str	r3, [fp, #-8]
   10ed8:	e51b3008 	ldr	r3, [fp, #-8]
   10edc:	e5933004 	ldr	r3, [r3, #4]
   10ee0:	e5932000 	ldr	r2, [r3]
   10ee4:	e51b300c 	ldr	r3, [fp, #-12]
   10ee8:	e1520003 	cmp	r2, r3
   10eec:	9afffff6 	bls	10ecc <vListInsert+0x4c>

	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
   10ef0:	e51b3008 	ldr	r3, [fp, #-8]
   10ef4:	e5932004 	ldr	r2, [r3, #4]
   10ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10efc:	e5832004 	str	r2, [r3, #4]
{
   10f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f04:	e5933004 	ldr	r3, [r3, #4]
   10f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f0c:	e5832008 	str	r2, [r3, #8]
/* The list item knows which list it is in.  Obtain the list from the list
   10f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f14:	e51b2008 	ldr	r2, [fp, #-8]
   10f18:	e5832008 	str	r2, [r3, #8]
item. */
   10f1c:	e51b3008 	ldr	r3, [fp, #-8]
   10f20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f24:	e5832004 	str	r2, [r3, #4]
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   10f28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f2c:	e51b2010 	ldr	r2, [fp, #-16]
   10f30:	e5832010 	str	r2, [r3, #16]

	/* Only used during decision coverage testing. */
   10f34:	e51b3010 	ldr	r3, [fp, #-16]
   10f38:	e5933000 	ldr	r3, [r3]
   10f3c:	e2832001 	add	r2, r3, #1
   10f40:	e51b3010 	ldr	r3, [fp, #-16]
   10f44:	e5832000 	str	r2, [r3]
	mtCOVERAGE_TEST_DELAY();
   10f48:	e320f000 	nop	{0}
   10f4c:	e28bd000 	add	sp, fp, #0
   10f50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f54:	e12fff1e 	bx	lr

00010f58 <vListRemove>:

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
   10f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f5c:	e28db000 	add	fp, sp, #0
   10f60:	e24dd014 	sub	sp, sp, #20
   10f64:	e50b0010 	str	r0, [fp, #-16]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}
	else
   10f68:	e51b3010 	ldr	r3, [fp, #-16]
   10f6c:	e5933004 	ldr	r3, [r3, #4]
   10f70:	e51b2010 	ldr	r2, [fp, #-16]
   10f74:	e5922008 	ldr	r2, [r2, #8]
   10f78:	e5832008 	str	r2, [r3, #8]
	{
   10f7c:	e51b3010 	ldr	r3, [fp, #-16]
   10f80:	e5933008 	ldr	r3, [r3, #8]
   10f84:	e51b2010 	ldr	r2, [fp, #-16]
   10f88:	e5922004 	ldr	r2, [r2, #4]
   10f8c:	e5832004 	str	r2, [r3, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   10f90:	e51b3010 	ldr	r3, [fp, #-16]
   10f94:	e5933010 	ldr	r3, [r3, #16]
   10f98:	e50b3008 	str	r3, [fp, #-8]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
   10f9c:	e51b3008 	ldr	r3, [fp, #-8]
   10fa0:	e5932004 	ldr	r2, [r3, #4]
   10fa4:	e51b3010 	ldr	r3, [fp, #-16]
   10fa8:	e1520003 	cmp	r2, r3
   10fac:	1a000003 	bne	10fc0 <vListRemove+0x68>
}
/*-----------------------------------------------------------*/
   10fb0:	e51b3010 	ldr	r3, [fp, #-16]
   10fb4:	e5932008 	ldr	r2, [r3, #8]
   10fb8:	e51b3008 	ldr	r3, [fp, #-8]
   10fbc:	e5832004 	str	r2, [r3, #4]

   10fc0:	e51b3010 	ldr	r3, [fp, #-16]
   10fc4:	e3a02000 	mov	r2, #0
   10fc8:	e5832010 	str	r2, [r3, #16]
   10fcc:	e51b3008 	ldr	r3, [fp, #-8]
   10fd0:	e5933000 	ldr	r3, [r3]
   10fd4:	e2432001 	sub	r2, r3, #1
   10fd8:	e51b3008 	ldr	r3, [fp, #-8]
   10fdc:	e5832000 	str	r2, [r3]
   10fe0:	e320f000 	nop	{0}
   10fe4:	e28bd000 	add	sp, fp, #0
   10fe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10fec:	e12fff1e 	bx	lr

00010ff0 <xQueueGenericReset>:
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
   10ff0:	e92d4800 	push	{fp, lr}
   10ff4:	e28db004 	add	fp, sp, #4
   10ff8:	e24dd008 	sub	sp, sp, #8
   10ffc:	e50b0008 	str	r0, [fp, #-8]
   11000:	e50b100c 	str	r1, [fp, #-12]
					queueYIELD_IF_USING_PREEMPTION();
				}
				else
   11004:	ebfffd4d 	bl	10540 <vPortEnterCritical>
				{
					mtCOVERAGE_TEST_MARKER();
   11008:	e51b3008 	ldr	r3, [fp, #-8]
   1100c:	e5932000 	ldr	r2, [r3]
   11010:	e51b3008 	ldr	r3, [fp, #-8]
   11014:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11018:	e51b1008 	ldr	r1, [fp, #-8]
   1101c:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11020:	e0030391 	mul	r3, r1, r3
   11024:	e0822003 	add	r2, r2, r3
   11028:	e51b3008 	ldr	r3, [fp, #-8]
   1102c:	e5832004 	str	r2, [r3, #4]
				}
   11030:	e51b3008 	ldr	r3, [fp, #-8]
   11034:	e3a02000 	mov	r2, #0
   11038:	e5832038 	str	r2, [r3, #56]	; 0x38
			}
   1103c:	e51b3008 	ldr	r3, [fp, #-8]
   11040:	e5932000 	ldr	r2, [r3]
   11044:	e51b3008 	ldr	r3, [fp, #-8]
   11048:	e5832008 	str	r2, [r3, #8]
			else
   1104c:	e51b3008 	ldr	r3, [fp, #-8]
   11050:	e5932000 	ldr	r2, [r3]
   11054:	e51b3008 	ldr	r3, [fp, #-8]
   11058:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1105c:	e2433001 	sub	r3, r3, #1
   11060:	e51b1008 	ldr	r1, [fp, #-8]
   11064:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11068:	e0030391 	mul	r3, r1, r3
   1106c:	e0822003 	add	r2, r2, r3
   11070:	e51b3008 	ldr	r3, [fp, #-8]
   11074:	e583200c 	str	r2, [r3, #12]
			{
   11078:	e51b3008 	ldr	r3, [fp, #-8]
   1107c:	e3e02000 	mvn	r2, #0
   11080:	e5832044 	str	r2, [r3, #68]	; 0x44
				mtCOVERAGE_TEST_MARKER();
   11084:	e51b3008 	ldr	r3, [fp, #-8]
   11088:	e3e02000 	mvn	r2, #0
   1108c:	e5832048 	str	r2, [r3, #72]	; 0x48
			}
		}
   11090:	e51b300c 	ldr	r3, [fp, #-12]
   11094:	e3530000 	cmp	r3, #0
   11098:	1a00000c 	bne	110d0 <xQueueGenericReset+0xe0>
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
   1109c:	e51b3008 	ldr	r3, [fp, #-8]
   110a0:	e5933010 	ldr	r3, [r3, #16]
   110a4:	e3530000 	cmp	r3, #0
   110a8:	0a000010 	beq	110f0 <xQueueGenericReset+0x100>
	taskEXIT_CRITICAL();

   110ac:	e51b3008 	ldr	r3, [fp, #-8]
   110b0:	e2833010 	add	r3, r3, #16
   110b4:	e1a00003 	mov	r0, r3
   110b8:	eb00075f 	bl	12e3c <xTaskRemoveFromEventList>
   110bc:	e1a03000 	mov	r3, r0
   110c0:	e3530001 	cmp	r3, #1
   110c4:	1a000009 	bne	110f0 <xQueueGenericReset+0x100>
	/* A value is returned for calling semantic consistency with previous
	versions. */
   110c8:	ef000000 	svc	0x00000000
   110cc:	ea000007 	b	110f0 <xQueueGenericReset+0x100>
}
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
   110d0:	e51b3008 	ldr	r3, [fp, #-8]
   110d4:	e2833010 	add	r3, r3, #16
   110d8:	e1a00003 	mov	r0, r3
   110dc:	ebffff1c 	bl	10d54 <vListInitialise>
	{
   110e0:	e51b3008 	ldr	r3, [fp, #-8]
   110e4:	e2833024 	add	r3, r3, #36	; 0x24
   110e8:	e1a00003 	mov	r0, r3
   110ec:	ebffff18 	bl	10d54 <vListInitialise>
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   110f0:	ebfffd23 	bl	10584 <vPortExitCritical>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
   110f4:	e3a03001 	mov	r3, #1

   110f8:	e1a00003 	mov	r0, r3
   110fc:	e24bd004 	sub	sp, fp, #4
   11100:	e8bd8800 	pop	{fp, pc}

00011104 <xQueueGenericCreate>:
		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
   11104:	e92d4800 	push	{fp, lr}
   11108:	e28db004 	add	fp, sp, #4
   1110c:	e24dd020 	sub	sp, sp, #32
   11110:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11114:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11118:	e1a03002 	mov	r3, r2
   1111c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3

		#if( configASSERT_DEFINED == 1 )
		{
   11120:	e3a03000 	mov	r3, #0
   11124:	e50b3008 	str	r3, [fp, #-8]
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
			configASSERT( xSize == sizeof( Queue_t ) );
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
		}
   11128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1112c:	e3530000 	cmp	r3, #0
   11130:	0a000021 	beq	111bc <xQueueGenericCreate+0xb8>
		#endif /* configASSERT_DEFINED */

   11134:	e3a0004c 	mov	r0, #76	; 0x4c
   11138:	eb000b3e 	bl	13e38 <pvPortMalloc>
   1113c:	e50b000c 	str	r0, [fp, #-12]
		/* The address of a statically allocated queue was passed in, use it.
   11140:	e51b300c 	ldr	r3, [fp, #-12]
   11144:	e3530000 	cmp	r3, #0
   11148:	0a00001b 	beq	111bc <xQueueGenericCreate+0xb8>
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

   1114c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11150:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11154:	e0030392 	mul	r3, r2, r3
   11158:	e2833001 	add	r3, r3, #1
   1115c:	e50b3010 	str	r3, [fp, #-16]
		if( pxNewQueue != NULL )
		{
   11160:	e51b0010 	ldr	r0, [fp, #-16]
   11164:	eb000b33 	bl	13e38 <pvPortMalloc>
   11168:	e1a02000 	mov	r2, r0
   1116c:	e51b300c 	ldr	r3, [fp, #-12]
   11170:	e5832000 	str	r2, [r3]
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
   11174:	e51b300c 	ldr	r3, [fp, #-12]
   11178:	e5933000 	ldr	r3, [r3]
   1117c:	e3530000 	cmp	r3, #0
   11180:	0a00000b 	beq	111b4 <xQueueGenericCreate+0xb0>
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
   11184:	e51b300c 	ldr	r3, [fp, #-12]
   11188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1118c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
   11190:	e51b300c 	ldr	r3, [fp, #-12]
   11194:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11198:	e5832040 	str	r2, [r3, #64]	; 0x40
			}
   1119c:	e3a01001 	mov	r1, #1
   111a0:	e51b000c 	ldr	r0, [fp, #-12]
   111a4:	ebffff91 	bl	10ff0 <xQueueGenericReset>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
   111a8:	e51b300c 	ldr	r3, [fp, #-12]
   111ac:	e50b3008 	str	r3, [fp, #-8]
   111b0:	ea000001 	b	111bc <xQueueGenericCreate+0xb8>
		}

		return pxNewQueue;
	}

   111b4:	e51b000c 	ldr	r0, [fp, #-12]
   111b8:	eb000b90 	bl	14000 <vPortFree>
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   111bc:	e51b3008 	ldr	r3, [fp, #-8]
	Queue_t *pxNewQueue;
   111c0:	e1a00003 	mov	r0, r3
   111c4:	e24bd004 	sub	sp, fp, #4
   111c8:	e8bd8800 	pop	{fp, pc}

000111cc <xQueueGenericSend>:
		{
			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
		}
		else
		{
			pxReturn = NULL;
   111cc:	e92d4800 	push	{fp, lr}
   111d0:	e28db004 	add	fp, sp, #4
   111d4:	e24dd020 	sub	sp, sp, #32
   111d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   111dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   111e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   111e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		}
   111e8:	e3a03000 	mov	r3, #0
   111ec:	e50b3008 	str	r3, [fp, #-8]
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
   111f0:	ebfffcd2 	bl	10540 <vPortEnterCritical>
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
   111f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   111f8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   111fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11200:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11204:	e1520003 	cmp	r2, r3
   11208:	2a000012 	bcs	11258 <xQueueGenericSend+0x8c>

		/* If this is the task that holds the mutex then xMutexHolder will not
		change outside of this task.  If this task does not hold the mutex then
   1120c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11218:	eb00016a 	bl	117c8 <prvCopyDataToQueue>
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
   1121c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11220:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11224:	e3530000 	cmp	r3, #0
   11228:	0a000007 	beq	1124c <xQueueGenericSend+0x80>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
		{
   1122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11230:	e2833024 	add	r3, r3, #36	; 0x24
   11234:	e1a00003 	mov	r0, r3
   11238:	eb0006ff 	bl	12e3c <xTaskRemoveFromEventList>
   1123c:	e1a03000 	mov	r3, r0
   11240:	e3530001 	cmp	r3, #1
   11244:	1a000000 	bne	1124c <xQueueGenericSend+0x80>
			traceGIVE_MUTEX_RECURSIVE( pxMutex );

			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
   11248:	ef000000 	svc	0x00000000
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;

			/* Has the recursive call count unwound to 0? */
   1124c:	ebfffccc 	bl	10584 <vPortExitCritical>
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
   11250:	e3a03001 	mov	r3, #1
   11254:	ea000042 	b	11364 <xQueueGenericSend+0x198>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
			}
			else
			{
   11258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1125c:	e3530000 	cmp	r3, #0
   11260:	1a000002 	bne	11270 <xQueueGenericSend+0xa4>
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
   11264:	ebfffcc6 	bl	10584 <vPortExitCritical>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
   11268:	e3a03000 	mov	r3, #0
   1126c:	ea00003c 	b	11364 <xQueueGenericSend+0x198>
			xReturn = pdFAIL;

   11270:	e51b3008 	ldr	r3, [fp, #-8]
   11274:	e3530000 	cmp	r3, #0
   11278:	1a000004 	bne	11290 <xQueueGenericSend+0xc4>
			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
   1127c:	e24b3010 	sub	r3, fp, #16
   11280:	e1a00003 	mov	r0, r3
   11284:	eb000732 	bl	12f54 <vTaskSetTimeOutState>
	}
   11288:	e3a03001 	mov	r3, #1
   1128c:	e50b3008 	str	r3, [fp, #-8]

#endif /* configUSE_RECURSIVE_MUTEXES */
/*-----------------------------------------------------------*/

   11290:	ebfffcbb 	bl	10584 <vPortExitCritical>
#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
	BaseType_t xReturn;
   11294:	eb000512 	bl	126e4 <vTaskSuspendAll>
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
   11298:	ebfffca8 	bl	10540 <vPortEnterCritical>
   1129c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   112a4:	e3730001 	cmn	r3, #1
   112a8:	1a000002 	bne	112b8 <xQueueGenericSend+0xec>
   112ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112b0:	e3a02000 	mov	r2, #0
   112b4:	e5832044 	str	r2, [r3, #68]	; 0x44
   112b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   112c0:	e3730001 	cmn	r3, #1
   112c4:	1a000002 	bne	112d4 <xQueueGenericSend+0x108>
   112c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112cc:	e3a02000 	mov	r2, #0
   112d0:	e5832048 	str	r2, [r3, #72]	; 0x48
   112d4:	ebfffcaa 	bl	10584 <vPortExitCritical>

		configASSERT( pxMutex );

   112d8:	e24b2020 	sub	r2, fp, #32
   112dc:	e24b3010 	sub	r3, fp, #16
   112e0:	e1a01002 	mov	r1, r2
   112e4:	e1a00003 	mov	r0, r3
   112e8:	eb00072b 	bl	12f9c <xTaskCheckForTimeOut>
   112ec:	e1a03000 	mov	r3, r0
   112f0:	e3530000 	cmp	r3, #0
   112f4:	1a000016 	bne	11354 <xQueueGenericSend+0x188>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */
   112f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   112fc:	eb000202 	bl	11b0c <prvIsQueueFull>
   11300:	e1a03000 	mov	r3, r0
   11304:	e3530000 	cmp	r3, #0
   11308:	0a00000d 	beq	11344 <xQueueGenericSend+0x178>

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

   1130c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11310:	e2833010 	add	r3, r3, #16
   11314:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   11318:	e1a01002 	mov	r1, r2
   1131c:	e1a00003 	mov	r0, r3
   11320:	eb00069e 	bl	12da0 <vTaskPlaceOnEventList>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
			xReturn = pdPASS;
		}
		else
		{
   11324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11328:	eb000195 	bl	11984 <prvUnlockQueue>

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
			{
   1132c:	eb0004f8 	bl	12714 <xTaskResumeAll>
   11330:	e1a03000 	mov	r3, r0
   11334:	e3530000 	cmp	r3, #0
   11338:	1affffac 	bne	111f0 <xQueueGenericSend+0x24>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
			}
   1133c:	ef000000 	svc	0x00000000
   11340:	eaffffaa 	b	111f0 <xQueueGenericSend+0x24>
			else
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

   11344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11348:	eb00018d 	bl	11984 <prvUnlockQueue>
		return xReturn;
   1134c:	eb0004f0 	bl	12714 <xTaskResumeAll>
   11350:	eaffffa6 	b	111f0 <xQueueGenericSend+0x24>
	}

#endif /* configUSE_RECURSIVE_MUTEXES */
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
   11354:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11358:	eb000189 	bl	11984 <prvUnlockQueue>

   1135c:	eb0004ec 	bl	12714 <xTaskResumeAll>
	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
   11360:	e3a03000 	mov	r3, #0
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
   11364:	e1a00003 	mov	r0, r3
   11368:	e24bd004 	sub	sp, fp, #4
   1136c:	e8bd8800 	pop	{fp, pc}

00011370 <xQueueGenericSendFromISR>:

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
   11370:	e92d4800 	push	{fp, lr}
   11374:	e28db004 	add	fp, sp, #4
   11378:	e24dd018 	sub	sp, sp, #24
   1137c:	e50b0010 	str	r0, [fp, #-16]
   11380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11384:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   11388:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );

				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
   1138c:	e3a03000 	mov	r3, #0
   11390:	e50b300c 	str	r3, [fp, #-12]
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
   11394:	e51b3010 	ldr	r3, [fp, #-16]
   11398:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1139c:	e51b3010 	ldr	r3, [fp, #-16]
   113a0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   113a4:	e1520003 	cmp	r2, r3
   113a8:	2a000021 	bcs	11434 <xQueueGenericSendFromISR+0xc4>
				prvUnlockQueue( pxQueue );

				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
   113ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   113b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   113b4:	e51b0010 	ldr	r0, [fp, #-16]
   113b8:	eb000102 	bl	117c8 <prvCopyDataToQueue>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   113bc:	e51b3010 	ldr	r3, [fp, #-16]
   113c0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   113c4:	e3730001 	cmn	r3, #1
   113c8:	1a000011 	bne	11414 <xQueueGenericSendFromISR+0xa4>
				{
					portYIELD_WITHIN_API();
   113cc:	e51b3010 	ldr	r3, [fp, #-16]
   113d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   113d4:	e3530000 	cmp	r3, #0
   113d8:	0a000012 	beq	11428 <xQueueGenericSendFromISR+0xb8>
				}
			}
   113dc:	e51b3010 	ldr	r3, [fp, #-16]
   113e0:	e2833024 	add	r3, r3, #36	; 0x24
   113e4:	e1a00003 	mov	r0, r3
   113e8:	eb000693 	bl	12e3c <xTaskRemoveFromEventList>
   113ec:	e1a03000 	mov	r3, r0
   113f0:	e3530000 	cmp	r3, #0
   113f4:	0a00000b 	beq	11428 <xQueueGenericSendFromISR+0xb8>
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   113f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   113fc:	e3530000 	cmp	r3, #0
   11400:	0a000008 	beq	11428 <xQueueGenericSendFromISR+0xb8>
				( void ) xTaskResumeAll();
			}
   11404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11408:	e3a02001 	mov	r2, #1
   1140c:	e5832000 	str	r2, [r3]
   11410:	ea000004 	b	11428 <xQueueGenericSendFromISR+0xb8>
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11414:	e51b3010 	ldr	r3, [fp, #-16]
   11418:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1141c:	e2832001 	add	r2, r3, #1
   11420:	e51b3010 	ldr	r3, [fp, #-16]
   11424:	e5832048 	str	r2, [r3, #72]	; 0x48
		}
	} /*lint -restore */
}
   11428:	e3a03001 	mov	r3, #1
   1142c:	e50b3008 	str	r3, [fp, #-8]
   11430:	ea000001 	b	1143c <xQueueGenericSendFromISR+0xcc>
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
BaseType_t xReturn;
   11434:	e3a03000 	mov	r3, #0
   11438:	e50b3008 	str	r3, [fp, #-8]
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1143c:	e51b3008 	ldr	r3, [fp, #-8]
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   11440:	e1a00003 	mov	r0, r3
   11444:	e24bd004 	sub	sp, fp, #4
   11448:	e8bd8800 	pop	{fp, pc}

0001144c <xQueueGenericReceive>:

	/* RTOS ports that support interrupt nesting have the concept of a maximum
	system call (or maximum API call) interrupt priority.  Interrupts that are
	above the maximum system call priority are kept permanently enabled, even
   1144c:	e92d4800 	push	{fp, lr}
   11450:	e28db004 	add	fp, sp, #4
   11454:	e24dd020 	sub	sp, sp, #32
   11458:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1145c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11460:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   11464:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
	when the RTOS kernel is in a critical section, but cannot make any calls to
   11468:	e3a03000 	mov	r3, #0
   1146c:	e50b3008 	str	r3, [fp, #-8]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	/* Similar to xQueueGenericSend, except without blocking if there is no room
   11470:	ebfffc32 	bl	10540 <vPortEnterCritical>
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
   11474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1147c:	e3530000 	cmp	r3, #0
   11480:	0a00002c 	beq	11538 <xQueueGenericReceive+0xec>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   11484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11488:	e593300c 	ldr	r3, [r3, #12]
   1148c:	e50b300c 	str	r3, [fp, #-12]
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   11490:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11494:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11498:	eb000115 	bl	118f4 <prvCopyDataFromQueue>
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;

   1149c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   114a0:	e3530000 	cmp	r3, #0
   114a4:	1a000011 	bne	114f0 <xQueueGenericReceive+0xa4>
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
   114a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   114b0:	e2432001 	sub	r2, r3, #1
   114b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114b8:	e5832038 	str	r2, [r3, #56]	; 0x38
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
   114bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114c0:	e5933010 	ldr	r3, [r3, #16]
   114c4:	e3530000 	cmp	r3, #0
   114c8:	0a000017 	beq	1152c <xQueueGenericReceive+0xe0>
						{
							/* Do not notify the queue set as an existing item
   114cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114d0:	e2833010 	add	r3, r3, #16
   114d4:	e1a00003 	mov	r0, r3
   114d8:	eb000657 	bl	12e3c <xTaskRemoveFromEventList>
   114dc:	e1a03000 	mov	r3, r0
   114e0:	e3530001 	cmp	r3, #1
   114e4:	1a000010 	bne	1152c <xQueueGenericReceive+0xe0>
							was overwritten in the queue so the number of items
							in the queue has not changed. */
   114e8:	ef000000 	svc	0x00000000
   114ec:	ea00000e 	b	1152c <xQueueGenericReceive+0xe0>
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   114f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114f4:	e51b200c 	ldr	r2, [fp, #-12]
   114f8:	e583200c 	str	r2, [r3, #12]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
   114fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11500:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11504:	e3530000 	cmp	r3, #0
   11508:	0a000007 	beq	1152c <xQueueGenericReceive+0xe0>
							}
						}
						else
						{
   1150c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11510:	e2833024 	add	r3, r3, #36	; 0x24
   11514:	e1a00003 	mov	r0, r3
   11518:	eb000647 	bl	12e3c <xTaskRemoveFromEventList>
   1151c:	e1a03000 	mov	r3, r0
   11520:	e3530000 	cmp	r3, #0
   11524:	0a000000 	beq	1152c <xQueueGenericReceive+0xe0>
							mtCOVERAGE_TEST_MARKER();
						}
					}
   11528:	ef000000 	svc	0x00000000
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1152c:	ebfffc14 	bl	10584 <vPortExitCritical>
							{
   11530:	e3a03001 	mov	r3, #1
   11534:	ea000042 	b	11644 <xQueueGenericReceive+0x1f8>
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
								{
   11538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1153c:	e3530000 	cmp	r3, #0
   11540:	1a000002 	bne	11550 <xQueueGenericReceive+0x104>
									*pxHigherPriorityTaskWoken = pdTRUE;
								}
								else
								{
   11544:	ebfffc0e 	bl	10584 <vPortExitCritical>
									mtCOVERAGE_TEST_MARKER();
								}
   11548:	e3a03000 	mov	r3, #0
   1154c:	ea00003c 	b	11644 <xQueueGenericReceive+0x1f8>
							}
							else
   11550:	e51b3008 	ldr	r3, [fp, #-8]
   11554:	e3530000 	cmp	r3, #0
   11558:	1a000004 	bne	11570 <xQueueGenericReceive+0x124>
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
   1155c:	e24b3014 	sub	r3, fp, #20
   11560:	e1a00003 	mov	r0, r3
   11564:	eb00067a 	bl	12f54 <vTaskSetTimeOutState>
						else
   11568:	e3a03001 	mov	r3, #1
   1156c:	e50b3008 	str	r3, [fp, #-8]
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
   11570:	ebfffc03 	bl	10584 <vPortExitCritical>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
   11574:	eb00045a 	bl	126e4 <vTaskSuspendAll>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   11578:	ebfffbf0 	bl	10540 <vPortEnterCritical>
   1157c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11580:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11584:	e3730001 	cmn	r3, #1
   11588:	1a000002 	bne	11598 <xQueueGenericReceive+0x14c>
   1158c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11590:	e3a02000 	mov	r2, #0
   11594:	e5832044 	str	r2, [r3, #68]	; 0x44
   11598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1159c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   115a0:	e3730001 	cmn	r3, #1
   115a4:	1a000002 	bne	115b4 <xQueueGenericReceive+0x168>
   115a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115ac:	e3a02000 	mov	r2, #0
   115b0:	e5832048 	str	r2, [r3, #72]	; 0x48
   115b4:	ebfffbf2 	bl	10584 <vPortExitCritical>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
   115b8:	e24b2020 	sub	r2, fp, #32
   115bc:	e24b3014 	sub	r3, fp, #20
   115c0:	e1a01002 	mov	r1, r2
   115c4:	e1a00003 	mov	r0, r3
   115c8:	eb000673 	bl	12f9c <xTaskCheckForTimeOut>
   115cc:	e1a03000 	mov	r3, r0
   115d0:	e3530000 	cmp	r3, #0
   115d4:	1a000016 	bne	11634 <xQueueGenericReceive+0x1e8>
							if( pxHigherPriorityTaskWoken != NULL )
							{
   115d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   115dc:	eb000129 	bl	11a88 <prvIsQueueEmpty>
   115e0:	e1a03000 	mov	r3, r0
   115e4:	e3530000 	cmp	r3, #0
   115e8:	0a00000d 	beq	11624 <xQueueGenericReceive+0x1d8>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					
   115ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115f0:	e2833024 	add	r3, r3, #36	; 0x24
   115f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   115f8:	e1a01002 	mov	r1, r2
   115fc:	e1a00003 	mov	r0, r3
   11600:	eb0005e6 	bl	12da0 <vTaskPlaceOnEventList>
					/* Not used in this path. */
   11604:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11608:	eb0000dd 	bl	11984 <prvUnlockQueue>
					( void ) uxPreviousMessagesWaiting;
   1160c:	eb000440 	bl	12714 <xTaskResumeAll>
   11610:	e1a03000 	mov	r3, r0
   11614:	e3530000 	cmp	r3, #0
   11618:	1affff94 	bne	11470 <xQueueGenericReceive+0x24>
				}
				#endif /* configUSE_QUEUE_SETS */
   1161c:	ef000000 	svc	0x00000000
   11620:	eaffff92 	b	11470 <xQueueGenericReceive+0x24>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   11624:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11628:	eb0000d5 	bl	11984 <prvUnlockQueue>
			}
   1162c:	eb000438 	bl	12714 <xTaskResumeAll>
   11630:	eaffff8e 	b	11470 <xQueueGenericReceive+0x24>

			xReturn = pdPASS;
		}
		else
		{
   11634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11638:	eb0000d1 	bl	11984 <prvUnlockQueue>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1163c:	eb000434 	bl	12714 <xTaskResumeAll>
			xReturn = errQUEUE_FULL;
		}
   11640:	e3a03000 	mov	r3, #0
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

   11644:	e1a00003 	mov	r0, r3
   11648:	e24bd004 	sub	sp, fp, #4
   1164c:	e8bd8800 	pop	{fp, pc}

00011650 <xQueueReceiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

   11650:	e92d4800 	push	{fp, lr}
   11654:	e28db004 	add	fp, sp, #4
   11658:	e24dd018 	sub	sp, sp, #24
   1165c:	e50b0010 	str	r0, [fp, #-16]
   11660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11664:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;

	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
   11668:	e3a03000 	mov	r3, #0
   1166c:	e50b300c 	str	r3, [fp, #-12]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
   11670:	e51b3010 	ldr	r3, [fp, #-16]
   11674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11678:	e3530000 	cmp	r3, #0
   1167c:	0a000025 	beq	11718 <xQueueReceiveFromISR+0xc8>
	post). */

	configASSERT( pxQueue );

   11680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   11684:	e51b0010 	ldr	r0, [fp, #-16]
   11688:	eb000099 	bl	118f4 <prvCopyDataFromQueue>
	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
   1168c:	e51b3010 	ldr	r3, [fp, #-16]
   11690:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11694:	e2432001 	sub	r2, r3, #1
   11698:	e51b3010 	ldr	r3, [fp, #-16]
   1169c:	e5832038 	str	r2, [r3, #56]	; 0x38
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
   116a0:	e51b3010 	ldr	r3, [fp, #-16]
   116a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   116a8:	e3730001 	cmn	r3, #1
   116ac:	1a000011 	bne	116f8 <xQueueReceiveFromISR+0xa8>
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
   116b0:	e51b3010 	ldr	r3, [fp, #-16]
   116b4:	e5933010 	ldr	r3, [r3, #16]
   116b8:	e3530000 	cmp	r3, #0
   116bc:	0a000012 	beq	1170c <xQueueReceiveFromISR+0xbc>

	/* RTOS ports that support interrupt nesting have the concept of a maximum
   116c0:	e51b3010 	ldr	r3, [fp, #-16]
   116c4:	e2833010 	add	r3, r3, #16
   116c8:	e1a00003 	mov	r0, r3
   116cc:	eb0005da 	bl	12e3c <xTaskRemoveFromEventList>
   116d0:	e1a03000 	mov	r3, r0
   116d4:	e3530000 	cmp	r3, #0
   116d8:	0a00000b 	beq	1170c <xQueueReceiveFromISR+0xbc>
	system call (or maximum API call) interrupt priority.  Interrupts that are
	above the maximum system call priority are kept permanently enabled, even
	when the RTOS kernel is in a critical section, but cannot make any calls to
	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
   116dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116e0:	e3530000 	cmp	r3, #0
   116e4:	0a000008 	beq	1170c <xQueueReceiveFromISR+0xbc>
	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
	failure if a FreeRTOS API function is called from an interrupt that has been
   116e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116ec:	e3a02001 	mov	r2, #1
   116f0:	e5832000 	str	r2, [r3]
   116f4:	ea000004 	b	1170c <xQueueReceiveFromISR+0xbc>
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

   116f8:	e51b3010 	ldr	r3, [fp, #-16]
   116fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11700:	e2832001 	add	r2, r3, #1
   11704:	e51b3010 	ldr	r3, [fp, #-16]
   11708:	e5832044 	str	r2, [r3, #68]	; 0x44
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1170c:	e3a03001 	mov	r3, #1
   11710:	e50b3008 	str	r3, [fp, #-8]
   11714:	ea000001 	b	11720 <xQueueReceiveFromISR+0xd0>

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
   11718:	e3a03000 	mov	r3, #0
   1171c:	e50b3008 	str	r3, [fp, #-8]
		if( uxMessagesWaiting < pxQueue->uxLength )
		{
			const int8_t cTxLock = pxQueue->cTxLock;

			traceQUEUE_SEND_FROM_ISR( pxQueue );

   11720:	e51b3008 	ldr	r3, [fp, #-8]
			/* A task can only have an inherited priority if it is a mutex
   11724:	e1a00003 	mov	r0, r3
   11728:	e24bd004 	sub	sp, fp, #4
   1172c:	e8bd8800 	pop	{fp, pc}

00011730 <uxQueueMessagesWaiting>:
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
   11730:	e92d4800 	push	{fp, lr}
   11734:	e28db004 	add	fp, sp, #4
   11738:	e24dd010 	sub	sp, sp, #16
   1173c:	e50b0010 	str	r0, [fp, #-16]
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
   11740:	ebfffb7e 	bl	10540 <vPortEnterCritical>
			if( cTxLock == queueUNLOCKED )
   11744:	e51b3010 	ldr	r3, [fp, #-16]
   11748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1174c:	e50b3008 	str	r3, [fp, #-8]
			{
   11750:	ebfffb8b 	bl	10584 <vPortExitCritical>
				#if ( configUSE_QUEUE_SETS == 1 )
				{
   11754:	e51b3008 	ldr	r3, [fp, #-8]
					if( pxQueue->pxQueueSetContainer != NULL )
   11758:	e1a00003 	mov	r0, r3
   1175c:	e24bd004 	sub	sp, fp, #4
   11760:	e8bd8800 	pop	{fp, pc}

00011764 <uxQueueMessagesWaitingFromISR>:
					{
						if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
						{
							/* The semaphore is a member of a queue set, and
   11764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11768:	e28db000 	add	fp, sp, #0
   1176c:	e24dd014 	sub	sp, sp, #20
   11770:	e50b0010 	str	r0, [fp, #-16]
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   11774:	e51b3010 	ldr	r3, [fp, #-16]
   11778:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1177c:	e50b3008 	str	r3, [fp, #-8]
							}
							else
   11780:	e51b3008 	ldr	r3, [fp, #-8]
							{
   11784:	e1a00003 	mov	r0, r3
   11788:	e28bd000 	add	sp, fp, #0
   1178c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11790:	e12fff1e 	bx	lr

00011794 <vQueueDelete>:
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else
   11794:	e92d4800 	push	{fp, lr}
   11798:	e28db004 	add	fp, sp, #4
   1179c:	e24dd008 	sub	sp, sp, #8
   117a0:	e50b0008 	str	r0, [fp, #-8]
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
   117a4:	e51b3008 	ldr	r3, [fp, #-8]
   117a8:	e5933000 	ldr	r3, [r3]
   117ac:	e1a00003 	mov	r0, r3
   117b0:	eb000a12 	bl	14000 <vPortFree>
					{
   117b4:	e51b0008 	ldr	r0, [fp, #-8]
   117b8:	eb000a10 	bl	14000 <vPortFree>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   117bc:	e320f000 	nop	{0}
   117c0:	e24bd004 	sub	sp, fp, #4
   117c4:	e8bd8800 	pop	{fp, pc}

000117c8 <prvCopyDataToQueue>:
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   117c8:	e92d4800 	push	{fp, lr}
   117cc:	e28db004 	add	fp, sp, #4
   117d0:	e24dd010 	sub	sp, sp, #16
   117d4:	e50b0008 	str	r0, [fp, #-8]
   117d8:	e50b100c 	str	r1, [fp, #-12]
   117dc:	e50b2010 	str	r2, [fp, #-16]
							{
   117e0:	e51b3008 	ldr	r3, [fp, #-8]
   117e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117e8:	e3530000 	cmp	r3, #0
   117ec:	0a000038 	beq	118d4 <prvCopyDataToQueue+0x10c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
   117f0:	e51b3010 	ldr	r3, [fp, #-16]
   117f4:	e3530000 	cmp	r3, #0
   117f8:	1a000018 	bne	11860 <prvCopyDataToQueue+0x98>
					{
						mtCOVERAGE_TEST_MARKER();
   117fc:	e51b3008 	ldr	r3, [fp, #-8]
   11800:	e5930008 	ldr	r0, [r3, #8]
   11804:	e51b3008 	ldr	r3, [fp, #-8]
   11808:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1180c:	e1a02003 	mov	r2, r3
   11810:	e51b100c 	ldr	r1, [fp, #-12]
   11814:	eb000afe 	bl	14414 <memcpy>
					}
   11818:	e51b3008 	ldr	r3, [fp, #-8]
   1181c:	e5932008 	ldr	r2, [r3, #8]
   11820:	e51b3008 	ldr	r3, [fp, #-8]
   11824:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11828:	e0822003 	add	r2, r2, r3
   1182c:	e51b3008 	ldr	r3, [fp, #-8]
   11830:	e5832008 	str	r2, [r3, #8]
				}
   11834:	e51b3008 	ldr	r3, [fp, #-8]
   11838:	e5932008 	ldr	r2, [r3, #8]
   1183c:	e51b3008 	ldr	r3, [fp, #-8]
   11840:	e5933004 	ldr	r3, [r3, #4]
   11844:	e1520003 	cmp	r2, r3
   11848:	3a000021 	bcc	118d4 <prvCopyDataToQueue+0x10c>
				#endif /* configUSE_QUEUE_SETS */
			}
   1184c:	e51b3008 	ldr	r3, [fp, #-8]
   11850:	e5932000 	ldr	r2, [r3]
   11854:	e51b3008 	ldr	r3, [fp, #-8]
   11858:	e5832008 	str	r2, [r3, #8]
   1185c:	ea00001c 	b	118d4 <prvCopyDataToQueue+0x10c>
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   11860:	e51b3008 	ldr	r3, [fp, #-8]
   11864:	e593000c 	ldr	r0, [r3, #12]
   11868:	e51b3008 	ldr	r3, [fp, #-8]
   1186c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11870:	e1a02003 	mov	r2, r3
   11874:	e51b100c 	ldr	r1, [fp, #-12]
   11878:	eb000ae5 	bl	14414 <memcpy>
			}
   1187c:	e51b3008 	ldr	r3, [fp, #-8]
   11880:	e593200c 	ldr	r2, [r3, #12]
   11884:	e51b3008 	ldr	r3, [fp, #-8]
   11888:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1188c:	e2633000 	rsb	r3, r3, #0
   11890:	e0822003 	add	r2, r2, r3
   11894:	e51b3008 	ldr	r3, [fp, #-8]
   11898:	e583200c 	str	r2, [r3, #12]

   1189c:	e51b3008 	ldr	r3, [fp, #-8]
   118a0:	e593200c 	ldr	r2, [r3, #12]
   118a4:	e51b3008 	ldr	r3, [fp, #-8]
   118a8:	e5933000 	ldr	r3, [r3]
   118ac:	e1520003 	cmp	r2, r3
   118b0:	2a000007 	bcs	118d4 <prvCopyDataToQueue+0x10c>
			xReturn = pdPASS;
		}
   118b4:	e51b3008 	ldr	r3, [fp, #-8]
   118b8:	e5932004 	ldr	r2, [r3, #4]
   118bc:	e51b3008 	ldr	r3, [fp, #-8]
   118c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   118c4:	e2633000 	rsb	r3, r3, #0
   118c8:	e0822003 	add	r2, r2, r3
   118cc:	e51b3008 	ldr	r3, [fp, #-8]
   118d0:	e583200c 	str	r2, [r3, #12]
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   118d4:	e51b3008 	ldr	r3, [fp, #-8]
   118d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   118dc:	e2832001 	add	r2, r3, #1
   118e0:	e51b3008 	ldr	r3, [fp, #-8]
   118e4:	e5832038 	str	r2, [r3, #56]	; 0x38
		}
   118e8:	e320f000 	nop	{0}
   118ec:	e24bd004 	sub	sp, fp, #4
   118f0:	e8bd8800 	pop	{fp, pc}

000118f4 <prvCopyDataFromQueue>:
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   118f4:	e92d4800 	push	{fp, lr}
   118f8:	e28db004 	add	fp, sp, #4
   118fc:	e24dd008 	sub	sp, sp, #8
   11900:	e50b0008 	str	r0, [fp, #-8]
   11904:	e50b100c 	str	r1, [fp, #-12]
}
   11908:	e51b3008 	ldr	r3, [fp, #-8]
   1190c:	e5933000 	ldr	r3, [r3]
   11910:	e3530000 	cmp	r3, #0
   11914:	0a000017 	beq	11978 <prvCopyDataFromQueue+0x84>
/*-----------------------------------------------------------*/

   11918:	e51b3008 	ldr	r3, [fp, #-8]
   1191c:	e593200c 	ldr	r2, [r3, #12]
   11920:	e51b3008 	ldr	r3, [fp, #-8]
   11924:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11928:	e0822003 	add	r2, r2, r3
   1192c:	e51b3008 	ldr	r3, [fp, #-8]
   11930:	e583200c 	str	r2, [r3, #12]
BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
   11934:	e51b3008 	ldr	r3, [fp, #-8]
   11938:	e593200c 	ldr	r2, [r3, #12]
   1193c:	e51b3008 	ldr	r3, [fp, #-8]
   11940:	e5933004 	ldr	r3, [r3, #4]
   11944:	e1520003 	cmp	r2, r3
   11948:	3a000003 	bcc	1195c <prvCopyDataFromQueue+0x68>
{
BaseType_t xEntryTimeSet = pdFALSE;
   1194c:	e51b3008 	ldr	r3, [fp, #-8]
   11950:	e5932000 	ldr	r2, [r3]
   11954:	e51b3008 	ldr	r3, [fp, #-8]
   11958:	e583200c 	str	r2, [r3, #12]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1195c:	e51b3008 	ldr	r3, [fp, #-8]
   11960:	e593100c 	ldr	r1, [r3, #12]
   11964:	e51b3008 	ldr	r3, [fp, #-8]
   11968:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1196c:	e1a02003 	mov	r2, r3
   11970:	e51b000c 	ldr	r0, [fp, #-12]
   11974:	eb000aa6 	bl	14414 <memcpy>

	/* Check the pointer is not NULL. */
   11978:	e320f000 	nop	{0}
   1197c:	e24bd004 	sub	sp, fp, #4
   11980:	e8bd8800 	pop	{fp, pc}

00011984 <prvUnlockQueue>:
	configASSERT( ( pxQueue ) );

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
   11984:	e92d4800 	push	{fp, lr}
   11988:	e28db004 	add	fp, sp, #4
   1198c:	e24dd008 	sub	sp, sp, #8
   11990:	e50b0008 	str	r0, [fp, #-8]

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
   11994:	ebfffae9 	bl	10540 <vPortEnterCritical>
	#endif


   11998:	ea000010 	b	119e0 <prvUnlockQueue+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
   1199c:	e51b3008 	ldr	r3, [fp, #-8]
   119a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   119a4:	e3530000 	cmp	r3, #0
   119a8:	0a000011 	beq	119f4 <prvUnlockQueue+0x70>
	{
		taskENTER_CRITICAL();
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   119ac:	e51b3008 	ldr	r3, [fp, #-8]
   119b0:	e2833024 	add	r3, r3, #36	; 0x24
   119b4:	e1a00003 	mov	r0, r3
   119b8:	eb00051f 	bl	12e3c <xTaskRemoveFromEventList>
   119bc:	e1a03000 	mov	r3, r0
   119c0:	e3530000 	cmp	r3, #0
   119c4:	0a000000 	beq	119cc <prvUnlockQueue+0x48>

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   119c8:	eb0005b0 	bl	13090 <vTaskMissedYield>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   119cc:	e51b3008 	ldr	r3, [fp, #-8]
   119d0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119d4:	e2432001 	sub	r2, r3, #1
   119d8:	e51b3008 	ldr	r3, [fp, #-8]
   119dc:	e5832048 	str	r2, [r3, #72]	; 0x48

   119e0:	e51b3008 	ldr	r3, [fp, #-8]
   119e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119e8:	e3530000 	cmp	r3, #0
   119ec:	caffffea 	bgt	1199c <prvUnlockQueue+0x18>
   119f0:	ea000000 	b	119f8 <prvUnlockQueue+0x74>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;

				/* There is now space in the queue, were any tasks waiting to
   119f4:	e320f000 	nop	{0}
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
				{
   119f8:	e51b3008 	ldr	r3, [fp, #-8]
   119fc:	e3e02000 	mvn	r2, #0
   11a00:	e5832048 	str	r2, [r3, #72]	; 0x48
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
					{
   11a04:	ebfffade 	bl	10584 <vPortExitCritical>
						queueYIELD_IF_USING_PREEMPTION();
					}
					else
   11a08:	ebfffacc 	bl	10540 <vPortEnterCritical>
					{
						mtCOVERAGE_TEST_MARKER();
   11a0c:	ea000010 	b	11a54 <prvUnlockQueue+0xd0>
					}
				}
   11a10:	e51b3008 	ldr	r3, [fp, #-8]
   11a14:	e5933010 	ldr	r3, [r3, #16]
   11a18:	e3530000 	cmp	r3, #0
   11a1c:	0a000011 	beq	11a68 <prvUnlockQueue+0xe4>
				else
				{
   11a20:	e51b3008 	ldr	r3, [fp, #-8]
   11a24:	e2833010 	add	r3, r3, #16
   11a28:	e1a00003 	mov	r0, r3
   11a2c:	eb000502 	bl	12e3c <xTaskRemoveFromEventList>
   11a30:	e1a03000 	mov	r3, r0
   11a34:	e3530000 	cmp	r3, #0
   11a38:	0a000000 	beq	11a40 <prvUnlockQueue+0xbc>
					mtCOVERAGE_TEST_MARKER();
				}
   11a3c:	eb000593 	bl	13090 <vTaskMissedYield>

				taskEXIT_CRITICAL();
				return pdPASS;
   11a40:	e51b3008 	ldr	r3, [fp, #-8]
   11a44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a48:	e2432001 	sub	r2, r3, #1
   11a4c:	e51b3008 	ldr	r3, [fp, #-8]
   11a50:	e5832044 	str	r2, [r3, #68]	; 0x44
						mtCOVERAGE_TEST_MARKER();
   11a54:	e51b3008 	ldr	r3, [fp, #-8]
   11a58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a5c:	e3530000 	cmp	r3, #0
   11a60:	caffffea 	bgt	11a10 <prvUnlockQueue+0x8c>
   11a64:	ea000000 	b	11a6c <prvUnlockQueue+0xe8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   11a68:	e320f000 	nop	{0}
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11a6c:	e51b3008 	ldr	r3, [fp, #-8]
   11a70:	e3e02000 	mvn	r2, #0
   11a74:	e5832044 	str	r2, [r3, #68]	; 0x44
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   11a78:	ebfffac1 	bl	10584 <vPortExitCritical>
				}
   11a7c:	e320f000 	nop	{0}
   11a80:	e24bd004 	sub	sp, fp, #4
   11a84:	e8bd8800 	pop	{fp, pc}

00011a88 <prvIsQueueEmpty>:
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
   11a88:	e92d4800 	push	{fp, lr}
   11a8c:	e28db004 	add	fp, sp, #4
   11a90:	e24dd010 	sub	sp, sp, #16
   11a94:	e50b0010 	str	r0, [fp, #-16]
					vTaskInternalSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
   11a98:	ebfffaa8 	bl	10540 <vPortEnterCritical>
				else
   11a9c:	e51b3010 	ldr	r3, [fp, #-16]
   11aa0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11aa4:	e3530000 	cmp	r3, #0
   11aa8:	03a03001 	moveq	r3, #1
   11aac:	13a03000 	movne	r3, #0
   11ab0:	e6ef3073 	uxtb	r3, r3
   11ab4:	e50b3008 	str	r3, [fp, #-8]
				{
   11ab8:	ebfffab1 	bl	10584 <vPortExitCritical>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
   11abc:	e51b3008 	ldr	r3, [fp, #-8]
				}
   11ac0:	e1a00003 	mov	r0, r3
   11ac4:	e24bd004 	sub	sp, fp, #4
   11ac8:	e8bd8800 	pop	{fp, pc}

00011acc <xQueueIsQueueEmptyFromISR>:
			}
		}
		taskEXIT_CRITICAL();

   11acc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11ad0:	e28db000 	add	fp, sp, #0
   11ad4:	e24dd014 	sub	sp, sp, #20
   11ad8:	e50b0010 	str	r0, [fp, #-16]
		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11adc:	e51b3010 	ldr	r3, [fp, #-16]
   11ae0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11ae4:	e3530000 	cmp	r3, #0
   11ae8:	03a03001 	moveq	r3, #1
   11aec:	13a03000 	movne	r3, #0
   11af0:	e6ef3073 	uxtb	r3, r3
   11af4:	e50b3008 	str	r3, [fp, #-8]
		prvLockQueue( pxQueue );

   11af8:	e51b3008 	ldr	r3, [fp, #-8]
		/* Update the timeout state to see if it has expired yet. */
   11afc:	e1a00003 	mov	r0, r3
   11b00:	e28bd000 	add	sp, fp, #0
   11b04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b08:	e12fff1e 	bx	lr

00011b0c <prvIsQueueFull>:
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
   11b0c:	e92d4800 	push	{fp, lr}
   11b10:	e28db004 	add	fp, sp, #4
   11b14:	e24dd010 	sub	sp, sp, #16
   11b18:	e50b0010 	str	r0, [fp, #-16]
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   11b1c:	ebfffa87 	bl	10540 <vPortEnterCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   11b20:	e51b3010 	ldr	r3, [fp, #-16]
   11b24:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b28:	e51b3010 	ldr	r3, [fp, #-16]
   11b2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b30:	e1520003 	cmp	r2, r3
   11b34:	03a03001 	moveq	r3, #1
   11b38:	13a03000 	movne	r3, #0
   11b3c:	e6ef3073 	uxtb	r3, r3
   11b40:	e50b3008 	str	r3, [fp, #-8]
				prvUnlockQueue( pxQueue );
   11b44:	ebfffa8e 	bl	10584 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
				{
   11b48:	e51b3008 	ldr	r3, [fp, #-8]
					portYIELD_WITHIN_API();
   11b4c:	e1a00003 	mov	r0, r3
   11b50:	e24bd004 	sub	sp, fp, #4
   11b54:	e8bd8800 	pop	{fp, pc}

00011b58 <xQueueIsQueueFullFromISR>:
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
   11b58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11b5c:	e28db000 	add	fp, sp, #0
   11b60:	e24dd014 	sub	sp, sp, #20
   11b64:	e50b0010 	str	r0, [fp, #-16]
				}
			}
			else
			{
   11b68:	e51b3010 	ldr	r3, [fp, #-16]
   11b6c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b70:	e51b3010 	ldr	r3, [fp, #-16]
   11b74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b78:	e1520003 	cmp	r2, r3
   11b7c:	03a03001 	moveq	r3, #1
   11b80:	13a03000 	movne	r3, #0
   11b84:	e6ef3073 	uxtb	r3, r3
   11b88:	e50b3008 	str	r3, [fp, #-8]
				/* The queue contains data again.  Loop back to try and read the
				data. */
   11b8c:	e51b3008 	ldr	r3, [fp, #-8]
				prvUnlockQueue( pxQueue );
   11b90:	e1a00003 	mov	r0, r3
   11b94:	e28bd000 	add	sp, fp, #0
   11b98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b9c:	e12fff1e 	bx	lr

00011ba0 <xTaskGenericCreate>:
	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );

#endif

#if( configUSE_TICK_HOOK > 0 )

   11ba0:	e92d4800 	push	{fp, lr}
   11ba4:	e28db004 	add	fp, sp, #4
   11ba8:	e24dd028 	sub	sp, sp, #40	; 0x28
   11bac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11bb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11bb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   11bb8:	e14b21be 	strh	r2, [fp, #-30]	; 0xffffffe2

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ); /*lint !e526 Symbol not defined as it is an application callback. */

#endif
   11bbc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bc0:	e59b100c 	ldr	r1, [fp, #12]
   11bc4:	e1a00003 	mov	r0, r3
   11bc8:	eb000603 	bl	133dc <prvAllocateTCBAndStack>
   11bcc:	e50b000c 	str	r0, [fp, #-12]

/* File private functions. --------------------------------*/
   11bd0:	e51b300c 	ldr	r3, [fp, #-12]
   11bd4:	e3530000 	cmp	r3, #0
   11bd8:	0a000067 	beq	11d7c <xTaskGenericCreate+0x1dc>
/*
 * The idle task, which as all tasks is implemented as a never ending loop.
 * The idle task is automatically created and added to the ready lists upon
 * creation of the first user task.
 *
 * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
   11bdc:	e51b300c 	ldr	r3, [fp, #-12]
   11be0:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   11be4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11be8:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   11bec:	e1a03103 	lsl	r3, r3, #2
   11bf0:	e0823003 	add	r3, r2, r3
   11bf4:	e50b3010 	str	r3, [fp, #-16]
 * language extensions.  The equivalent prototype for this function is:
   11bf8:	e51b3010 	ldr	r3, [fp, #-16]
   11bfc:	e3c33007 	bic	r3, r3, #7
   11c00:	e50b3010 	str	r3, [fp, #-16]

	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;

#endif

/*
   11c04:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11c08:	e58d3000 	str	r3, [sp]
   11c0c:	e59b3010 	ldr	r3, [fp, #16]
   11c10:	e59b2004 	ldr	r2, [fp, #4]
   11c14:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11c18:	e51b000c 	ldr	r0, [fp, #-12]
   11c1c:	eb000531 	bl	130e8 <prvInitialiseTCBVariables>
/*
 * The currently executing task is entering the Blocked state.  Add the task to
 * either the current or the overflow delayed task list.
 */
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUNCTION;

   11c20:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11c24:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   11c28:	e51b0010 	ldr	r0, [fp, #-16]
   11c2c:	ebfff8f3 	bl	10000 <pxPortInitialiseStack>
   11c30:	e1a02000 	mov	r2, r0
   11c34:	e51b300c 	ldr	r3, [fp, #-12]
   11c38:	e5832000 	str	r2, [r3]
 * Fills an TaskStatus_t structure with information on each task that is
 * referenced from the pxList list (which may be a ready list, a delayed list,
 * a suspended list, etc.).
 *
 * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 * NORMAL APPLICATION CODE.
   11c3c:	e59b3008 	ldr	r3, [fp, #8]
   11c40:	e3530000 	cmp	r3, #0
   11c44:	0a000002 	beq	11c54 <xTaskGenericCreate+0xb4>
 */
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState ) PRIVILEGED_FUNCTION;

   11c48:	e59b3008 	ldr	r3, [fp, #8]
   11c4c:	e51b200c 	ldr	r2, [fp, #-12]
   11c50:	e5832000 	str	r2, [r3]
#endif

/*
 * Searches pxList for a task with name pcNameToQuery - returning a handle to
 * the task if it is found, or NULL if the task is not found.
   11c54:	ebfffa39 	bl	10540 <vPortEnterCritical>
 */
#if ( INCLUDE_xTaskGetHandle == 1 )
   11c58:	e59f316c 	ldr	r3, [pc, #364]	; 11dcc <xTaskGenericCreate+0x22c>
   11c5c:	e5933000 	ldr	r3, [r3]
   11c60:	e2833001 	add	r3, r3, #1
   11c64:	e59f2160 	ldr	r2, [pc, #352]	; 11dcc <xTaskGenericCreate+0x22c>
   11c68:	e5823000 	str	r3, [r2]

   11c6c:	e59f315c 	ldr	r3, [pc, #348]	; 11dd0 <xTaskGenericCreate+0x230>
   11c70:	e5933000 	ldr	r3, [r3]
   11c74:	e3530000 	cmp	r3, #0
   11c78:	1a000008 	bne	11ca0 <xTaskGenericCreate+0x100>
	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVILEGED_FUNCTION;

#endif

   11c7c:	e59f214c 	ldr	r2, [pc, #332]	; 11dd0 <xTaskGenericCreate+0x230>
   11c80:	e51b300c 	ldr	r3, [fp, #-12]
   11c84:	e5823000 	str	r3, [r2]
/*
 * When a task is created, the stack of the task is filled with a known value.
   11c88:	e59f313c 	ldr	r3, [pc, #316]	; 11dcc <xTaskGenericCreate+0x22c>
   11c8c:	e5933000 	ldr	r3, [r3]
   11c90:	e3530001 	cmp	r3, #1
   11c94:	1a00000e 	bne	11cd4 <xTaskGenericCreate+0x134>
 * This function determines the 'high water mark' of the task stack by
 * determining how much of the stack remains at the original preset value.
 */
#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

   11c98:	eb000542 	bl	131a8 <prvInitialiseTaskLists>
   11c9c:	ea00000c 	b	11cd4 <xTaskGenericCreate+0x134>
#endif

/*
 * Return the amount of time, in ticks, that will pass before the kernel will
 * next move a task from the Blocked state to the Running state.
 *
   11ca0:	e59f312c 	ldr	r3, [pc, #300]	; 11dd4 <xTaskGenericCreate+0x234>
   11ca4:	e5933000 	ldr	r3, [r3]
   11ca8:	e3530000 	cmp	r3, #0
   11cac:	1a000008 	bne	11cd4 <xTaskGenericCreate+0x134>
 * This conditional compilation should use inequality to 0, not equality to 1.
 * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
   11cb0:	e59f3118 	ldr	r3, [pc, #280]	; 11dd0 <xTaskGenericCreate+0x230>
   11cb4:	e5933000 	ldr	r3, [r3]
   11cb8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cbc:	e59b3004 	ldr	r3, [fp, #4]
   11cc0:	e1520003 	cmp	r2, r3
   11cc4:	8a000002 	bhi	11cd4 <xTaskGenericCreate+0x134>
 * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 * set to a value other than 1.
   11cc8:	e59f2100 	ldr	r2, [pc, #256]	; 11dd0 <xTaskGenericCreate+0x230>
   11ccc:	e51b300c 	ldr	r3, [fp, #-12]
   11cd0:	e5823000 	str	r3, [r2]
#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

   11cd4:	e51b300c 	ldr	r3, [fp, #-12]
   11cd8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cdc:	e59f30f4 	ldr	r3, [pc, #244]	; 11dd8 <xTaskGenericCreate+0x238>
   11ce0:	e5933000 	ldr	r3, [r3]
   11ce4:	e1520003 	cmp	r2, r3
   11ce8:	9a000003 	bls	11cfc <xTaskGenericCreate+0x15c>
/*
 * Set xNextTaskUnblockTime to the time at which the next Blocked state task
   11cec:	e51b300c 	ldr	r3, [fp, #-12]
   11cf0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11cf4:	e59f20dc 	ldr	r2, [pc, #220]	; 11dd8 <xTaskGenericCreate+0x238>
   11cf8:	e5823000 	str	r3, [r2]

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	/*
	 * Helper function used to pad task names with spaces when printing out
	 * human readable tables of task information.
   11cfc:	e59f30d8 	ldr	r3, [pc, #216]	; 11ddc <xTaskGenericCreate+0x23c>
   11d00:	e5933000 	ldr	r3, [r3]
   11d04:	e2833001 	add	r3, r3, #1
   11d08:	e59f20cc 	ldr	r2, [pc, #204]	; 11ddc <xTaskGenericCreate+0x23c>
   11d0c:	e5823000 	str	r3, [r2]
	 */
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
   11d10:	e51b300c 	ldr	r3, [fp, #-12]
   11d14:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d18:	e59f30c0 	ldr	r3, [pc, #192]	; 11de0 <xTaskGenericCreate+0x240>
   11d1c:	e5933000 	ldr	r3, [r3]
   11d20:	e1520003 	cmp	r2, r3
   11d24:	9a000003 	bls	11d38 <xTaskGenericCreate+0x198>
   11d28:	e51b300c 	ldr	r3, [fp, #-12]
   11d2c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11d30:	e59f20a8 	ldr	r2, [pc, #168]	; 11de0 <xTaskGenericCreate+0x240>
   11d34:	e5823000 	str	r3, [r2]
   11d38:	e51b300c 	ldr	r3, [fp, #-12]
   11d3c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d40:	e1a03002 	mov	r3, r2
   11d44:	e1a03103 	lsl	r3, r3, #2
   11d48:	e0833002 	add	r3, r3, r2
   11d4c:	e1a03103 	lsl	r3, r3, #2
   11d50:	e59f208c 	ldr	r2, [pc, #140]	; 11de4 <xTaskGenericCreate+0x244>
   11d54:	e0832002 	add	r2, r3, r2
   11d58:	e51b300c 	ldr	r3, [fp, #-12]
   11d5c:	e2833004 	add	r3, r3, #4
   11d60:	e1a01003 	mov	r1, r3
   11d64:	e1a00002 	mov	r0, r2
   11d68:	ebfffc1e 	bl	10de8 <vListInsertEnd>

#endif
   11d6c:	e3a03001 	mov	r3, #1
   11d70:	e50b3008 	str	r3, [fp, #-8]

/*
 * Called after a Task_t structure has been allocated either statically or
 * dynamically to fill in the structure's members.
   11d74:	ebfffa02 	bl	10584 <vPortExitCritical>
   11d78:	ea000001 	b	11d84 <xTaskGenericCreate+0x1e4>
 */
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
									const uint32_t ulStackDepth,
   11d7c:	e3e03000 	mvn	r3, #0
   11d80:	e50b3008 	str	r3, [fp, #-8]
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
   11d84:	e51b3008 	ldr	r3, [fp, #-8]
   11d88:	e3530001 	cmp	r3, #1
   11d8c:	1a00000a 	bne	11dbc <xTaskGenericCreate+0x21c>
									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;

   11d90:	e59f303c 	ldr	r3, [pc, #60]	; 11dd4 <xTaskGenericCreate+0x234>
   11d94:	e5933000 	ldr	r3, [r3]
   11d98:	e3530000 	cmp	r3, #0
   11d9c:	0a000006 	beq	11dbc <xTaskGenericCreate+0x21c>
/*
 * Called after a new task has been created and initialised to place the task
 * under the control of the scheduler.
 */
   11da0:	e59f3028 	ldr	r3, [pc, #40]	; 11dd0 <xTaskGenericCreate+0x230>
   11da4:	e5933000 	ldr	r3, [r3]
   11da8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11dac:	e59b3004 	ldr	r3, [fp, #4]
   11db0:	e1520003 	cmp	r2, r3
   11db4:	2a000000 	bcs	11dbc <xTaskGenericCreate+0x21c>
static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;

   11db8:	ef000000 	svc	0x00000000
/*
 * freertos_tasks_c_additions_init() should only be called if the user definable
 * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 * called by the function.
 */
   11dbc:	e51b3008 	ldr	r3, [fp, #-8]
#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
   11dc0:	e1a00003 	mov	r0, r3
   11dc4:	e24bd004 	sub	sp, fp, #4
   11dc8:	e8bd8800 	pop	{fp, pc}
   11dcc:	000148ac 	andeq	r4, r1, ip, lsr #17
   11dd0:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11dd4:	000148bc 			; <UNDEFINED> instruction: 0x000148bc
   11dd8:	000148b4 			; <UNDEFINED> instruction: 0x000148b4
   11ddc:	000148d0 	ldrdeq	r4, [r1], -r0
   11de0:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   11de4:	000147d8 	ldrdeq	r4, [r1], -r8

00011de8 <vTaskDelete>:

	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;

#endif

/*-----------------------------------------------------------*/
   11de8:	e92d4800 	push	{fp, lr}
   11dec:	e28db004 	add	fp, sp, #4
   11df0:	e24dd010 	sub	sp, sp, #16
   11df4:	e50b0010 	str	r0, [fp, #-16]

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

   11df8:	ebfff9d0 	bl	10540 <vPortEnterCritical>
	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
									const uint32_t ulStackDepth,
									void * const pvParameters,
   11dfc:	e59f30d0 	ldr	r3, [pc, #208]	; 11ed4 <vTaskDelete+0xec>
   11e00:	e5933000 	ldr	r3, [r3]
   11e04:	e51b2010 	ldr	r2, [fp, #-16]
   11e08:	e1520003 	cmp	r2, r3
   11e0c:	1a000001 	bne	11e18 <vTaskDelete+0x30>
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
   11e10:	e3a03000 	mov	r3, #0
   11e14:	e50b3010 	str	r3, [fp, #-16]
									StaticTask_t * const pxTaskBuffer )
	{
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;
   11e18:	e51b3010 	ldr	r3, [fp, #-16]
   11e1c:	e3530000 	cmp	r3, #0
   11e20:	1a000002 	bne	11e30 <vTaskDelete+0x48>
   11e24:	e59f30a8 	ldr	r3, [pc, #168]	; 11ed4 <vTaskDelete+0xec>
   11e28:	e5933000 	ldr	r3, [r3]
   11e2c:	ea000000 	b	11e34 <vTaskDelete+0x4c>
   11e30:	e51b3010 	ldr	r3, [fp, #-16]
   11e34:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( puxStackBuffer != NULL );
		configASSERT( pxTaskBuffer != NULL );

		#if( configASSERT_DEFINED == 1 )
		{
   11e38:	e51b3008 	ldr	r3, [fp, #-8]
   11e3c:	e2833004 	add	r3, r3, #4
   11e40:	e1a00003 	mov	r0, r3
   11e44:	ebfffc43 	bl	10f58 <vListRemove>
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
   11e48:	e51b3008 	ldr	r3, [fp, #-8]
   11e4c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   11e50:	e3530000 	cmp	r3, #0
   11e54:	0a000003 	beq	11e68 <vTaskDelete+0x80>
			volatile size_t xSize = sizeof( StaticTask_t );
			configASSERT( xSize == sizeof( TCB_t ) );
   11e58:	e51b3008 	ldr	r3, [fp, #-8]
   11e5c:	e2833018 	add	r3, r3, #24
   11e60:	e1a00003 	mov	r0, r3
   11e64:	ebfffc3b 	bl	10f58 <vListRemove>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */
   11e68:	e51b3008 	ldr	r3, [fp, #-8]
   11e6c:	e2833004 	add	r3, r3, #4
   11e70:	e1a01003 	mov	r1, r3
   11e74:	e59f005c 	ldr	r0, [pc, #92]	; 11ed8 <vTaskDelete+0xf0>
   11e78:	ebfffbda 	bl	10de8 <vListInsertEnd>


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
		{
			/* The memory used for the task's TCB and stack are passed into this
   11e7c:	e59f3058 	ldr	r3, [pc, #88]	; 11edc <vTaskDelete+0xf4>
   11e80:	e5933000 	ldr	r3, [r3]
   11e84:	e2833001 	add	r3, r3, #1
   11e88:	e59f204c 	ldr	r2, [pc, #76]	; 11edc <vTaskDelete+0xf4>
   11e8c:	e5823000 	str	r3, [r2]
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;

   11e90:	e59f3048 	ldr	r3, [pc, #72]	; 11ee0 <vTaskDelete+0xf8>
   11e94:	e5933000 	ldr	r3, [r3]
   11e98:	e2833001 	add	r3, r3, #1
   11e9c:	e59f203c 	ldr	r2, [pc, #60]	; 11ee0 <vTaskDelete+0xf8>
   11ea0:	e5823000 	str	r3, [r2]
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
   11ea4:	ebfff9b6 	bl	10584 <vPortExitCritical>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
   11ea8:	e59f3034 	ldr	r3, [pc, #52]	; 11ee4 <vTaskDelete+0xfc>
   11eac:	e5933000 	ldr	r3, [r3]
   11eb0:	e3530000 	cmp	r3, #0
   11eb4:	0a000003 	beq	11ec8 <vTaskDelete+0xe0>

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
   11eb8:	e51b3010 	ldr	r3, [fp, #-16]
   11ebc:	e3530000 	cmp	r3, #0
   11ec0:	1a000000 	bne	11ec8 <vTaskDelete+0xe0>
			prvAddNewTaskToReadyList( pxNewTCB );
		}
   11ec4:	ef000000 	svc	0x00000000
		else
		{
			xReturn = NULL;
   11ec8:	e320f000 	nop	{0}
   11ecc:	e24bd004 	sub	sp, fp, #4
   11ed0:	e8bd8800 	pop	{fp, pc}
   11ed4:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11ed8:	00014880 	andeq	r4, r1, r0, lsl #17
   11edc:	00014894 	muleq	r1, r4, r8
   11ee0:	000148d0 	ldrdeq	r4, [r1], -r0
   11ee4:	000148bc 			; <UNDEFINED> instruction: 0x000148bc

00011ee8 <vTaskDelayUntil>:
	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask )
	{
	TCB_t *pxNewTCB;
	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
   11ee8:	e92d4800 	push	{fp, lr}
   11eec:	e28db004 	add	fp, sp, #4
   11ef0:	e24dd018 	sub	sp, sp, #24
   11ef4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11ef8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );

   11efc:	e3a03000 	mov	r3, #0
   11f00:	e50b3008 	str	r3, [fp, #-8]
		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function and whether or
			not static allocation is being used. */
   11f04:	eb0001f6 	bl	126e4 <vTaskSuspendAll>
			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;

			/* Store the stack location in the TCB. */
   11f08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f0c:	e5932000 	ldr	r2, [r3]
   11f10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f14:	e0823003 	add	r3, r2, r3
   11f18:	e50b300c 	str	r3, [fp, #-12]
			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;

   11f1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f20:	e5932000 	ldr	r2, [r3]
   11f24:	e59f30c4 	ldr	r3, [pc, #196]	; 11ff0 <vTaskDelayUntil+0x108>
   11f28:	e5933000 	ldr	r3, [r3]
   11f2c:	e1520003 	cmp	r2, r3
   11f30:	9a00000c 	bls	11f68 <vTaskDelayUntil+0x80>
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
   11f34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f38:	e5932000 	ldr	r2, [r3]
   11f3c:	e51b300c 	ldr	r3, [fp, #-12]
   11f40:	e1520003 	cmp	r2, r3
   11f44:	9a000013 	bls	11f98 <vTaskDelayUntil+0xb0>
   11f48:	e59f30a0 	ldr	r3, [pc, #160]	; 11ff0 <vTaskDelayUntil+0x108>
   11f4c:	e5933000 	ldr	r3, [r3]
   11f50:	e51b200c 	ldr	r2, [fp, #-12]
   11f54:	e1520003 	cmp	r2, r3
   11f58:	9a00000e 	bls	11f98 <vTaskDelayUntil+0xb0>

			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
   11f5c:	e3a03001 	mov	r3, #1
   11f60:	e50b3008 	str	r3, [fp, #-8]
   11f64:	ea00000b 	b	11f98 <vTaskDelayUntil+0xb0>
									pxTaskDefinition->pvParameters,
									pxTaskDefinition->uxPriority,
									pxCreatedTask, pxNewTCB,
									pxTaskDefinition->xRegions );

			prvAddNewTaskToReadyList( pxNewTCB );
   11f68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f6c:	e5932000 	ldr	r2, [r3]
   11f70:	e51b300c 	ldr	r3, [fp, #-12]
   11f74:	e1520003 	cmp	r2, r3
   11f78:	8a000004 	bhi	11f90 <vTaskDelayUntil+0xa8>
   11f7c:	e59f306c 	ldr	r3, [pc, #108]	; 11ff0 <vTaskDelayUntil+0x108>
   11f80:	e5933000 	ldr	r3, [r3]
   11f84:	e51b200c 	ldr	r2, [fp, #-12]
   11f88:	e1520003 	cmp	r2, r3
   11f8c:	9a000001 	bls	11f98 <vTaskDelayUntil+0xb0>
			xReturn = pdPASS;
		}
   11f90:	e3a03001 	mov	r3, #1
   11f94:	e50b3008 	str	r3, [fp, #-8]

		return xReturn;
	}

#endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
   11f98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f9c:	e51b200c 	ldr	r2, [fp, #-12]
   11fa0:	e5832000 	str	r2, [r3]
/*-----------------------------------------------------------*/

   11fa4:	e51b3008 	ldr	r3, [fp, #-8]
   11fa8:	e3530000 	cmp	r3, #0
   11fac:	0a000006 	beq	11fcc <vTaskDelayUntil+0xe4>

	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask )
	{
	TCB_t *pxNewTCB;
	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;

   11fb0:	e59f303c 	ldr	r3, [pc, #60]	; 11ff4 <vTaskDelayUntil+0x10c>
   11fb4:	e5933000 	ldr	r3, [r3]
   11fb8:	e2833004 	add	r3, r3, #4
   11fbc:	e1a00003 	mov	r0, r3
   11fc0:	ebfffbe4 	bl	10f58 <vListRemove>
		configASSERT( pxTaskDefinition->puxStackBuffer );
   11fc4:	e51b000c 	ldr	r0, [fp, #-12]
   11fc8:	eb0004d5 	bl	13324 <prvAddCurrentTaskToDelayedList>

		if( pxTaskDefinition->puxStackBuffer != NULL )
		{
   11fcc:	eb0001d0 	bl	12714 <xTaskResumeAll>
   11fd0:	e50b0010 	str	r0, [fp, #-16]
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function and whether or
			not static allocation is being used. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   11fd4:	e51b3010 	ldr	r3, [fp, #-16]
   11fd8:	e3530000 	cmp	r3, #0
   11fdc:	1a000000 	bne	11fe4 <vTaskDelayUntil+0xfc>

			if( pxNewTCB != NULL )
   11fe0:	ef000000 	svc	0x00000000
			{
				/* Store the stack location in the TCB. */
   11fe4:	e320f000 	nop	{0}
   11fe8:	e24bd004 	sub	sp, fp, #4
   11fec:	e8bd8800 	pop	{fp, pc}
   11ff0:	000148b0 			; <UNDEFINED> instruction: 0x000148b0
   11ff4:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00011ff8 <vTaskDelay>:
				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
				{
					/* Tasks can be created statically or dynamically, so note
					this task had a statically allocated stack in case it is
					later deleted.  The TCB was allocated dynamically. */
					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
   11ff8:	e92d4800 	push	{fp, lr}
   11ffc:	e28db004 	add	fp, sp, #4
   12000:	e24dd010 	sub	sp, sp, #16
   12004:	e50b0010 	str	r0, [fp, #-16]
				}
				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
   12008:	e3a03000 	mov	r3, #0
   1200c:	e50b3008 	str	r3, [fp, #-8]

				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
										pxTaskDefinition->pcName,
   12010:	e51b3010 	ldr	r3, [fp, #-16]
   12014:	e3530000 	cmp	r3, #0
   12018:	0a00000e 	beq	12058 <vTaskDelay+0x60>
										( uint32_t ) pxTaskDefinition->usStackDepth,
										pxTaskDefinition->pvParameters,
   1201c:	eb0001b0 	bl	126e4 <vTaskSuspendAll>

		return xReturn;
	}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/
   12020:	e59f304c 	ldr	r3, [pc, #76]	; 12074 <vTaskDelay+0x7c>
   12024:	e5932000 	ldr	r2, [r3]
   12028:	e51b3010 	ldr	r3, [fp, #-16]
   1202c:	e0823003 	add	r3, r2, r3
   12030:	e50b300c 	str	r3, [fp, #-12]

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
   12034:	e59f303c 	ldr	r3, [pc, #60]	; 12078 <vTaskDelay+0x80>
   12038:	e5933000 	ldr	r3, [r3]
   1203c:	e2833004 	add	r3, r3, #4
   12040:	e1a00003 	mov	r0, r3
   12044:	ebfffbc3 	bl	10f58 <vListRemove>
							const configSTACK_DEPTH_TYPE usStackDepth,
   12048:	e51b000c 	ldr	r0, [fp, #-12]
   1204c:	eb0004b4 	bl	13324 <prvAddCurrentTaskToDelayedList>
							void * const pvParameters,
							UBaseType_t uxPriority,
   12050:	eb0001af 	bl	12714 <xTaskResumeAll>
   12054:	e50b0008 	str	r0, [fp, #-8]
							TaskHandle_t * const pxCreatedTask )
	{
	TCB_t *pxNewTCB;
	BaseType_t xReturn;

   12058:	e51b3008 	ldr	r3, [fp, #-8]
   1205c:	e3530000 	cmp	r3, #0
   12060:	1a000000 	bne	12068 <vTaskDelay+0x70>
		/* If the stack grows down then allocate the stack then the TCB so the stack
		does not grow into the TCB.  Likewise if the stack grows up then allocate
   12064:	ef000000 	svc	0x00000000
		the TCB then the stack. */
		#if( portSTACK_GROWTH > 0 )
   12068:	e320f000 	nop	{0}
   1206c:	e24bd004 	sub	sp, fp, #4
   12070:	e8bd8800 	pop	{fp, pc}
   12074:	000148b0 			; <UNDEFINED> instruction: 0x000148b0
   12078:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

0001207c <uxTaskPriorityGet>:
			the implementation of the port malloc function and whether or not static
			allocation is being used. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
   1207c:	e92d4800 	push	{fp, lr}
   12080:	e28db004 	add	fp, sp, #4
   12084:	e24dd010 	sub	sp, sp, #16
   12088:	e50b0010 	str	r0, [fp, #-16]
				/* Allocate space for the stack used by the task being created.
				The base of the stack memory stored in the TCB so the task can
				be deleted later if required. */
				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1208c:	ebfff92b 	bl	10540 <vPortEnterCritical>

				if( pxNewTCB->pxStack == NULL )
				{
					/* Could not allocate the stack.  Delete the allocated TCB. */
   12090:	e51b3010 	ldr	r3, [fp, #-16]
   12094:	e3530000 	cmp	r3, #0
   12098:	1a000002 	bne	120a8 <uxTaskPriorityGet+0x2c>
   1209c:	e59f302c 	ldr	r3, [pc, #44]	; 120d0 <uxTaskPriorityGet+0x54>
   120a0:	e5933000 	ldr	r3, [r3]
   120a4:	ea000000 	b	120ac <uxTaskPriorityGet+0x30>
   120a8:	e51b3010 	ldr	r3, [fp, #-16]
   120ac:	e50b3008 	str	r3, [fp, #-8]
					vPortFree( pxNewTCB );
   120b0:	e51b3008 	ldr	r3, [fp, #-8]
   120b4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   120b8:	e50b300c 	str	r3, [fp, #-12]
					pxNewTCB = NULL;
				}
   120bc:	ebfff930 	bl	10584 <vPortExitCritical>
			}
		}
   120c0:	e51b300c 	ldr	r3, [fp, #-12]
		#else /* portSTACK_GROWTH */
   120c4:	e1a00003 	mov	r0, r3
   120c8:	e24bd004 	sub	sp, fp, #4
   120cc:	e8bd8800 	pop	{fp, pc}
   120d0:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000120d4 <vTaskPrioritySet>:

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */

			if( pxStack != NULL )
			{
   120d4:	e92d4800 	push	{fp, lr}
   120d8:	e28db004 	add	fp, sp, #4
   120dc:	e24dd018 	sub	sp, sp, #24
   120e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   120e4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */

   120e8:	e3a03000 	mov	r3, #0
   120ec:	e50b3008 	str	r3, [fp, #-8]
				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
				}
   120f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   120f4:	e3530004 	cmp	r3, #4
   120f8:	9a000001 	bls	12104 <vTaskPrioritySet+0x30>
				else
				{
   120fc:	e3a03004 	mov	r3, #4
   12100:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   12104:	ebfff90d 	bl	10540 <vPortEnterCritical>
				}
			}
   12108:	e59f3160 	ldr	r3, [pc, #352]	; 12270 <vTaskPrioritySet+0x19c>
   1210c:	e5933000 	ldr	r3, [r3]
   12110:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   12114:	e1520003 	cmp	r2, r3
   12118:	1a000001 	bne	12124 <vTaskPrioritySet+0x50>
			else
			{
   1211c:	e3a03000 	mov	r3, #0
   12120:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				pxNewTCB = NULL;
			}
		}
		#endif /* portSTACK_GROWTH */

   12124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12128:	e3530000 	cmp	r3, #0
   1212c:	1a000002 	bne	1213c <vTaskPrioritySet+0x68>
   12130:	e59f3138 	ldr	r3, [pc, #312]	; 12270 <vTaskPrioritySet+0x19c>
   12134:	e5933000 	ldr	r3, [r3]
   12138:	ea000000 	b	12140 <vTaskPrioritySet+0x6c>
   1213c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12140:	e50b300c 	str	r3, [fp, #-12]
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

   12144:	e51b300c 	ldr	r3, [fp, #-12]
   12148:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1214c:	e50b3010 	str	r3, [fp, #-16]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
   12150:	e51b2010 	ldr	r2, [fp, #-16]
   12154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   12158:	e1520003 	cmp	r2, r3
   1215c:	0a00003f 	beq	12260 <vTaskPrioritySet+0x18c>
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}
   12160:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   12164:	e51b3010 	ldr	r3, [fp, #-16]
   12168:	e1520003 	cmp	r2, r3
   1216c:	9a000005 	bls	12188 <vTaskPrioritySet+0xb4>

		return xReturn;
   12170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12174:	e3530000 	cmp	r3, #0
   12178:	0a000007 	beq	1219c <vTaskPrioritySet+0xc8>
	}

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
   1217c:	e3a03001 	mov	r3, #1
   12180:	e50b3008 	str	r3, [fp, #-8]
   12184:	ea000004 	b	1219c <vTaskPrioritySet+0xc8>
									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
									const uint32_t ulStackDepth,
									void * const pvParameters,
   12188:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1218c:	e3530000 	cmp	r3, #0
   12190:	1a000001 	bne	1219c <vTaskPrioritySet+0xc8>
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
   12194:	e3a03001 	mov	r3, #1
   12198:	e50b3008 	str	r3, [fp, #-8]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	/* Avoid dependency on memset() if it is not required. */
   1219c:	e51b300c 	ldr	r3, [fp, #-12]
   121a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   121a4:	e583202c 	str	r2, [r3, #44]	; 0x2c
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   121a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   121ac:	e2632005 	rsb	r2, r3, #5
   121b0:	e51b300c 	ldr	r3, [fp, #-12]
   121b4:	e5832018 	str	r2, [r3, #24]
	}
	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */

	/* Calculate the top of stack address.  This depends on whether the stack
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
   121b8:	e51b300c 	ldr	r3, [fp, #-12]
   121bc:	e5931014 	ldr	r1, [r3, #20]
   121c0:	e51b2010 	ldr	r2, [fp, #-16]
   121c4:	e1a03002 	mov	r3, r2
   121c8:	e1a03103 	lsl	r3, r3, #2
   121cc:	e0833002 	add	r3, r3, r2
   121d0:	e1a03103 	lsl	r3, r3, #2
   121d4:	e59f2098 	ldr	r2, [pc, #152]	; 12274 <vTaskPrioritySet+0x1a0>
   121d8:	e0833002 	add	r3, r3, r2
   121dc:	e1510003 	cmp	r1, r3
   121e0:	1a00001a 	bne	12250 <vTaskPrioritySet+0x17c>
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   121e4:	e51b300c 	ldr	r3, [fp, #-12]
   121e8:	e2833004 	add	r3, r3, #4
   121ec:	e1a00003 	mov	r0, r3
   121f0:	ebfffb58 	bl	10f58 <vListRemove>

   121f4:	e51b300c 	ldr	r3, [fp, #-12]
   121f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   121fc:	e59f3074 	ldr	r3, [pc, #116]	; 12278 <vTaskPrioritySet+0x1a4>
   12200:	e5933000 	ldr	r3, [r3]
   12204:	e1520003 	cmp	r2, r3
   12208:	9a000003 	bls	1221c <vTaskPrioritySet+0x148>
   1220c:	e51b300c 	ldr	r3, [fp, #-12]
   12210:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12214:	e59f205c 	ldr	r2, [pc, #92]	; 12278 <vTaskPrioritySet+0x1a4>
   12218:	e5823000 	str	r3, [r2]
   1221c:	e51b300c 	ldr	r3, [fp, #-12]
   12220:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12224:	e1a03002 	mov	r3, r2
   12228:	e1a03103 	lsl	r3, r3, #2
   1222c:	e0833002 	add	r3, r3, r2
   12230:	e1a03103 	lsl	r3, r3, #2
   12234:	e59f2038 	ldr	r2, [pc, #56]	; 12274 <vTaskPrioritySet+0x1a0>
   12238:	e0832002 	add	r2, r3, r2
   1223c:	e51b300c 	ldr	r3, [fp, #-12]
   12240:	e2833004 	add	r3, r3, #4
   12244:	e1a01003 	mov	r1, r3
   12248:	e1a00002 	mov	r0, r2
   1224c:	ebfffae5 	bl	10de8 <vListInsertEnd>
		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

   12250:	e51b3008 	ldr	r3, [fp, #-8]
   12254:	e3530001 	cmp	r3, #1
   12258:	1a000000 	bne	12260 <vTaskPrioritySet+0x18c>
		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
   1225c:	ef000000 	svc	0x00000000
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
		}
   12260:	ebfff8c7 	bl	10584 <vPortExitCritical>
		#endif /* configRECORD_STACK_HIGH_ADDRESS */
   12264:	e320f000 	nop	{0}
   12268:	e24bd004 	sub	sp, fp, #4
   1226c:	e8bd8800 	pop	{fp, pc}
   12270:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12274:	000147d8 	ldrdeq	r4, [r1], -r8
   12278:	000148b8 			; <UNDEFINED> instruction: 0x000148b8

0001227c <vTaskSuspend>:
	{
		pxTopOfStack = pxNewTCB->pxStack;

		/* Check the alignment of the stack buffer is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

   1227c:	e92d4800 	push	{fp, lr}
   12280:	e28db004 	add	fp, sp, #4
   12284:	e24dd010 	sub	sp, sp, #16
   12288:	e50b0010 	str	r0, [fp, #-16]
		/* The other extreme of the stack space is required if stack checking is
		performed. */
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1228c:	ebfff8ab 	bl	10540 <vPortEnterCritical>
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
   12290:	e59f30d8 	ldr	r3, [pc, #216]	; 12370 <vTaskSuspend+0xf4>
   12294:	e5933000 	ldr	r3, [r3]
   12298:	e51b2010 	ldr	r2, [fp, #-16]
   1229c:	e1520003 	cmp	r2, r3
   122a0:	1a000001 	bne	122ac <vTaskSuspend+0x30>
	if( pcName != NULL )
	{
   122a4:	e3a03000 	mov	r3, #0
   122a8:	e50b3010 	str	r3, [fp, #-16]
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];

   122ac:	e51b3010 	ldr	r3, [fp, #-16]
   122b0:	e3530000 	cmp	r3, #0
   122b4:	1a000002 	bne	122c4 <vTaskSuspend+0x48>
   122b8:	e59f30b0 	ldr	r3, [pc, #176]	; 12370 <vTaskSuspend+0xf4>
   122bc:	e5933000 	ldr	r3, [r3]
   122c0:	ea000000 	b	122c8 <vTaskSuspend+0x4c>
   122c4:	e51b3010 	ldr	r3, [fp, #-16]
   122c8:	e50b3008 	str	r3, [fp, #-8]
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
   122cc:	e51b3008 	ldr	r3, [fp, #-8]
   122d0:	e2833004 	add	r3, r3, #4
   122d4:	e1a00003 	mov	r0, r3
   122d8:	ebfffb1e 	bl	10f58 <vListRemove>
				break;
			}
			else
   122dc:	e51b3008 	ldr	r3, [fp, #-8]
   122e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   122e4:	e3530000 	cmp	r3, #0
   122e8:	0a000003 	beq	122fc <vTaskSuspend+0x80>
			{
				mtCOVERAGE_TEST_MARKER();
   122ec:	e51b3008 	ldr	r3, [fp, #-8]
   122f0:	e2833018 	add	r3, r3, #24
   122f4:	e1a00003 	mov	r0, r3
   122f8:	ebfffb16 	bl	10f58 <vListRemove>
			}
		}

   122fc:	e51b3008 	ldr	r3, [fp, #-8]
   12300:	e2833004 	add	r3, r3, #4
   12304:	e1a01003 	mov	r1, r3
   12308:	e59f0064 	ldr	r0, [pc, #100]	; 12374 <vTaskSuspend+0xf8>
   1230c:	ebfffab5 	bl	10de8 <vListInsertEnd>
		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
   12310:	ebfff89b 	bl	10584 <vPortExitCritical>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
	}
   12314:	e51b3010 	ldr	r3, [fp, #-16]
   12318:	e3530000 	cmp	r3, #0
   1231c:	1a000010 	bne	12364 <vTaskSuspend+0xe8>
	else
	{
   12320:	e59f3050 	ldr	r3, [pc, #80]	; 12378 <vTaskSuspend+0xfc>
   12324:	e5933000 	ldr	r3, [r3]
   12328:	e3530000 	cmp	r3, #0
   1232c:	0a000001 	beq	12338 <vTaskSuspend+0xbc>
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
   12330:	ef000000 	svc	0x00000000
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

   12334:	ea00000a 	b	12364 <vTaskSuspend+0xe8>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   12338:	e59f3034 	ldr	r3, [pc, #52]	; 12374 <vTaskSuspend+0xf8>
   1233c:	e5932000 	ldr	r2, [r3]
   12340:	e59f3034 	ldr	r3, [pc, #52]	; 1237c <vTaskSuspend+0x100>
   12344:	e5933000 	ldr	r3, [r3]
   12348:	e1520003 	cmp	r2, r3
   1234c:	1a000003 	bne	12360 <vTaskSuspend+0xe4>

   12350:	e59f3018 	ldr	r3, [pc, #24]	; 12370 <vTaskSuspend+0xf4>
   12354:	e3a02000 	mov	r2, #0
   12358:	e5832000 	str	r2, [r3]

   1235c:	ea000000 	b	12364 <vTaskSuspend+0xe8>
		pxNewTCB->uxBasePriority = uxPriority;
   12360:	eb00024c 	bl	12c98 <vTaskSwitchContext>

   12364:	e320f000 	nop	{0}
   12368:	e24bd004 	sub	sp, fp, #4
   1236c:	e8bd8800 	pop	{fp, pc}
   12370:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12374:	00014898 	muleq	r1, r8, r8
   12378:	000148bc 			; <UNDEFINED> instruction: 0x000148bc
   1237c:	000148ac 	andeq	r4, r1, ip, lsr #17

00012380 <xTaskIsTaskSuspended>:

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
   12380:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12384:	e28db000 	add	fp, sp, #0
   12388:	e24dd014 	sub	sp, sp, #20
   1238c:	e50b0010 	str	r0, [fp, #-16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   12390:	e3a03000 	mov	r3, #0
   12394:	e50b3008 	str	r3, [fp, #-8]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   12398:	e51b3010 	ldr	r3, [fp, #-16]
   1239c:	e50b300c 	str	r3, [fp, #-12]
	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

   123a0:	e51b300c 	ldr	r3, [fp, #-12]
   123a4:	e5933014 	ldr	r3, [r3, #20]
   123a8:	e59f2044 	ldr	r2, [pc, #68]	; 123f4 <xTaskIsTaskSuspended+0x74>
   123ac:	e1530002 	cmp	r3, r2
   123b0:	1a00000a 	bne	123e0 <xTaskIsTaskSuspended+0x60>
	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
   123b4:	e51b300c 	ldr	r3, [fp, #-12]
   123b8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123bc:	e59f2034 	ldr	r2, [pc, #52]	; 123f8 <xTaskIsTaskSuspended+0x78>
   123c0:	e1530002 	cmp	r3, r2
   123c4:	0a000005 	beq	123e0 <xTaskIsTaskSuspended+0x60>
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
   123c8:	e51b300c 	ldr	r3, [fp, #-12]
   123cc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123d0:	e3530000 	cmp	r3, #0
   123d4:	1a000001 	bne	123e0 <xTaskIsTaskSuspended+0x60>
	}
	#endif /* configGENERATE_RUN_TIME_STATS */
   123d8:	e3a03001 	mov	r3, #1
   123dc:	e50b3008 	str	r3, [fp, #-8]

	#if ( portUSING_MPU_WRAPPERS == 1 )
	{
		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
	}
   123e0:	e51b3008 	ldr	r3, [fp, #-8]
	#else
   123e4:	e1a00003 	mov	r0, r3
   123e8:	e28bd000 	add	sp, fp, #0
   123ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   123f0:	e12fff1e 	bx	lr
   123f4:	00014898 	muleq	r1, r8, r8
   123f8:	0001486c 	andeq	r4, r1, ip, ror #16

000123fc <vTaskResume>:
		( void ) xRegions;
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
   123fc:	e92d4800 	push	{fp, lr}
   12400:	e28db004 	add	fp, sp, #4
   12404:	e24dd010 	sub	sp, sp, #16
   12408:	e50b0010 	str	r0, [fp, #-16]
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
		}
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
   1240c:	e51b3010 	ldr	r3, [fp, #-16]
   12410:	e50b3008 	str	r3, [fp, #-8]
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
	}
   12414:	e51b3008 	ldr	r3, [fp, #-8]
   12418:	e3530000 	cmp	r3, #0
   1241c:	0a00002e 	beq	124dc <vTaskResume+0xe0>
   12420:	e59f30c0 	ldr	r3, [pc, #192]	; 124e8 <vTaskResume+0xec>
   12424:	e5933000 	ldr	r3, [r3]
   12428:	e51b2008 	ldr	r2, [fp, #-8]
   1242c:	e1520003 	cmp	r2, r3
   12430:	0a000029 	beq	124dc <vTaskResume+0xe0>
	#endif

   12434:	ebfff841 	bl	10540 <vPortEnterCritical>
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
   12438:	e51b0008 	ldr	r0, [fp, #-8]
   1243c:	ebffffcf 	bl	12380 <xTaskIsTaskSuspended>
   12440:	e1a03000 	mov	r3, r0
   12444:	e3530001 	cmp	r3, #1
   12448:	1a000022 	bne	124d8 <vTaskResume+0xdc>
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
	}
	#endif
   1244c:	e51b3008 	ldr	r3, [fp, #-8]
   12450:	e2833004 	add	r3, r3, #4
   12454:	e1a00003 	mov	r0, r3
   12458:	ebfffabe 	bl	10f58 <vListRemove>

   1245c:	e51b3008 	ldr	r3, [fp, #-8]
   12460:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12464:	e59f3080 	ldr	r3, [pc, #128]	; 124ec <vTaskResume+0xf0>
   12468:	e5933000 	ldr	r3, [r3]
   1246c:	e1520003 	cmp	r2, r3
   12470:	9a000003 	bls	12484 <vTaskResume+0x88>
   12474:	e51b3008 	ldr	r3, [fp, #-8]
   12478:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1247c:	e59f2068 	ldr	r2, [pc, #104]	; 124ec <vTaskResume+0xf0>
   12480:	e5823000 	str	r3, [r2]
   12484:	e51b3008 	ldr	r3, [fp, #-8]
   12488:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1248c:	e1a03002 	mov	r3, r2
   12490:	e1a03103 	lsl	r3, r3, #2
   12494:	e0833002 	add	r3, r3, r2
   12498:	e1a03103 	lsl	r3, r3, #2
   1249c:	e59f204c 	ldr	r2, [pc, #76]	; 124f0 <vTaskResume+0xf4>
   124a0:	e0832002 	add	r2, r3, r2
   124a4:	e51b3008 	ldr	r3, [fp, #-8]
   124a8:	e2833004 	add	r3, r3, #4
   124ac:	e1a01003 	mov	r1, r3
   124b0:	e1a00002 	mov	r0, r2
   124b4:	ebfffa4b 	bl	10de8 <vListInsertEnd>
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
   124b8:	e51b3008 	ldr	r3, [fp, #-8]
   124bc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   124c0:	e59f3020 	ldr	r3, [pc, #32]	; 124e8 <vTaskResume+0xec>
   124c4:	e5933000 	ldr	r3, [r3]
   124c8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   124cc:	e1520003 	cmp	r2, r3
   124d0:	3a000000 	bcc	124d8 <vTaskResume+0xdc>
	}
	#endif

	/* Initialize the TCB stack to look as if the task was already running,
   124d4:	ef000000 	svc	0x00000000
	but had been interrupted by the scheduler.  The return address is set
	to the start of the task function. Once the stack has been initialised
	the top of stack variable is updated. */
	#if( portUSING_MPU_WRAPPERS == 1 )
   124d8:	ebfff829 	bl	10584 <vPortExitCritical>
	{
		/* If the port has capability to detect stack overflow,
   124dc:	e320f000 	nop	{0}
   124e0:	e24bd004 	sub	sp, fp, #4
   124e4:	e8bd8800 	pop	{fp, pc}
   124e8:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   124ec:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   124f0:	000147d8 	ldrdeq	r4, [r1], -r8

000124f4 <xTaskResumeFromISR>:
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters, xRunPrivileged );
			}
			#else /* portSTACK_GROWTH */
   124f4:	e92d4800 	push	{fp, lr}
   124f8:	e28db004 	add	fp, sp, #4
   124fc:	e24dd018 	sub	sp, sp, #24
   12500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
			{
   12504:	e3a03000 	mov	r3, #0
   12508:	e50b3008 	str	r3, [fp, #-8]
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCode, pvParameters, xRunPrivileged );
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
   1250c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12510:	e50b300c 	str	r3, [fp, #-12]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
   12514:	e3a03000 	mov	r3, #0
   12518:	e50b3010 	str	r3, [fp, #-16]
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
   1251c:	e51b000c 	ldr	r0, [fp, #-12]
   12520:	ebffff96 	bl	12380 <xTaskIsTaskSuspended>
   12524:	e1a03000 	mov	r3, r0
   12528:	e3530001 	cmp	r3, #1
   1252c:	1a00002e 	bne	125ec <xTaskResumeFromISR+0xf8>
	#else /* portUSING_MPU_WRAPPERS */
	{
		/* If the port has capability to detect stack overflow,
		pass the stack end address to the stack initialization
   12530:	e59f30c4 	ldr	r3, [pc, #196]	; 125fc <xTaskResumeFromISR+0x108>
   12534:	e5933000 	ldr	r3, [r3]
   12538:	e3530000 	cmp	r3, #0
   1253c:	1a000025 	bne	125d8 <xTaskResumeFromISR+0xe4>
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
   12540:	e51b300c 	ldr	r3, [fp, #-12]
   12544:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12548:	e59f30b0 	ldr	r3, [pc, #176]	; 12600 <xTaskResumeFromISR+0x10c>
   1254c:	e5933000 	ldr	r3, [r3]
   12550:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12554:	e1520003 	cmp	r2, r3
   12558:	23a03001 	movcs	r3, #1
   1255c:	33a03000 	movcc	r3, #0
   12560:	e6ef3073 	uxtb	r3, r3
   12564:	e50b3008 	str	r3, [fp, #-8]
		{
   12568:	e51b300c 	ldr	r3, [fp, #-12]
   1256c:	e2833004 	add	r3, r3, #4
   12570:	e1a00003 	mov	r0, r3
   12574:	ebfffa77 	bl	10f58 <vListRemove>
			#if( portSTACK_GROWTH < 0 )
   12578:	e51b300c 	ldr	r3, [fp, #-12]
   1257c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12580:	e59f307c 	ldr	r3, [pc, #124]	; 12604 <xTaskResumeFromISR+0x110>
   12584:	e5933000 	ldr	r3, [r3]
   12588:	e1520003 	cmp	r2, r3
   1258c:	9a000003 	bls	125a0 <xTaskResumeFromISR+0xac>
   12590:	e51b300c 	ldr	r3, [fp, #-12]
   12594:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12598:	e59f2064 	ldr	r2, [pc, #100]	; 12604 <xTaskResumeFromISR+0x110>
   1259c:	e5823000 	str	r3, [r2]
   125a0:	e51b300c 	ldr	r3, [fp, #-12]
   125a4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   125a8:	e1a03002 	mov	r3, r2
   125ac:	e1a03103 	lsl	r3, r3, #2
   125b0:	e0833002 	add	r3, r3, r2
   125b4:	e1a03103 	lsl	r3, r3, #2
   125b8:	e59f2048 	ldr	r2, [pc, #72]	; 12608 <xTaskResumeFromISR+0x114>
   125bc:	e0832002 	add	r2, r3, r2
   125c0:	e51b300c 	ldr	r3, [fp, #-12]
   125c4:	e2833004 	add	r3, r3, #4
   125c8:	e1a01003 	mov	r1, r3
   125cc:	e1a00002 	mov	r0, r2
   125d0:	ebfffa04 	bl	10de8 <vListInsertEnd>
   125d4:	ea000004 	b	125ec <xTaskResumeFromISR+0xf8>
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
			}
			#else /* portSTACK_GROWTH */
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCode, pvParameters );
			}
   125d8:	e51b300c 	ldr	r3, [fp, #-12]
   125dc:	e2833018 	add	r3, r3, #24
   125e0:	e1a01003 	mov	r1, r3
   125e4:	e59f0020 	ldr	r0, [pc, #32]	; 1260c <xTaskResumeFromISR+0x118>
   125e8:	ebfff9fe 	bl	10de8 <vListInsertEnd>
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
		}
   125ec:	e51b3008 	ldr	r3, [fp, #-8]
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
   125f0:	e1a00003 	mov	r0, r3
   125f4:	e24bd004 	sub	sp, fp, #4
   125f8:	e8bd8800 	pop	{fp, pc}
   125fc:	000148c0 	andeq	r4, r1, r0, asr #17
   12600:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12604:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   12608:	000147d8 	ldrdeq	r4, [r1], -r8
   1260c:	0001486c 	andeq	r4, r1, ip, ror #16

00012610 <vTaskStartScheduler>:
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
   12610:	e92d4800 	push	{fp, lr}
   12614:	e28db004 	add	fp, sp, #4
   12618:	e24dd018 	sub	sp, sp, #24
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
		if( pxCurrentTCB == NULL )
		{
			/* There are no other tasks, or all the other tasks are in
   1261c:	e3a03000 	mov	r3, #0
   12620:	e58d300c 	str	r3, [sp, #12]
   12624:	e3a03000 	mov	r3, #0
   12628:	e58d3008 	str	r3, [sp, #8]
   1262c:	e3a03000 	mov	r3, #0
   12630:	e58d3004 	str	r3, [sp, #4]
   12634:	e3a03000 	mov	r3, #0
   12638:	e58d3000 	str	r3, [sp]
   1263c:	e3a03000 	mov	r3, #0
   12640:	e3a02080 	mov	r2, #128	; 0x80
   12644:	e59f1050 	ldr	r1, [pc, #80]	; 1269c <vTaskStartScheduler+0x8c>
   12648:	e59f0050 	ldr	r0, [pc, #80]	; 126a0 <vTaskStartScheduler+0x90>
   1264c:	ebfffd53 	bl	11ba0 <xTaskGenericCreate>
   12650:	e50b0008 	str	r0, [fp, #-8]
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
   12654:	e51b3008 	ldr	r3, [fp, #-8]
   12658:	e3530001 	cmp	r3, #1
   1265c:	1a00000b 	bne	12690 <vTaskStartScheduler+0x80>
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   12660:	e92d0001 	stmfd	sp!, {r0}
   12664:	e10f0000 	mrs	r0, CPSR
   12668:	e38000c0 	orr	r0, r0, #192	; 0xc0
   1266c:	e129f000 	msr	CPSR_fc, r0
   12670:	e8bd0001 	ldmfd	sp!, {r0}
				{
					pxCurrentTCB = pxNewTCB;
   12674:	e59f3028 	ldr	r3, [pc, #40]	; 126a4 <vTaskStartScheduler+0x94>
   12678:	e3a02001 	mov	r2, #1
   1267c:	e5832000 	str	r2, [r3]
				}
   12680:	e59f3020 	ldr	r3, [pc, #32]	; 126a8 <vTaskStartScheduler+0x98>
   12684:	e3a02000 	mov	r2, #0
   12688:	e5832000 	str	r2, [r3]
				}
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
   1268c:	ebfff6eb 	bl	10240 <xPortStartScheduler>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   12690:	e320f000 	nop	{0}
   12694:	e24bd004 	sub	sp, fp, #4
   12698:	e8bd8800 	pop	{fp, pc}
   1269c:	0001471c 	andeq	r4, r1, ip, lsl r7
   126a0:	000130b8 	strheq	r3, [r1], -r8
   126a4:	000148bc 			; <UNDEFINED> instruction: 0x000148bc
   126a8:	000148b0 			; <UNDEFINED> instruction: 0x000148b0

000126ac <vTaskEndScheduler>:

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   126ac:	e92d4800 	push	{fp, lr}
   126b0:	e28db004 	add	fp, sp, #4

	if( xSchedulerRunning != pdFALSE )
	{
		/* If the created task is of a higher priority than the current task
   126b4:	e92d0001 	stmfd	sp!, {r0}
   126b8:	e10f0000 	mrs	r0, CPSR
   126bc:	e38000c0 	orr	r0, r0, #192	; 0xc0
   126c0:	e129f000 	msr	CPSR_fc, r0
   126c4:	e8bd0001 	ldmfd	sp!, {r0}
		then it should run now. */
   126c8:	e59f3010 	ldr	r3, [pc, #16]	; 126e0 <vTaskEndScheduler+0x34>
   126cc:	e3a02000 	mov	r2, #0
   126d0:	e5832000 	str	r2, [r3]
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   126d4:	ebfff6e0 	bl	1025c <vPortEndScheduler>
		{
   126d8:	e320f000 	nop	{0}
   126dc:	e8bd8800 	pop	{fp, pc}
   126e0:	000148bc 			; <UNDEFINED> instruction: 0x000148bc

000126e4 <vTaskSuspendAll>:
			taskYIELD_IF_USING_PREEMPTION();
		}
		else
		{
   126e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   126e8:	e28db000 	add	fp, sp, #0
			mtCOVERAGE_TEST_MARKER();
		}
	}
   126ec:	e59f301c 	ldr	r3, [pc, #28]	; 12710 <vTaskSuspendAll+0x2c>
   126f0:	e5933000 	ldr	r3, [r3]
   126f4:	e2833001 	add	r3, r3, #1
   126f8:	e59f2010 	ldr	r2, [pc, #16]	; 12710 <vTaskSuspendAll+0x2c>
   126fc:	e5823000 	str	r3, [r2]
	else
   12700:	e320f000 	nop	{0}
   12704:	e28bd000 	add	sp, fp, #0
   12708:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1270c:	e12fff1e 	bx	lr
   12710:	000148c0 	andeq	r4, r1, r0, asr #17

00012714 <xTaskResumeAll>:
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   12714:	e92d4810 	push	{r4, fp, lr}
   12718:	e28db008 	add	fp, sp, #8
   1271c:	e24dd00c 	sub	sp, sp, #12
/*-----------------------------------------------------------*/

   12720:	e3a03000 	mov	r3, #0
   12724:	e50b3010 	str	r3, [fp, #-16]

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
   12728:	ebfff784 	bl	10540 <vPortEnterCritical>

			/* Remove task from the ready/delayed list. */
   1272c:	e59f3164 	ldr	r3, [pc, #356]	; 12898 <xTaskResumeAll+0x184>
   12730:	e5933000 	ldr	r3, [r3]
   12734:	e2433001 	sub	r3, r3, #1
   12738:	e59f2158 	ldr	r2, [pc, #344]	; 12898 <xTaskResumeAll+0x184>
   1273c:	e5823000 	str	r3, [r2]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
			{
   12740:	e59f3150 	ldr	r3, [pc, #336]	; 12898 <xTaskResumeAll+0x184>
   12744:	e5933000 	ldr	r3, [r3]
   12748:	e3530000 	cmp	r3, #0
   1274c:	1a00004c 	bne	12884 <xTaskResumeAll+0x170>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}
   12750:	e59f3144 	ldr	r3, [pc, #324]	; 1289c <xTaskResumeAll+0x188>
   12754:	e5933000 	ldr	r3, [r3]
   12758:	e3530000 	cmp	r3, #0
   1275c:	0a000048 	beq	12884 <xTaskResumeAll+0x170>
			else
			{
   12760:	e3a03000 	mov	r3, #0
   12764:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
   12768:	ea000023 	b	127fc <xTaskResumeAll+0xe8>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
			{
   1276c:	e59f312c 	ldr	r3, [pc, #300]	; 128a0 <xTaskResumeAll+0x18c>
   12770:	e593300c 	ldr	r3, [r3, #12]
   12774:	e593400c 	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   12778:	e2843018 	add	r3, r4, #24
   1277c:	e1a00003 	mov	r0, r3
   12780:	ebfff9f4 	bl	10f58 <vListRemove>
			}
   12784:	e2843004 	add	r3, r4, #4
   12788:	e1a00003 	mov	r0, r3
   1278c:	ebfff9f1 	bl	10f58 <vListRemove>
			else
   12790:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12794:	e59f3108 	ldr	r3, [pc, #264]	; 128a4 <xTaskResumeAll+0x190>
   12798:	e5933000 	ldr	r3, [r3]
   1279c:	e1520003 	cmp	r2, r3
   127a0:	9a000002 	bls	127b0 <xTaskResumeAll+0x9c>
   127a4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   127a8:	e59f20f4 	ldr	r2, [pc, #244]	; 128a4 <xTaskResumeAll+0x190>
   127ac:	e5823000 	str	r3, [r2]
   127b0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127b4:	e1a03002 	mov	r3, r2
   127b8:	e1a03103 	lsl	r3, r3, #2
   127bc:	e0833002 	add	r3, r3, r2
   127c0:	e1a03103 	lsl	r3, r3, #2
   127c4:	e59f20dc 	ldr	r2, [pc, #220]	; 128a8 <xTaskResumeAll+0x194>
   127c8:	e0833002 	add	r3, r3, r2
   127cc:	e2842004 	add	r2, r4, #4
   127d0:	e1a01002 	mov	r1, r2
   127d4:	e1a00003 	mov	r0, r3
   127d8:	ebfff982 	bl	10de8 <vListInsertEnd>
			{
				mtCOVERAGE_TEST_MARKER();
			}

   127dc:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127e0:	e59f30c4 	ldr	r3, [pc, #196]	; 128ac <xTaskResumeAll+0x198>
   127e4:	e5933000 	ldr	r3, [r3]
   127e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   127ec:	e1520003 	cmp	r2, r3
   127f0:	3a000001 	bcc	127fc <xTaskResumeAll+0xe8>
			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
   127f4:	e3a03001 	mov	r3, #1
   127f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			/* Is the task waiting on an event also? */
   127fc:	e59f309c 	ldr	r3, [pc, #156]	; 128a0 <xTaskResumeAll+0x18c>
   12800:	e5933000 	ldr	r3, [r3]
   12804:	e3530000 	cmp	r3, #0
   12808:	1affffd7 	bne	1276c <xTaskResumeAll+0x58>
			not return. */
			uxTaskNumber++;

			if( pxTCB == pxCurrentTCB )
			{
				/* A task is deleting itself.  This cannot complete within the
   1280c:	e59f309c 	ldr	r3, [pc, #156]	; 128b0 <xTaskResumeAll+0x19c>
   12810:	e5933000 	ldr	r3, [r3]
   12814:	e3530000 	cmp	r3, #0
   12818:	0a00000c 	beq	12850 <xTaskResumeAll+0x13c>
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
   1281c:	ea000005 	b	12838 <xTaskResumeAll+0x124>
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
   12820:	eb000048 	bl	12948 <vTaskIncrementTick>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
   12824:	e59f3084 	ldr	r3, [pc, #132]	; 128b0 <xTaskResumeAll+0x19c>
   12828:	e5933000 	ldr	r3, [r3]
   1282c:	e2433001 	sub	r3, r3, #1
   12830:	e59f2078 	ldr	r2, [pc, #120]	; 128b0 <xTaskResumeAll+0x19c>
   12834:	e5823000 	str	r3, [r2]
				Place the task in the termination list.  The idle task will
   12838:	e59f3070 	ldr	r3, [pc, #112]	; 128b0 <xTaskResumeAll+0x19c>
   1283c:	e5933000 	ldr	r3, [r3]
   12840:	e3530000 	cmp	r3, #0
   12844:	1afffff5 	bne	12820 <xTaskResumeAll+0x10c>
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
   12848:	e3a03001 	mov	r3, #1
   1284c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				traceTASK_DELETE( pxTCB );

				/* The pre-delete hook is primarily for the Windows simulator,
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
   12850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12854:	e3530001 	cmp	r3, #1
   12858:	0a000003 	beq	1286c <xTaskResumeAll+0x158>
   1285c:	e59f3050 	ldr	r3, [pc, #80]	; 128b4 <xTaskResumeAll+0x1a0>
   12860:	e5933000 	ldr	r3, [r3]
   12864:	e3530001 	cmp	r3, #1
   12868:	1a000005 	bne	12884 <xTaskResumeAll+0x170>
				hence xYieldPending is used to latch that a context switch is
				required. */
   1286c:	e3a03001 	mov	r3, #1
   12870:	e50b3010 	str	r3, [fp, #-16]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
   12874:	e59f3038 	ldr	r3, [pc, #56]	; 128b4 <xTaskResumeAll+0x1a0>
   12878:	e3a02000 	mov	r2, #0
   1287c:	e5832000 	str	r2, [r3]
			}
   12880:	ef000000 	svc	0x00000000
			else
			{
				--uxCurrentNumberOfTasks;
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
   12884:	ebfff73e 	bl	10584 <vPortExitCritical>

				/* Reset the next expected unblock time in case it referred to
   12888:	e51b3010 	ldr	r3, [fp, #-16]
				the task that has just been deleted. */
   1288c:	e1a00003 	mov	r0, r3
   12890:	e24bd008 	sub	sp, fp, #8
   12894:	e8bd8810 	pop	{r4, fp, pc}
   12898:	000148c0 	andeq	r4, r1, r0, asr #17
   1289c:	000148ac 	andeq	r4, r1, ip, lsr #17
   128a0:	0001486c 	andeq	r4, r1, ip, ror #16
   128a4:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   128a8:	000147d8 	ldrdeq	r4, [r1], -r8
   128ac:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   128b0:	000148c4 	andeq	r4, r1, r4, asr #17
   128b4:	000148c8 	andeq	r4, r1, r8, asr #17

000128b8 <xTaskGetTickCount>:
		{
			if( pxTCB == pxCurrentTCB )
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
			}
   128b8:	e92d4800 	push	{fp, lr}
   128bc:	e28db004 	add	fp, sp, #4
   128c0:	e24dd008 	sub	sp, sp, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
   128c4:	ebfff71d 	bl	10540 <vPortEnterCritical>
		}
	}
   128c8:	e59f3018 	ldr	r3, [pc, #24]	; 128e8 <xTaskGetTickCount+0x30>
   128cc:	e5933000 	ldr	r3, [r3]
   128d0:	e50b3008 	str	r3, [fp, #-8]

#endif /* INCLUDE_vTaskDelete */
   128d4:	ebfff72a 	bl	10584 <vPortExitCritical>
/*-----------------------------------------------------------*/

   128d8:	e51b3008 	ldr	r3, [fp, #-8]
#if ( INCLUDE_vTaskDelayUntil == 1 )
   128dc:	e1a00003 	mov	r0, r3
   128e0:	e24bd004 	sub	sp, fp, #4
   128e4:	e8bd8800 	pop	{fp, pc}
   128e8:	000148b0 			; <UNDEFINED> instruction: 0x000148b0

000128ec <xTaskGetTickCountFromISR>:

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
   128ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   128f0:	e28db000 	add	fp, sp, #0
   128f4:	e24dd00c 	sub	sp, sp, #12
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
   128f8:	e3a03000 	mov	r3, #0
   128fc:	e50b3008 	str	r3, [fp, #-8]
		configASSERT( uxSchedulerSuspended == 0 );
   12900:	e59f3018 	ldr	r3, [pc, #24]	; 12920 <xTaskGetTickCountFromISR+0x34>
   12904:	e5933000 	ldr	r3, [r3]
   12908:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
		{
   1290c:	e51b300c 	ldr	r3, [fp, #-12]
			/* Minor optimisation.  The tick count cannot change in this
   12910:	e1a00003 	mov	r0, r3
   12914:	e28bd000 	add	sp, fp, #0
   12918:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1291c:	e12fff1e 	bx	lr
   12920:	000148b0 			; <UNDEFINED> instruction: 0x000148b0

00012924 <uxTaskGetNumberOfTasks>:
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
   12924:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12928:	e28db000 	add	fp, sp, #0
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xConstTickCount < *pxPreviousWakeTime )
   1292c:	e59f3010 	ldr	r3, [pc, #16]	; 12944 <uxTaskGetNumberOfTasks+0x20>
   12930:	e5933000 	ldr	r3, [r3]
			{
   12934:	e1a00003 	mov	r0, r3
   12938:	e28bd000 	add	sp, fp, #0
   1293c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12940:	e12fff1e 	bx	lr
   12944:	000148ac 	andeq	r4, r1, ip, lsr #17

00012948 <vTaskIncrementTick>:
					else
					{
						eReturn = eBlocked;
					}
				}
			#endif
   12948:	e92d4800 	push	{fp, lr}
   1294c:	e28db004 	add	fp, sp, #4
   12950:	e24dd010 	sub	sp, sp, #16

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
   12954:	e59f31e4 	ldr	r3, [pc, #484]	; 12b40 <vTaskIncrementTick+0x1f8>
   12958:	e5933000 	ldr	r3, [r3]
   1295c:	e3530000 	cmp	r3, #0
   12960:	1a00006d 	bne	12b1c <vTaskIncrementTick+0x1d4>
					all. */
					eReturn = eDeleted;
   12964:	e59f31d8 	ldr	r3, [pc, #472]	; 12b44 <vTaskIncrementTick+0x1fc>
   12968:	e5933000 	ldr	r3, [r3]
   1296c:	e2833001 	add	r3, r3, #1
   12970:	e59f21cc 	ldr	r2, [pc, #460]	; 12b44 <vTaskIncrementTick+0x1fc>
   12974:	e5823000 	str	r3, [r2]
				}
   12978:	e59f31c4 	ldr	r3, [pc, #452]	; 12b44 <vTaskIncrementTick+0x1fc>
   1297c:	e5933000 	ldr	r3, [r3]
   12980:	e3530000 	cmp	r3, #0
   12984:	1a000020 	bne	12a0c <vTaskIncrementTick+0xc4>
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
			}
		}
   12988:	e59f31b8 	ldr	r3, [pc, #440]	; 12b48 <vTaskIncrementTick+0x200>
   1298c:	e5933000 	ldr	r3, [r3]
   12990:	e50b3008 	str	r3, [fp, #-8]

   12994:	e59f31b0 	ldr	r3, [pc, #432]	; 12b4c <vTaskIncrementTick+0x204>
   12998:	e5933000 	ldr	r3, [r3]
   1299c:	e59f21a4 	ldr	r2, [pc, #420]	; 12b48 <vTaskIncrementTick+0x200>
   129a0:	e5823000 	str	r3, [r2]
		return eReturn;
   129a4:	e59f21a0 	ldr	r2, [pc, #416]	; 12b4c <vTaskIncrementTick+0x204>
   129a8:	e51b3008 	ldr	r3, [fp, #-8]
   129ac:	e5823000 	str	r3, [r2]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
   129b0:	e59f3198 	ldr	r3, [pc, #408]	; 12b50 <vTaskIncrementTick+0x208>
   129b4:	e5933000 	ldr	r3, [r3]
   129b8:	e2833001 	add	r3, r3, #1
   129bc:	e59f218c 	ldr	r2, [pc, #396]	; 12b50 <vTaskIncrementTick+0x208>
   129c0:	e5823000 	str	r3, [r2]

#endif /* INCLUDE_eTaskGetState */
   129c4:	e59f317c 	ldr	r3, [pc, #380]	; 12b48 <vTaskIncrementTick+0x200>
   129c8:	e5933000 	ldr	r3, [r3]
   129cc:	e5933000 	ldr	r3, [r3]
   129d0:	e3530000 	cmp	r3, #0
   129d4:	1a000003 	bne	129e8 <vTaskIncrementTick+0xa0>

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
	TCB_t const *pxTCB;
   129d8:	e59f3174 	ldr	r3, [pc, #372]	; 12b54 <vTaskIncrementTick+0x20c>
   129dc:	e3e02000 	mvn	r2, #0
   129e0:	e5832000 	str	r2, [r3]
   129e4:	ea000008 	b	12a0c <vTaskIncrementTick+0xc4>
		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
			uxReturn = pxTCB->uxPriority;
   129e8:	e59f3158 	ldr	r3, [pc, #344]	; 12b48 <vTaskIncrementTick+0x200>
   129ec:	e5933000 	ldr	r3, [r3]
   129f0:	e593300c 	ldr	r3, [r3, #12]
   129f4:	e593300c 	ldr	r3, [r3, #12]
   129f8:	e50b300c 	str	r3, [fp, #-12]
		}
   129fc:	e51b300c 	ldr	r3, [fp, #-12]
   12a00:	e5933004 	ldr	r3, [r3, #4]
   12a04:	e59f2148 	ldr	r2, [pc, #328]	; 12b54 <vTaskIncrementTick+0x20c>
   12a08:	e5823000 	str	r3, [r2]
		taskEXIT_CRITICAL();

		return uxReturn;
	}

   12a0c:	e59f3130 	ldr	r3, [pc, #304]	; 12b44 <vTaskIncrementTick+0x1fc>
   12a10:	e5932000 	ldr	r2, [r3]
   12a14:	e59f3138 	ldr	r3, [pc, #312]	; 12b54 <vTaskIncrementTick+0x20c>
   12a18:	e5933000 	ldr	r3, [r3]
   12a1c:	e1520003 	cmp	r2, r3
   12a20:	3a000043 	bcc	12b34 <vTaskIncrementTick+0x1ec>
   12a24:	e59f311c 	ldr	r3, [pc, #284]	; 12b48 <vTaskIncrementTick+0x200>
   12a28:	e5933000 	ldr	r3, [r3]
   12a2c:	e5933000 	ldr	r3, [r3]
   12a30:	e3530000 	cmp	r3, #0
   12a34:	1a000003 	bne	12a48 <vTaskIncrementTick+0x100>
   12a38:	e59f3114 	ldr	r3, [pc, #276]	; 12b54 <vTaskIncrementTick+0x20c>
   12a3c:	e3e02000 	mvn	r2, #0
   12a40:	e5832000 	str	r2, [r3]
   12a44:	ea00003a 	b	12b34 <vTaskIncrementTick+0x1ec>
   12a48:	e59f30f8 	ldr	r3, [pc, #248]	; 12b48 <vTaskIncrementTick+0x200>
   12a4c:	e5933000 	ldr	r3, [r3]
   12a50:	e593300c 	ldr	r3, [r3, #12]
   12a54:	e593300c 	ldr	r3, [r3, #12]
   12a58:	e50b300c 	str	r3, [fp, #-12]
   12a5c:	e51b300c 	ldr	r3, [fp, #-12]
   12a60:	e5933004 	ldr	r3, [r3, #4]
   12a64:	e50b3010 	str	r3, [fp, #-16]
   12a68:	e59f30d4 	ldr	r3, [pc, #212]	; 12b44 <vTaskIncrementTick+0x1fc>
   12a6c:	e5932000 	ldr	r2, [r3]
   12a70:	e51b3010 	ldr	r3, [fp, #-16]
   12a74:	e1520003 	cmp	r2, r3
   12a78:	2a000003 	bcs	12a8c <vTaskIncrementTick+0x144>
   12a7c:	e59f20d0 	ldr	r2, [pc, #208]	; 12b54 <vTaskIncrementTick+0x20c>
   12a80:	e51b3010 	ldr	r3, [fp, #-16]
   12a84:	e5823000 	str	r3, [r2]
   12a88:	ea000029 	b	12b34 <vTaskIncrementTick+0x1ec>
   12a8c:	e51b300c 	ldr	r3, [fp, #-12]
   12a90:	e2833004 	add	r3, r3, #4
   12a94:	e1a00003 	mov	r0, r3
   12a98:	ebfff92e 	bl	10f58 <vListRemove>
   12a9c:	e51b300c 	ldr	r3, [fp, #-12]
   12aa0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12aa4:	e3530000 	cmp	r3, #0
   12aa8:	0a000003 	beq	12abc <vTaskIncrementTick+0x174>
   12aac:	e51b300c 	ldr	r3, [fp, #-12]
   12ab0:	e2833018 	add	r3, r3, #24
   12ab4:	e1a00003 	mov	r0, r3
   12ab8:	ebfff926 	bl	10f58 <vListRemove>
   12abc:	e51b300c 	ldr	r3, [fp, #-12]
   12ac0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ac4:	e59f308c 	ldr	r3, [pc, #140]	; 12b58 <vTaskIncrementTick+0x210>
   12ac8:	e5933000 	ldr	r3, [r3]
   12acc:	e1520003 	cmp	r2, r3
   12ad0:	9a000003 	bls	12ae4 <vTaskIncrementTick+0x19c>
   12ad4:	e51b300c 	ldr	r3, [fp, #-12]
   12ad8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12adc:	e59f2074 	ldr	r2, [pc, #116]	; 12b58 <vTaskIncrementTick+0x210>
   12ae0:	e5823000 	str	r3, [r2]
   12ae4:	e51b300c 	ldr	r3, [fp, #-12]
   12ae8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12aec:	e1a03002 	mov	r3, r2
   12af0:	e1a03103 	lsl	r3, r3, #2
   12af4:	e0833002 	add	r3, r3, r2
   12af8:	e1a03103 	lsl	r3, r3, #2
   12afc:	e59f2058 	ldr	r2, [pc, #88]	; 12b5c <vTaskIncrementTick+0x214>
   12b00:	e0832002 	add	r2, r3, r2
   12b04:	e51b300c 	ldr	r3, [fp, #-12]
   12b08:	e2833004 	add	r3, r3, #4
   12b0c:	e1a01003 	mov	r1, r3
   12b10:	e1a00002 	mov	r0, r2
   12b14:	ebfff8b3 	bl	10de8 <vListInsertEnd>
   12b18:	eaffffc1 	b	12a24 <vTaskIncrementTick+0xdc>
#endif /* INCLUDE_uxTaskPriorityGet */
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )
   12b1c:	e59f303c 	ldr	r3, [pc, #60]	; 12b60 <vTaskIncrementTick+0x218>
   12b20:	e5933000 	ldr	r3, [r3]
   12b24:	e2833001 	add	r3, r3, #1
   12b28:	e59f2030 	ldr	r2, [pc, #48]	; 12b60 <vTaskIncrementTick+0x218>
   12b2c:	e5823000 	str	r3, [r2]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   12b30:	eaffffff 	b	12b34 <vTaskIncrementTick+0x1ec>
   12b34:	e320f000 	nop	{0}
   12b38:	e24bd004 	sub	sp, fp, #4
   12b3c:	e8bd8800 	pop	{fp, pc}
   12b40:	000148c0 	andeq	r4, r1, r0, asr #17
   12b44:	000148b0 			; <UNDEFINED> instruction: 0x000148b0
   12b48:	00014864 	andeq	r4, r1, r4, ror #16
   12b4c:	00014868 	andeq	r4, r1, r8, ror #16
   12b50:	000148cc 	andeq	r4, r1, ip, asr #17
   12b54:	00014748 	andeq	r4, r1, r8, asr #14
   12b58:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   12b5c:	000147d8 	ldrdeq	r4, [r1], -r8
   12b60:	000148c4 	andeq	r4, r1, r4, asr #17

00012b64 <vTaskSetApplicationTaskTag>:

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
   12b64:	e92d4800 	push	{fp, lr}
   12b68:	e28db004 	add	fp, sp, #4
   12b6c:	e24dd010 	sub	sp, sp, #16
   12b70:	e50b0010 	str	r0, [fp, #-16]
   12b74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
			uxReturn = pxTCB->uxPriority;
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

   12b78:	e51b3010 	ldr	r3, [fp, #-16]
   12b7c:	e3530000 	cmp	r3, #0
   12b80:	1a000003 	bne	12b94 <vTaskSetApplicationTaskTag+0x30>
		return uxReturn;
	}
   12b84:	e59f3030 	ldr	r3, [pc, #48]	; 12bbc <vTaskSetApplicationTaskTag+0x58>
   12b88:	e5933000 	ldr	r3, [r3]
   12b8c:	e50b3008 	str	r3, [fp, #-8]
   12b90:	ea000001 	b	12b9c <vTaskSetApplicationTaskTag+0x38>

#endif /* INCLUDE_uxTaskPriorityGet */
/*-----------------------------------------------------------*/

   12b94:	e51b3010 	ldr	r3, [fp, #-16]
   12b98:	e50b3008 	str	r3, [fp, #-8]
#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
   12b9c:	ebfff667 	bl	10540 <vPortEnterCritical>
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
   12ba0:	e51b3008 	ldr	r3, [fp, #-8]
   12ba4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12ba8:	e5832044 	str	r2, [r3, #68]	; 0x44
	BaseType_t xYieldRequired = pdFALSE;
   12bac:	ebfff674 	bl	10584 <vPortExitCritical>

   12bb0:	e320f000 	nop	{0}
   12bb4:	e24bd004 	sub	sp, fp, #4
   12bb8:	e8bd8800 	pop	{fp, pc}
   12bbc:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012bc0 <xTaskGetApplicationTaskTag>:
		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
		}
		else
   12bc0:	e92d4800 	push	{fp, lr}
   12bc4:	e28db004 	add	fp, sp, #4
   12bc8:	e24dd010 	sub	sp, sp, #16
   12bcc:	e50b0010 	str	r0, [fp, #-16]
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   12bd0:	e51b3010 	ldr	r3, [fp, #-16]
   12bd4:	e3530000 	cmp	r3, #0
   12bd8:	1a000003 	bne	12bec <xTaskGetApplicationTaskTag+0x2c>
		{
			/* If null is passed in here then it is the priority of the calling
   12bdc:	e59f3034 	ldr	r3, [pc, #52]	; 12c18 <xTaskGetApplicationTaskTag+0x58>
   12be0:	e5933000 	ldr	r3, [r3]
   12be4:	e50b3008 	str	r3, [fp, #-8]
   12be8:	ea000001 	b	12bf4 <xTaskGetApplicationTaskTag+0x34>
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
   12bec:	e51b3010 	ldr	r3, [fp, #-16]
   12bf0:	e50b3008 	str	r3, [fp, #-8]

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
			}
   12bf4:	ebfff651 	bl	10540 <vPortEnterCritical>
			#else
   12bf8:	e51b3008 	ldr	r3, [fp, #-8]
   12bfc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c00:	e50b300c 	str	r3, [fp, #-12]
			{
   12c04:	ebfff65e 	bl	10584 <vPortExitCritical>
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
   12c08:	e51b300c 	ldr	r3, [fp, #-12]
			#endif
   12c0c:	e1a00003 	mov	r0, r3
   12c10:	e24bd004 	sub	sp, fp, #4
   12c14:	e8bd8800 	pop	{fp, pc}
   12c18:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012c1c <xTaskCallApplicationTaskHook>:
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
				{
					if( pxTCB != pxCurrentTCB )
   12c1c:	e92d4800 	push	{fp, lr}
   12c20:	e28db004 	add	fp, sp, #4
   12c24:	e24dd010 	sub	sp, sp, #16
   12c28:	e50b0010 	str	r0, [fp, #-16]
   12c2c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   12c30:	e51b3010 	ldr	r3, [fp, #-16]
   12c34:	e3530000 	cmp	r3, #0
   12c38:	1a000003 	bne	12c4c <xTaskCallApplicationTaskHook+0x30>
						{
							xYieldRequired = pdTRUE;
   12c3c:	e59f3050 	ldr	r3, [pc, #80]	; 12c94 <xTaskCallApplicationTaskHook+0x78>
   12c40:	e5933000 	ldr	r3, [r3]
   12c44:	e50b3008 	str	r3, [fp, #-8]
   12c48:	ea000001 	b	12c54 <xTaskCallApplicationTaskHook+0x38>
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
   12c4c:	e51b3010 	ldr	r3, [fp, #-16]
   12c50:	e50b3008 	str	r3, [fp, #-8]
						}
					}
					else
   12c54:	e51b3008 	ldr	r3, [fp, #-8]
   12c58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c5c:	e3530000 	cmp	r3, #0
   12c60:	0a000005 	beq	12c7c <xTaskCallApplicationTaskHook+0x60>
					{
						/* The priority of the running task is being raised,
   12c64:	e51b3008 	ldr	r3, [fp, #-8]
   12c68:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c6c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   12c70:	e12fff33 	blx	r3
   12c74:	e50b000c 	str	r0, [fp, #-12]
   12c78:	ea000001 	b	12c84 <xTaskCallApplicationTaskHook+0x68>
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
   12c7c:	e3a03000 	mov	r3, #0
   12c80:	e50b300c 	str	r3, [fp, #-12]
				else if( pxTCB == pxCurrentTCB )
				{
					/* Setting the priority of the running task down means
   12c84:	e51b300c 	ldr	r3, [fp, #-12]
					there may now be another task of higher priority that
   12c88:	e1a00003 	mov	r0, r3
   12c8c:	e24bd004 	sub	sp, fp, #4
   12c90:	e8bd8800 	pop	{fp, pc}
   12c94:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012c98 <vTaskSwitchContext>:
					is ready to execute. */
					xYieldRequired = pdTRUE;
				}
				else
				{
					/* Setting the priority of any other task down does not
   12c98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12c9c:	e28db000 	add	fp, sp, #0
   12ca0:	e24dd00c 	sub	sp, sp, #12
					require a yield as the running task must be above the
   12ca4:	e59f30e0 	ldr	r3, [pc, #224]	; 12d8c <vTaskSwitchContext+0xf4>
   12ca8:	e5933000 	ldr	r3, [r3]
   12cac:	e3530000 	cmp	r3, #0
   12cb0:	0a000008 	beq	12cd8 <vTaskSwitchContext+0x40>
					new priority of the task being modified. */
				}

				/* Remember the ready list the task might be referenced from
   12cb4:	e59f30d4 	ldr	r3, [pc, #212]	; 12d90 <vTaskSwitchContext+0xf8>
   12cb8:	e3a02001 	mov	r2, #1
   12cbc:	e5832000 	str	r2, [r3]
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
   12cc0:	ea00002d 	b	12d7c <vTaskSwitchContext+0xe4>
				else
   12cc4:	e59f30c8 	ldr	r3, [pc, #200]	; 12d94 <vTaskSwitchContext+0xfc>
   12cc8:	e5933000 	ldr	r3, [r3]
   12ccc:	e2433001 	sub	r3, r3, #1
   12cd0:	e59f20bc 	ldr	r2, [pc, #188]	; 12d94 <vTaskSwitchContext+0xfc>
   12cd4:	e5823000 	str	r3, [r2]
				{
   12cd8:	e59f30b4 	ldr	r3, [pc, #180]	; 12d94 <vTaskSwitchContext+0xfc>
   12cdc:	e5932000 	ldr	r2, [r3]
   12ce0:	e59f10b0 	ldr	r1, [pc, #176]	; 12d98 <vTaskSwitchContext+0x100>
   12ce4:	e1a03002 	mov	r3, r2
   12ce8:	e1a03103 	lsl	r3, r3, #2
   12cec:	e0833002 	add	r3, r3, r2
   12cf0:	e1a03103 	lsl	r3, r3, #2
   12cf4:	e0813003 	add	r3, r1, r3
   12cf8:	e5933000 	ldr	r3, [r3]
   12cfc:	e3530000 	cmp	r3, #0
   12d00:	0affffef 	beq	12cc4 <vTaskSwitchContext+0x2c>
				{
   12d04:	e59f3088 	ldr	r3, [pc, #136]	; 12d94 <vTaskSwitchContext+0xfc>
   12d08:	e5932000 	ldr	r2, [r3]
   12d0c:	e1a03002 	mov	r3, r2
   12d10:	e1a03103 	lsl	r3, r3, #2
   12d14:	e0833002 	add	r3, r3, r2
   12d18:	e1a03103 	lsl	r3, r3, #2
   12d1c:	e59f2074 	ldr	r2, [pc, #116]	; 12d98 <vTaskSwitchContext+0x100>
   12d20:	e0833002 	add	r3, r3, r2
   12d24:	e50b3008 	str	r3, [fp, #-8]
   12d28:	e51b3008 	ldr	r3, [fp, #-8]
   12d2c:	e5933004 	ldr	r3, [r3, #4]
   12d30:	e5932004 	ldr	r2, [r3, #4]
   12d34:	e51b3008 	ldr	r3, [fp, #-8]
   12d38:	e5832004 	str	r2, [r3, #4]
   12d3c:	e51b3008 	ldr	r3, [fp, #-8]
   12d40:	e5932004 	ldr	r2, [r3, #4]
   12d44:	e51b3008 	ldr	r3, [fp, #-8]
   12d48:	e2833008 	add	r3, r3, #8
   12d4c:	e1520003 	cmp	r2, r3
   12d50:	1a000004 	bne	12d68 <vTaskSwitchContext+0xd0>
   12d54:	e51b3008 	ldr	r3, [fp, #-8]
   12d58:	e5933004 	ldr	r3, [r3, #4]
   12d5c:	e5932004 	ldr	r2, [r3, #4]
   12d60:	e51b3008 	ldr	r3, [fp, #-8]
   12d64:	e5832004 	str	r2, [r3, #4]
   12d68:	e51b3008 	ldr	r3, [fp, #-8]
   12d6c:	e5933004 	ldr	r3, [r3, #4]
   12d70:	e593300c 	ldr	r3, [r3, #12]
   12d74:	e59f2020 	ldr	r2, [pc, #32]	; 12d9c <vTaskSwitchContext+0x104>
   12d78:	e5823000 	str	r3, [r2]
						reset macro can be called directly. */
   12d7c:	e320f000 	nop	{0}
   12d80:	e28bd000 	add	sp, fp, #0
   12d84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12d88:	e12fff1e 	bx	lr
   12d8c:	000148c0 	andeq	r4, r1, r0, asr #17
   12d90:	000148c8 	andeq	r4, r1, r8, asr #17
   12d94:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   12d98:	000147d8 	ldrdeq	r4, [r1], -r8
   12d9c:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012da0 <vTaskPlaceOnEventList>:
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
					}
					else
					{
   12da0:	e92d4800 	push	{fp, lr}
   12da4:	e28db004 	add	fp, sp, #4
   12da8:	e24dd010 	sub	sp, sp, #16
   12dac:	e50b0010 	str	r0, [fp, #-16]
   12db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
				{
   12db4:	e59f3074 	ldr	r3, [pc, #116]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12db8:	e5933000 	ldr	r3, [r3]
   12dbc:	e2833018 	add	r3, r3, #24
   12dc0:	e1a01003 	mov	r1, r3
   12dc4:	e51b0010 	ldr	r0, [fp, #-16]
   12dc8:	ebfff82c 	bl	10e80 <vListInsert>
					taskYIELD_IF_USING_PREEMPTION();
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
   12dcc:	e59f305c 	ldr	r3, [pc, #92]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12dd0:	e5933000 	ldr	r3, [r3]
   12dd4:	e2833004 	add	r3, r3, #4
   12dd8:	e1a00003 	mov	r0, r3
   12ddc:	ebfff85d 	bl	10f58 <vListRemove>
				}

				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
   12de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12de4:	e3730001 	cmn	r3, #1
   12de8:	1a000006 	bne	12e08 <vTaskPlaceOnEventList+0x68>
			}
		}
		taskEXIT_CRITICAL();
	}

   12dec:	e59f303c 	ldr	r3, [pc, #60]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12df0:	e5933000 	ldr	r3, [r3]
   12df4:	e2833004 	add	r3, r3, #4
   12df8:	e1a01003 	mov	r1, r3
   12dfc:	e59f0030 	ldr	r0, [pc, #48]	; 12e34 <vTaskPlaceOnEventList+0x94>
   12e00:	ebfff7f8 	bl	10de8 <vListInsertEnd>
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
   12e04:	ea000006 	b	12e24 <vTaskPlaceOnEventList+0x84>
	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
   12e08:	e59f3028 	ldr	r3, [pc, #40]	; 12e38 <vTaskPlaceOnEventList+0x98>
   12e0c:	e5932000 	ldr	r2, [r3]
   12e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12e14:	e0823003 	add	r3, r2, r3
   12e18:	e50b3008 	str	r3, [fp, #-8]
	{
   12e1c:	e51b0008 	ldr	r0, [fp, #-8]
   12e20:	eb00013f 	bl	13324 <prvAddCurrentTaskToDelayedList>
			/* Remove task from the ready/delayed list and place in the
   12e24:	e320f000 	nop	{0}
   12e28:	e24bd004 	sub	sp, fp, #4
   12e2c:	e8bd8800 	pop	{fp, pc}
   12e30:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12e34:	00014898 	muleq	r1, r8, r8
   12e38:	000148b0 			; <UNDEFINED> instruction: 0x000148b0

00012e3c <xTaskRemoveFromEventList>:
		}
		taskEXIT_CRITICAL();

		if( xSchedulerRunning != pdFALSE )
		{
			/* Reset the next expected unblock time in case it referred to the
   12e3c:	e92d4800 	push	{fp, lr}
   12e40:	e28db004 	add	fp, sp, #4
   12e44:	e24dd010 	sub	sp, sp, #16
   12e48:	e50b0010 	str	r0, [fp, #-16]

		if( pxTCB == pxCurrentTCB )
		{
			if( xSchedulerRunning != pdFALSE )
			{
				/* The current task has just been suspended. */
   12e4c:	e51b3010 	ldr	r3, [fp, #-16]
   12e50:	e593300c 	ldr	r3, [r3, #12]
   12e54:	e593300c 	ldr	r3, [r3, #12]
   12e58:	e50b300c 	str	r3, [fp, #-12]
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
   12e5c:	e51b300c 	ldr	r3, [fp, #-12]
   12e60:	e2833018 	add	r3, r3, #24
   12e64:	e1a00003 	mov	r0, r3
   12e68:	ebfff83a 	bl	10f58 <vListRemove>
			}
			else
   12e6c:	e59f30cc 	ldr	r3, [pc, #204]	; 12f40 <xTaskRemoveFromEventList+0x104>
   12e70:	e5933000 	ldr	r3, [r3]
   12e74:	e3530000 	cmp	r3, #0
   12e78:	1a00001b 	bne	12eec <xTaskRemoveFromEventList+0xb0>
			{
				/* The scheduler is not running, but the task that was pointed
   12e7c:	e51b300c 	ldr	r3, [fp, #-12]
   12e80:	e2833004 	add	r3, r3, #4
   12e84:	e1a00003 	mov	r0, r3
   12e88:	ebfff832 	bl	10f58 <vListRemove>
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
   12e8c:	e51b300c 	ldr	r3, [fp, #-12]
   12e90:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e94:	e59f30a8 	ldr	r3, [pc, #168]	; 12f44 <xTaskRemoveFromEventList+0x108>
   12e98:	e5933000 	ldr	r3, [r3]
   12e9c:	e1520003 	cmp	r2, r3
   12ea0:	9a000003 	bls	12eb4 <xTaskRemoveFromEventList+0x78>
   12ea4:	e51b300c 	ldr	r3, [fp, #-12]
   12ea8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12eac:	e59f2090 	ldr	r2, [pc, #144]	; 12f44 <xTaskRemoveFromEventList+0x108>
   12eb0:	e5823000 	str	r3, [r2]
   12eb4:	e51b300c 	ldr	r3, [fp, #-12]
   12eb8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ebc:	e1a03002 	mov	r3, r2
   12ec0:	e1a03103 	lsl	r3, r3, #2
   12ec4:	e0833002 	add	r3, r3, r2
   12ec8:	e1a03103 	lsl	r3, r3, #2
   12ecc:	e59f2074 	ldr	r2, [pc, #116]	; 12f48 <xTaskRemoveFromEventList+0x10c>
   12ed0:	e0832002 	add	r2, r3, r2
   12ed4:	e51b300c 	ldr	r3, [fp, #-12]
   12ed8:	e2833004 	add	r3, r3, #4
   12edc:	e1a01003 	mov	r1, r3
   12ee0:	e1a00002 	mov	r0, r2
   12ee4:	ebfff7bf 	bl	10de8 <vListInsertEnd>
   12ee8:	ea000004 	b	12f00 <xTaskRemoveFromEventList+0xc4>
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
   12eec:	e51b300c 	ldr	r3, [fp, #-12]
   12ef0:	e2833018 	add	r3, r3, #24
   12ef4:	e1a01003 	mov	r1, r3
   12ef8:	e59f004c 	ldr	r0, [pc, #76]	; 12f4c <xTaskRemoveFromEventList+0x110>
   12efc:	ebfff7b9 	bl	10de8 <vListInsertEnd>
					is. */
					pxCurrentTCB = NULL;
				}
   12f00:	e51b300c 	ldr	r3, [fp, #-12]
   12f04:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12f08:	e59f3040 	ldr	r3, [pc, #64]	; 12f50 <xTaskRemoveFromEventList+0x114>
   12f0c:	e5933000 	ldr	r3, [r3]
   12f10:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12f14:	e1520003 	cmp	r2, r3
   12f18:	3a000002 	bcc	12f28 <xTaskRemoveFromEventList+0xec>
				else
				{
					vTaskSwitchContext();
				}
			}
		}
   12f1c:	e3a03001 	mov	r3, #1
   12f20:	e50b3008 	str	r3, [fp, #-8]
   12f24:	ea000001 	b	12f30 <xTaskRemoveFromEventList+0xf4>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
   12f28:	e3a03000 	mov	r3, #0
   12f2c:	e50b3008 	str	r3, [fp, #-8]
	}

#endif /* INCLUDE_vTaskSuspend */
   12f30:	e51b3008 	ldr	r3, [fp, #-8]
/*-----------------------------------------------------------*/
   12f34:	e1a00003 	mov	r0, r3
   12f38:	e24bd004 	sub	sp, fp, #4
   12f3c:	e8bd8800 	pop	{fp, pc}
   12f40:	000148c0 	andeq	r4, r1, r0, asr #17
   12f44:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   12f48:	000147d8 	ldrdeq	r4, [r1], -r8
   12f4c:	0001486c 	andeq	r4, r1, ip, ror #16
   12f50:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012f54 <vTaskSetTimeOutState>:

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
   12f54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12f58:	e28db000 	add	fp, sp, #0
   12f5c:	e24dd00c 	sub	sp, sp, #12
   12f60:	e50b0008 	str	r0, [fp, #-8]
	{
	BaseType_t xReturn = pdFALSE;
   12f64:	e59f3028 	ldr	r3, [pc, #40]	; 12f94 <vTaskSetTimeOutState+0x40>
   12f68:	e5932000 	ldr	r2, [r3]
   12f6c:	e51b3008 	ldr	r3, [fp, #-8]
   12f70:	e5832000 	str	r2, [r3]
	const TCB_t * const pxTCB = xTask;
   12f74:	e59f301c 	ldr	r3, [pc, #28]	; 12f98 <vTaskSetTimeOutState+0x44>
   12f78:	e5932000 	ldr	r2, [r3]
   12f7c:	e51b3008 	ldr	r3, [fp, #-8]
   12f80:	e5832004 	str	r2, [r3, #4]

   12f84:	e320f000 	nop	{0}
   12f88:	e28bd000 	add	sp, fp, #0
   12f8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12f90:	e12fff1e 	bx	lr
   12f94:	000148cc 	andeq	r4, r1, ip, asr #17
   12f98:	000148b0 			; <UNDEFINED> instruction: 0x000148b0

00012f9c <xTaskCheckForTimeOut>:
		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
   12f9c:	e92d4800 	push	{fp, lr}
   12fa0:	e28db004 	add	fp, sp, #4
   12fa4:	e24dd010 	sub	sp, sp, #16
   12fa8:	e50b0010 	str	r0, [fp, #-16]
   12fac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
   12fb0:	ebfff562 	bl	10540 <vPortEnterCritical>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
				{
   12fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12fb8:	e5933000 	ldr	r3, [r3]
   12fbc:	e3730001 	cmn	r3, #1
   12fc0:	1a000002 	bne	12fd0 <xTaskCheckForTimeOut+0x34>
					xReturn = pdTRUE;
				}
   12fc4:	e3a03000 	mov	r3, #0
   12fc8:	e50b3008 	str	r3, [fp, #-8]
   12fcc:	ea000028 	b	13074 <xTaskCheckForTimeOut+0xd8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
   12fd0:	e51b3010 	ldr	r3, [fp, #-16]
   12fd4:	e5932000 	ldr	r2, [r3]
   12fd8:	e59f30a8 	ldr	r3, [pc, #168]	; 13088 <xTaskCheckForTimeOut+0xec>
   12fdc:	e5933000 	ldr	r3, [r3]
   12fe0:	e1520003 	cmp	r2, r3
   12fe4:	0a000008 	beq	1300c <xTaskCheckForTimeOut+0x70>
   12fe8:	e51b3010 	ldr	r3, [fp, #-16]
   12fec:	e5932004 	ldr	r2, [r3, #4]
   12ff0:	e59f3094 	ldr	r3, [pc, #148]	; 1308c <xTaskCheckForTimeOut+0xf0>
   12ff4:	e5933000 	ldr	r3, [r3]
   12ff8:	e1520003 	cmp	r2, r3
   12ffc:	8a000002 	bhi	1300c <xTaskCheckForTimeOut+0x70>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else
   13000:	e3a03001 	mov	r3, #1
   13004:	e50b3008 	str	r3, [fp, #-8]
   13008:	ea000019 	b	13074 <xTaskCheckForTimeOut+0xd8>
		{
			mtCOVERAGE_TEST_MARKER();
   1300c:	e59f3078 	ldr	r3, [pc, #120]	; 1308c <xTaskCheckForTimeOut+0xf0>
   13010:	e5932000 	ldr	r2, [r3]
   13014:	e51b3010 	ldr	r3, [fp, #-16]
   13018:	e5933004 	ldr	r3, [r3, #4]
   1301c:	e0422003 	sub	r2, r2, r3
   13020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13024:	e5933000 	ldr	r3, [r3]
   13028:	e1520003 	cmp	r2, r3
   1302c:	2a00000e 	bcs	1306c <xTaskCheckForTimeOut+0xd0>
		}

		return xReturn;
   13030:	e59f3054 	ldr	r3, [pc, #84]	; 1308c <xTaskCheckForTimeOut+0xf0>
   13034:	e5932000 	ldr	r2, [r3]
   13038:	e51b3010 	ldr	r3, [fp, #-16]
   1303c:	e5933004 	ldr	r3, [r3, #4]
   13040:	e0423003 	sub	r3, r2, r3
   13044:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   13048:	e5922000 	ldr	r2, [r2]
   1304c:	e0422003 	sub	r2, r2, r3
   13050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13054:	e5832000 	str	r2, [r3]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
   13058:	e51b0010 	ldr	r0, [fp, #-16]
   1305c:	ebffffbc 	bl	12f54 <vTaskSetTimeOutState>

   13060:	e3a03000 	mov	r3, #0
   13064:	e50b3008 	str	r3, [fp, #-8]
   13068:	ea000001 	b	13074 <xTaskCheckForTimeOut+0xd8>
#endif /* INCLUDE_vTaskSuspend */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )
   1306c:	e3a03001 	mov	r3, #1
   13070:	e50b3008 	str	r3, [fp, #-8]

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
   13074:	ebfff542 	bl	10584 <vPortExitCritical>
	TCB_t * const pxTCB = xTaskToResume;

   13078:	e51b3008 	ldr	r3, [fp, #-8]
		/* It does not make sense to resume the calling task. */
   1307c:	e1a00003 	mov	r0, r3
   13080:	e24bd004 	sub	sp, fp, #4
   13084:	e8bd8800 	pop	{fp, pc}
   13088:	000148cc 	andeq	r4, r1, ip, asr #17
   1308c:	000148b0 			; <UNDEFINED> instruction: 0x000148b0

00013090 <vTaskMissedYield>:
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
   13090:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13094:	e28db000 	add	fp, sp, #0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
   13098:	e59f3014 	ldr	r3, [pc, #20]	; 130b4 <vTaskMissedYield+0x24>
   1309c:	e3a02001 	mov	r2, #1
   130a0:	e5832000 	str	r2, [r3]
		{
   130a4:	e320f000 	nop	{0}
   130a8:	e28bd000 	add	sp, fp, #0
   130ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   130b0:	e12fff1e 	bx	lr
   130b4:	000148c8 	andeq	r4, r1, r8, asr #17

000130b8 <prvIdleTask>:
	{
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
   130b8:	e92d4800 	push	{fp, lr}
   130bc:	e28db004 	add	fp, sp, #4
   130c0:	e24dd008 	sub	sp, sp, #8
   130c4:	e50b0008 	str	r0, [fp, #-8]
		/* RTOS ports that support interrupt nesting have the concept of a
		maximum	system call (or maximum API call) interrupt priority.
		Interrupts that are	above the maximum system call priority are keep
		permanently enabled, even when the RTOS kernel is in a critical section,
		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
		is defined in FreeRTOSConfig.h then
   130c8:	eb000066 	bl	13268 <prvCheckTasksWaitingTermination>

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
   130cc:	e59f3010 	ldr	r3, [pc, #16]	; 130e4 <prvIdleTask+0x2c>
   130d0:	e5933000 	ldr	r3, [r3]
   130d4:	e3530001 	cmp	r3, #1
   130d8:	9afffffa 	bls	130c8 <prvIdleTask+0x10>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
   130dc:	ef000000 	svc	0x00000000
		is defined in FreeRTOSConfig.h then
   130e0:	eafffff8 	b	130c8 <prvIdleTask+0x10>
   130e4:	000147d8 	ldrdeq	r4, [r1], -r8

000130e8 <prvInitialiseTCBVariables>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   130e8:	e92d4800 	push	{fp, lr}
   130ec:	e28db004 	add	fp, sp, #4
   130f0:	e24dd010 	sub	sp, sp, #16
   130f4:	e50b0008 	str	r0, [fp, #-8]
   130f8:	e50b100c 	str	r1, [fp, #-12]
   130fc:	e50b2010 	str	r2, [fp, #-16]
   13100:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
   13104:	e51b3008 	ldr	r3, [fp, #-8]
   13108:	e2833034 	add	r3, r3, #52	; 0x34
   1310c:	e3a02010 	mov	r2, #16
   13110:	e51b100c 	ldr	r1, [fp, #-12]
   13114:	e1a00003 	mov	r0, r3
   13118:	eb000547 	bl	1463c <strncpy>
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
		StackType_t *pxIdleTaskStackBuffer = NULL;
		uint32_t ulIdleTaskStackSize;
   1311c:	e51b3008 	ldr	r3, [fp, #-8]
   13120:	e3a02000 	mov	r2, #0
   13124:	e5c32043 	strb	r2, [r3, #67]	; 0x43

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
   13128:	e51b3010 	ldr	r3, [fp, #-16]
   1312c:	e3530004 	cmp	r3, #4
   13130:	9a000001 	bls	1313c <prvInitialiseTCBVariables+0x54>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
												configIDLE_TASK_NAME,
   13134:	e3a03004 	mov	r3, #4
   13138:	e50b3010 	str	r3, [fp, #-16]
												ulIdleTaskStackSize,
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
   1313c:	e51b3008 	ldr	r3, [fp, #-8]
   13140:	e51b2010 	ldr	r2, [fp, #-16]
   13144:	e583202c 	str	r2, [r3, #44]	; 0x2c
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
		{
			xReturn = pdPASS;
		}
   13148:	e51b3008 	ldr	r3, [fp, #-8]
   1314c:	e2833004 	add	r3, r3, #4
   13150:	e1a00003 	mov	r0, r3
   13154:	ebfff718 	bl	10dbc <vListInitialiseItem>
		else
   13158:	e51b3008 	ldr	r3, [fp, #-8]
   1315c:	e2833018 	add	r3, r3, #24
   13160:	e1a00003 	mov	r0, r3
   13164:	ebfff714 	bl	10dbc <vListInitialiseItem>
		{
			xReturn = pdFAIL;
		}
	}
   13168:	e51b3008 	ldr	r3, [fp, #-8]
   1316c:	e51b2008 	ldr	r2, [fp, #-8]
   13170:	e5832010 	str	r2, [r3, #16]
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
   13174:	e51b3010 	ldr	r3, [fp, #-16]
   13178:	e2632005 	rsb	r2, r3, #5
   1317c:	e51b3008 	ldr	r3, [fp, #-8]
   13180:	e5832018 	str	r2, [r3, #24]
		xReturn = xTaskCreate(	prvIdleTask,
   13184:	e51b3008 	ldr	r3, [fp, #-8]
   13188:	e51b2008 	ldr	r2, [fp, #-8]
   1318c:	e5832024 	str	r2, [r3, #36]	; 0x24
								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
   13190:	e51b3008 	ldr	r3, [fp, #-8]
   13194:	e3a02000 	mov	r2, #0
   13198:	e5832044 	str	r2, [r3, #68]	; 0x44
		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
		the only macro called by the function. */
		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
		{
			freertos_tasks_c_additions_init();
		}
   1319c:	e320f000 	nop	{0}
   131a0:	e24bd004 	sub	sp, fp, #4
   131a4:	e8bd8800 	pop	{fp, pc}

000131a8 <prvInitialiseTaskLists>:
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
		xSchedulerRunning = pdTRUE;
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;

   131a8:	e92d4800 	push	{fp, lr}
   131ac:	e28db004 	add	fp, sp, #4
   131b0:	e24dd008 	sub	sp, sp, #8
		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
   131b4:	e3a03000 	mov	r3, #0
   131b8:	e50b3008 	str	r3, [fp, #-8]
   131bc:	ea00000b 	b	131f0 <prvInitialiseTaskLists+0x48>
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
   131c0:	e51b2008 	ldr	r2, [fp, #-8]
   131c4:	e1a03002 	mov	r3, r2
   131c8:	e1a03103 	lsl	r3, r3, #2
   131cc:	e0833002 	add	r3, r3, r2
   131d0:	e1a03103 	lsl	r3, r3, #2
   131d4:	e59f206c 	ldr	r2, [pc, #108]	; 13248 <prvInitialiseTaskLists+0xa0>
   131d8:	e0833002 	add	r3, r3, r2
   131dc:	e1a00003 	mov	r0, r3
   131e0:	ebfff6db 	bl	10d54 <vListInitialise>
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
   131e4:	e51b3008 	ldr	r3, [fp, #-8]
   131e8:	e2833001 	add	r3, r3, #1
   131ec:	e50b3008 	str	r3, [fp, #-8]
   131f0:	e51b3008 	ldr	r3, [fp, #-8]
   131f4:	e3530004 	cmp	r3, #4
   131f8:	9afffff0 	bls	131c0 <prvInitialiseTaskLists+0x18>
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

   131fc:	e59f0048 	ldr	r0, [pc, #72]	; 1324c <prvInitialiseTaskLists+0xa4>
   13200:	ebfff6d3 	bl	10d54 <vListInitialise>
		traceTASK_SWITCHED_IN();
   13204:	e59f0044 	ldr	r0, [pc, #68]	; 13250 <prvInitialiseTaskLists+0xa8>
   13208:	ebfff6d1 	bl	10d54 <vListInitialise>

   1320c:	e59f0040 	ldr	r0, [pc, #64]	; 13254 <prvInitialiseTaskLists+0xac>
   13210:	ebfff6cf 	bl	10d54 <vListInitialise>
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
		{
   13214:	e59f003c 	ldr	r0, [pc, #60]	; 13258 <prvInitialiseTaskLists+0xb0>
   13218:	ebfff6cd 	bl	10d54 <vListInitialise>
			/* Should not reach here as if the scheduler is running the
			function will not return. */
		}
		else
		{
			/* Should only reach here if a task calls xTaskEndScheduler(). */
   1321c:	e59f0038 	ldr	r0, [pc, #56]	; 1325c <prvInitialiseTaskLists+0xb4>
   13220:	ebfff6cb 	bl	10d54 <vListInitialise>
		}
	}
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
   13224:	e59f3034 	ldr	r3, [pc, #52]	; 13260 <prvInitialiseTaskLists+0xb8>
   13228:	e59f201c 	ldr	r2, [pc, #28]	; 1324c <prvInitialiseTaskLists+0xa4>
   1322c:	e5832000 	str	r2, [r3]
		or the timer task. */
   13230:	e59f302c 	ldr	r3, [pc, #44]	; 13264 <prvInitialiseTaskLists+0xbc>
   13234:	e59f2014 	ldr	r2, [pc, #20]	; 13250 <prvInitialiseTaskLists+0xa8>
   13238:	e5832000 	str	r2, [r3]
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1323c:	e320f000 	nop	{0}
   13240:	e24bd004 	sub	sp, fp, #4
   13244:	e8bd8800 	pop	{fp, pc}
   13248:	000147d8 	ldrdeq	r4, [r1], -r8
   1324c:	0001483c 	andeq	r4, r1, ip, lsr r8
   13250:	00014850 	andeq	r4, r1, r0, asr r8
   13254:	0001486c 	andeq	r4, r1, ip, ror #16
   13258:	00014880 	andeq	r4, r1, r0, lsl #17
   1325c:	00014898 	muleq	r1, r8, r8
   13260:	00014864 	andeq	r4, r1, r4, ror #16
   13264:	00014868 	andeq	r4, r1, r8, ror #16

00013268 <prvCheckTasksWaitingTermination>:
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
   13268:	e92d4800 	push	{fp, lr}
   1326c:	e28db004 	add	fp, sp, #4
   13270:	e24dd008 	sub	sp, sp, #8
}
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
   13274:	e59f309c 	ldr	r3, [pc, #156]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   13278:	e5933000 	ldr	r3, [r3]
   1327c:	e3530000 	cmp	r3, #0
   13280:	0a000021 	beq	1330c <prvCheckTasksWaitingTermination+0xa4>
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
   13284:	ebfffd16 	bl	126e4 <vTaskSuspendAll>
	portDISABLE_INTERRUPTS();
   13288:	e59f308c 	ldr	r3, [pc, #140]	; 1331c <prvCheckTasksWaitingTermination+0xb4>
   1328c:	e5933000 	ldr	r3, [r3]
   13290:	e3530000 	cmp	r3, #0
   13294:	03a03001 	moveq	r3, #1
   13298:	13a03000 	movne	r3, #0
   1329c:	e6ef3073 	uxtb	r3, r3
   132a0:	e50b3008 	str	r3, [fp, #-8]
	xSchedulerRunning = pdFALSE;
   132a4:	ebfffd1a 	bl	12714 <xTaskResumeAll>
	vPortEndScheduler();
}
   132a8:	e51b3008 	ldr	r3, [fp, #-8]
   132ac:	e3530000 	cmp	r3, #0
   132b0:	1a000015 	bne	1330c <prvCheckTasksWaitingTermination+0xa4>
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   132b4:	ebfff4a1 	bl	10540 <vPortEnterCritical>
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
   132b8:	e59f305c 	ldr	r3, [pc, #92]	; 1331c <prvCheckTasksWaitingTermination+0xb4>
   132bc:	e593300c 	ldr	r3, [r3, #12]
   132c0:	e593300c 	ldr	r3, [r3, #12]
   132c4:	e50b300c 	str	r3, [fp, #-12]
	post in the FreeRTOS support forum before reporting this as a bug! -
   132c8:	e51b300c 	ldr	r3, [fp, #-12]
   132cc:	e2833004 	add	r3, r3, #4
   132d0:	e1a00003 	mov	r0, r3
   132d4:	ebfff71f 	bl	10f58 <vListRemove>
	http://goo.gl/wu4acr */
   132d8:	e59f3040 	ldr	r3, [pc, #64]	; 13320 <prvCheckTasksWaitingTermination+0xb8>
   132dc:	e5933000 	ldr	r3, [r3]
   132e0:	e2433001 	sub	r3, r3, #1
   132e4:	e59f2034 	ldr	r2, [pc, #52]	; 13320 <prvCheckTasksWaitingTermination+0xb8>
   132e8:	e5823000 	str	r3, [r2]

   132ec:	e59f3024 	ldr	r3, [pc, #36]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   132f0:	e5933000 	ldr	r3, [r3]
   132f4:	e2433001 	sub	r3, r3, #1
   132f8:	e59f2018 	ldr	r2, [pc, #24]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   132fc:	e5823000 	str	r3, [r2]
	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
	do not otherwise exhibit real time behaviour. */
   13300:	ebfff49f 	bl	10584 <vPortExitCritical>
	portSOFTWARE_BARRIER();

   13304:	e51b000c 	ldr	r0, [fp, #-12]
   13308:	eb00005f 	bl	1348c <prvDeleteTCB>
	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;

	/* Enforces ordering for ports and optimised compilers that may otherwise place
   1330c:	e320f000 	nop	{0}
   13310:	e24bd004 	sub	sp, fp, #4
   13314:	e8bd8800 	pop	{fp, pc}
   13318:	00014894 	muleq	r1, r4, r8
   1331c:	00014880 	andeq	r4, r1, r0, lsl #17
   13320:	000148ac 	andeq	r4, r1, ip, lsr #17

00013324 <prvAddCurrentTaskToDelayedList>:
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
/*----------------------------------------------------------*/
   13324:	e92d4800 	push	{fp, lr}
   13328:	e28db004 	add	fp, sp, #4
   1332c:	e24dd008 	sub	sp, sp, #8
   13330:	e50b0008 	str	r0, [fp, #-8]

#if ( configUSE_TICKLESS_IDLE != 0 )
   13334:	e59f308c 	ldr	r3, [pc, #140]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13338:	e5933000 	ldr	r3, [r3]
   1333c:	e51b2008 	ldr	r2, [fp, #-8]
   13340:	e5832004 	str	r2, [r3, #4]

	static TickType_t prvGetExpectedIdleTime( void )
   13344:	e59f3080 	ldr	r3, [pc, #128]	; 133cc <prvAddCurrentTaskToDelayedList+0xa8>
   13348:	e5933000 	ldr	r3, [r3]
   1334c:	e51b2008 	ldr	r2, [fp, #-8]
   13350:	e1520003 	cmp	r2, r3
   13354:	2a000008 	bcs	1337c <prvAddCurrentTaskToDelayedList+0x58>
	{
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   13358:	e59f3070 	ldr	r3, [pc, #112]	; 133d0 <prvAddCurrentTaskToDelayedList+0xac>
   1335c:	e5932000 	ldr	r2, [r3]
   13360:	e59f3060 	ldr	r3, [pc, #96]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13364:	e5933000 	ldr	r3, [r3]
   13368:	e2833004 	add	r3, r3, #4
   1336c:	e1a01003 	mov	r1, r3
   13370:	e1a00002 	mov	r0, r2
   13374:	ebfff6c1 	bl	10e80 <vListInsert>
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
   13378:	ea00000f 	b	133bc <prvAddCurrentTaskToDelayedList+0x98>
		running. */
   1337c:	e59f3050 	ldr	r3, [pc, #80]	; 133d4 <prvAddCurrentTaskToDelayedList+0xb0>
   13380:	e5932000 	ldr	r2, [r3]
   13384:	e59f303c 	ldr	r3, [pc, #60]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13388:	e5933000 	ldr	r3, [r3]
   1338c:	e2833004 	add	r3, r3, #4
   13390:	e1a01003 	mov	r1, r3
   13394:	e1a00002 	mov	r0, r2
   13398:	ebfff6b8 	bl	10e80 <vListInsert>
				uxHigherPriorityReadyTasks = pdTRUE;
   1339c:	e59f3034 	ldr	r3, [pc, #52]	; 133d8 <prvAddCurrentTaskToDelayedList+0xb4>
   133a0:	e5933000 	ldr	r3, [r3]
   133a4:	e51b2008 	ldr	r2, [fp, #-8]
   133a8:	e1520003 	cmp	r2, r3
   133ac:	2a000002 	bcs	133bc <prvAddCurrentTaskToDelayedList+0x98>
		}
   133b0:	e59f2020 	ldr	r2, [pc, #32]	; 133d8 <prvAddCurrentTaskToDelayedList+0xb4>
   133b4:	e51b3008 	ldr	r3, [fp, #-8]
   133b8:	e5823000 	str	r3, [r2]
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
   133bc:	e320f000 	nop	{0}
   133c0:	e24bd004 	sub	sp, fp, #4
   133c4:	e8bd8800 	pop	{fp, pc}
   133c8:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   133cc:	000148b0 			; <UNDEFINED> instruction: 0x000148b0
   133d0:	00014868 	andeq	r4, r1, r8, ror #16
   133d4:	00014864 	andeq	r4, r1, r4, ror #16
   133d8:	00014748 	andeq	r4, r1, r8, asr #14

000133dc <prvAllocateTCBAndStack>:

			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
   133dc:	e92d4800 	push	{fp, lr}
   133e0:	e28db004 	add	fp, sp, #4
   133e4:	e24dd010 	sub	sp, sp, #16
   133e8:	e1a03000 	mov	r3, r0
   133ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   133f0:	e14b30be 	strh	r3, [fp, #-14]
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   133f4:	e3a00048 	mov	r0, #72	; 0x48
   133f8:	eb00028e 	bl	13e38 <pvPortMalloc>
   133fc:	e50b0008 	str	r0, [fp, #-8]
			}
		}
   13400:	e51b3008 	ldr	r3, [fp, #-8]
   13404:	e3530000 	cmp	r3, #0
   13408:	0a00001b 	beq	1347c <prvAllocateTCBAndStack+0xa0>
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
		{
			xReturn = 0;
   1340c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13410:	e3530000 	cmp	r3, #0
   13414:	1a000005 	bne	13430 <prvAllocateTCBAndStack+0x54>
   13418:	e15b30be 	ldrh	r3, [fp, #-14]
   1341c:	e1a03103 	lsl	r3, r3, #2
   13420:	e1a00003 	mov	r0, r3
   13424:	eb000283 	bl	13e38 <pvPortMalloc>
   13428:	e1a03000 	mov	r3, r0
   1342c:	ea000000 	b	13434 <prvAllocateTCBAndStack+0x58>
   13430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13434:	e51b2008 	ldr	r2, [fp, #-8]
   13438:	e5823030 	str	r3, [r2, #48]	; 0x30
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1343c:	e51b3008 	ldr	r3, [fp, #-8]
   13440:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   13444:	e3530000 	cmp	r3, #0
   13448:	1a000004 	bne	13460 <prvAllocateTCBAndStack+0x84>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
   1344c:	e51b0008 	ldr	r0, [fp, #-8]
   13450:	eb0002ea 	bl	14000 <vPortFree>
			processed. */
   13454:	e3a03000 	mov	r3, #0
   13458:	e50b3008 	str	r3, [fp, #-8]
   1345c:	ea000006 	b	1347c <prvAllocateTCBAndStack+0xa0>
			xReturn = 0;
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
		{
			/* There are tasks in the Ready state that have a priority above the
   13460:	e51b3008 	ldr	r3, [fp, #-8]
   13464:	e5930030 	ldr	r0, [r3, #48]	; 0x30
   13468:	e15b30be 	ldrh	r3, [fp, #-14]
   1346c:	e1a03103 	lsl	r3, r3, #2
   13470:	e1a02003 	mov	r2, r3
   13474:	e3a010a5 	mov	r1, #165	; 0xa5
   13478:	eb00042a 	bl	14528 <memset>
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
		}

		return xReturn;
   1347c:	e51b3008 	ldr	r3, [fp, #-8]
	}
   13480:	e1a00003 	mov	r0, r3
   13484:	e24bd004 	sub	sp, fp, #4
   13488:	e8bd8800 	pop	{fp, pc}

0001348c <prvDeleteTCB>:
	{
		xReturn = xTickCount;
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1348c:	e92d4800 	push	{fp, lr}
   13490:	e28db004 	add	fp, sp, #4
   13494:	e24dd008 	sub	sp, sp, #8
   13498:	e50b0008 	str	r0, [fp, #-8]

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
   1349c:	e51b3008 	ldr	r3, [fp, #-8]
   134a0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   134a4:	e1a00003 	mov	r0, r3
   134a8:	eb0002d4 	bl	14000 <vPortFree>
}
   134ac:	e51b0008 	ldr	r0, [fp, #-8]
   134b0:	eb0002d2 	bl	14000 <vPortFree>
/*-----------------------------------------------------------*/
   134b4:	e320f000 	nop	{0}
   134b8:	e24bd004 	sub	sp, fp, #4
   134bc:	e8bd8800 	pop	{fp, pc}

000134c0 <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   134c0:	e92d4800 	push	{fp, lr}
   134c4:	e28db004 	add	fp, sp, #4
   134c8:	e24dd010 	sub	sp, sp, #16
   134cc:	e50b0010 	str	r0, [fp, #-16]
   134d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	while (pending)
   134d4:	ea00001e 	b	13554 <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   134d8:	e51b3010 	ldr	r3, [fp, #-16]
   134dc:	e16f3f13 	clz	r3, r3
   134e0:	e263301f 	rsb	r3, r3, #31
   134e4:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   134e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   134ec:	e51b3008 	ldr	r3, [fp, #-8]
   134f0:	e0823003 	add	r3, r2, r3
   134f4:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   134f8:	e59f206c 	ldr	r2, [pc, #108]	; 1356c <handleRange+0xac>
   134fc:	e51b300c 	ldr	r3, [fp, #-12]
   13500:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   13504:	e3530000 	cmp	r3, #0
   13508:	0a00000a 	beq	13538 <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   1350c:	e59f2058 	ldr	r2, [pc, #88]	; 1356c <handleRange+0xac>
   13510:	e51b300c 	ldr	r3, [fp, #-12]
   13514:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   13518:	e59f104c 	ldr	r1, [pc, #76]	; 1356c <handleRange+0xac>
   1351c:	e51b300c 	ldr	r3, [fp, #-12]
   13520:	e1a03183 	lsl	r3, r3, #3
   13524:	e0813003 	add	r3, r1, r3
   13528:	e5933004 	ldr	r3, [r3, #4]
   1352c:	e1a01003 	mov	r1, r3
   13530:	e51b000c 	ldr	r0, [fp, #-12]
   13534:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   13538:	e3a02001 	mov	r2, #1
   1353c:	e51b3008 	ldr	r3, [fp, #-8]
   13540:	e1a03312 	lsl	r3, r2, r3
   13544:	e1e03003 	mvn	r3, r3
   13548:	e51b2010 	ldr	r2, [fp, #-16]
   1354c:	e0033002 	and	r3, r3, r2
   13550:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   13554:	e51b3010 	ldr	r3, [fp, #-16]
   13558:	e3530000 	cmp	r3, #0
   1355c:	1affffdd 	bne	134d8 <handleRange+0x18>
	}
}
   13560:	e320f000 	nop	{0}
   13564:	e24bd004 	sub	sp, fp, #4
   13568:	e8bd8800 	pop	{fp, pc}
   1356c:	000148d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00013570 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   13570:	e92d4830 	push	{r4, r5, fp, lr}
   13574:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   13578:	e59f3088 	ldr	r3, [pc, #136]	; 13608 <irqHandler+0x98>
   1357c:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   13580:	e2043c01 	and	r3, r4, #256	; 0x100
   13584:	e3530000 	cmp	r3, #0
   13588:	0a000007 	beq	135ac <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   1358c:	e59f3074 	ldr	r3, [pc, #116]	; 13608 <irqHandler+0x98>
   13590:	e5932004 	ldr	r2, [r3, #4]
   13594:	e59f3070 	ldr	r3, [pc, #112]	; 1360c <irqHandler+0x9c>
   13598:	e5933000 	ldr	r3, [r3]
   1359c:	e0033002 	and	r3, r3, r2
   135a0:	e3a01000 	mov	r1, #0
   135a4:	e1a00003 	mov	r0, r3
   135a8:	ebffffc4 	bl	134c0 <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   135ac:	e2043c02 	and	r3, r4, #512	; 0x200
   135b0:	e3530000 	cmp	r3, #0
   135b4:	0a000007 	beq	135d8 <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   135b8:	e59f3048 	ldr	r3, [pc, #72]	; 13608 <irqHandler+0x98>
   135bc:	e5932008 	ldr	r2, [r3, #8]
   135c0:	e59f3044 	ldr	r3, [pc, #68]	; 1360c <irqHandler+0x9c>
   135c4:	e5933004 	ldr	r3, [r3, #4]
   135c8:	e0033002 	and	r3, r3, r2
   135cc:	e3a01020 	mov	r1, #32
   135d0:	e1a00003 	mov	r0, r3
   135d4:	ebffffb9 	bl	134c0 <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   135d8:	e6ef3074 	uxtb	r3, r4
   135dc:	e3530000 	cmp	r3, #0
   135e0:	0a000006 	beq	13600 <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   135e4:	e59f3020 	ldr	r3, [pc, #32]	; 1360c <irqHandler+0x9c>
   135e8:	e5933008 	ldr	r3, [r3, #8]
   135ec:	e0033004 	and	r3, r3, r4
   135f0:	e6ef3073 	uxtb	r3, r3
   135f4:	e3a01040 	mov	r1, #64	; 0x40
   135f8:	e1a00003 	mov	r0, r3
   135fc:	ebffffaf 	bl	134c0 <handleRange>
}
   13600:	e320f000 	nop	{0}
   13604:	e8bd8830 	pop	{r4, r5, fp, pc}
   13608:	2000b200 	andcs	fp, r0, r0, lsl #4
   1360c:	00014b14 	andeq	r4, r1, r4, lsl fp

00013610 <irqUnblock>:

void irqUnblock (void)
{
   13610:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13614:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   13618:	f1080080 	cpsie	i
}
   1361c:	e320f000 	nop	{0}
   13620:	e28bd000 	add	sp, fp, #0
   13624:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13628:	e12fff1e 	bx	lr

0001362c <irqBlock>:

void irqBlock (void)
{
   1362c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13630:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   13634:	f10c0080 	cpsid	i
}
   13638:	e320f000 	nop	{0}
   1363c:	e28bd000 	add	sp, fp, #0
   13640:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13644:	e12fff1e 	bx	lr

00013648 <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   13648:	e92d4800 	push	{fp, lr}
   1364c:	e28db004 	add	fp, sp, #4
   13650:	e24dd010 	sub	sp, sp, #16
   13654:	e50b0008 	str	r0, [fp, #-8]
   13658:	e50b100c 	str	r1, [fp, #-12]
   1365c:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13660:	e51b3008 	ldr	r3, [fp, #-8]
   13664:	e3530047 	cmp	r3, #71	; 0x47
   13668:	8a00000b 	bhi	1369c <irqRegister+0x54>
		irqBlock();
   1366c:	ebffffee 	bl	1362c <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   13670:	e59f1030 	ldr	r1, [pc, #48]	; 136a8 <irqRegister+0x60>
   13674:	e51b3008 	ldr	r3, [fp, #-8]
   13678:	e51b200c 	ldr	r2, [fp, #-12]
   1367c:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   13680:	e59f2020 	ldr	r2, [pc, #32]	; 136a8 <irqRegister+0x60>
   13684:	e51b3008 	ldr	r3, [fp, #-8]
   13688:	e1a03183 	lsl	r3, r3, #3
   1368c:	e0823003 	add	r3, r2, r3
   13690:	e51b2010 	ldr	r2, [fp, #-16]
   13694:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   13698:	ebffffdc 	bl	13610 <irqUnblock>
	}
}
   1369c:	e320f000 	nop	{0}
   136a0:	e24bd004 	sub	sp, fp, #4
   136a4:	e8bd8800 	pop	{fp, pc}
   136a8:	000148d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000136ac <irqEnable>:

void irqEnable (const unsigned int irq)
{
   136ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   136b0:	e28db000 	add	fp, sp, #0
   136b4:	e24dd014 	sub	sp, sp, #20
   136b8:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   136bc:	e51b3010 	ldr	r3, [fp, #-16]
   136c0:	e203301f 	and	r3, r3, #31
   136c4:	e3a02001 	mov	r2, #1
   136c8:	e1a03312 	lsl	r3, r2, r3
   136cc:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   136d0:	e51b3010 	ldr	r3, [fp, #-16]
   136d4:	e353001f 	cmp	r3, #31
   136d8:	8a000009 	bhi	13704 <irqEnable+0x58>
		pRegs->Enable1 = mask;
   136dc:	e59f2094 	ldr	r2, [pc, #148]	; 13778 <irqEnable+0xcc>
   136e0:	e51b3008 	ldr	r3, [fp, #-8]
   136e4:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   136e8:	e59f308c 	ldr	r3, [pc, #140]	; 1377c <irqEnable+0xd0>
   136ec:	e5932000 	ldr	r2, [r3]
   136f0:	e51b3008 	ldr	r3, [fp, #-8]
   136f4:	e1823003 	orr	r3, r2, r3
   136f8:	e59f207c 	ldr	r2, [pc, #124]	; 1377c <irqEnable+0xd0>
   136fc:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   13700:	ea000018 	b	13768 <irqEnable+0xbc>
	else if (irq <= 63) {
   13704:	e51b3010 	ldr	r3, [fp, #-16]
   13708:	e353003f 	cmp	r3, #63	; 0x3f
   1370c:	8a000009 	bhi	13738 <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   13710:	e59f2060 	ldr	r2, [pc, #96]	; 13778 <irqEnable+0xcc>
   13714:	e51b3008 	ldr	r3, [fp, #-8]
   13718:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   1371c:	e59f3058 	ldr	r3, [pc, #88]	; 1377c <irqEnable+0xd0>
   13720:	e5932004 	ldr	r2, [r3, #4]
   13724:	e51b3008 	ldr	r3, [fp, #-8]
   13728:	e1823003 	orr	r3, r2, r3
   1372c:	e59f2048 	ldr	r2, [pc, #72]	; 1377c <irqEnable+0xd0>
   13730:	e5823004 	str	r3, [r2, #4]
}
   13734:	ea00000b 	b	13768 <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13738:	e51b3010 	ldr	r3, [fp, #-16]
   1373c:	e3530047 	cmp	r3, #71	; 0x47
   13740:	8a000008 	bhi	13768 <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   13744:	e59f202c 	ldr	r2, [pc, #44]	; 13778 <irqEnable+0xcc>
   13748:	e51b3008 	ldr	r3, [fp, #-8]
   1374c:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   13750:	e59f3024 	ldr	r3, [pc, #36]	; 1377c <irqEnable+0xd0>
   13754:	e5932008 	ldr	r2, [r3, #8]
   13758:	e51b3008 	ldr	r3, [fp, #-8]
   1375c:	e1823003 	orr	r3, r2, r3
   13760:	e59f2014 	ldr	r2, [pc, #20]	; 1377c <irqEnable+0xd0>
   13764:	e5823008 	str	r3, [r2, #8]
}
   13768:	e320f000 	nop	{0}
   1376c:	e28bd000 	add	sp, fp, #0
   13770:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13774:	e12fff1e 	bx	lr
   13778:	2000b200 	andcs	fp, r0, r0, lsl #4
   1377c:	00014b14 	andeq	r4, r1, r4, lsl fp

00013780 <irqDisable>:

void irqDisable (const unsigned int irq)
{
   13780:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13784:	e28db000 	add	fp, sp, #0
   13788:	e24dd014 	sub	sp, sp, #20
   1378c:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   13790:	e51b3010 	ldr	r3, [fp, #-16]
   13794:	e203301f 	and	r3, r3, #31
   13798:	e3a02001 	mov	r2, #1
   1379c:	e1a03312 	lsl	r3, r2, r3
   137a0:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   137a4:	e51b3010 	ldr	r3, [fp, #-16]
   137a8:	e353001f 	cmp	r3, #31
   137ac:	8a00000a 	bhi	137dc <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   137b0:	e59f20a0 	ldr	r2, [pc, #160]	; 13858 <irqDisable+0xd8>
   137b4:	e51b3008 	ldr	r3, [fp, #-8]
   137b8:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   137bc:	e59f3098 	ldr	r3, [pc, #152]	; 1385c <irqDisable+0xdc>
   137c0:	e5932000 	ldr	r2, [r3]
   137c4:	e51b3008 	ldr	r3, [fp, #-8]
   137c8:	e1e03003 	mvn	r3, r3
   137cc:	e0033002 	and	r3, r3, r2
   137d0:	e59f2084 	ldr	r2, [pc, #132]	; 1385c <irqDisable+0xdc>
   137d4:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   137d8:	ea00001a 	b	13848 <irqDisable+0xc8>
	else if (irq <= 63) {
   137dc:	e51b3010 	ldr	r3, [fp, #-16]
   137e0:	e353003f 	cmp	r3, #63	; 0x3f
   137e4:	8a00000a 	bhi	13814 <irqDisable+0x94>
		pRegs->Disable2 = mask;
   137e8:	e59f2068 	ldr	r2, [pc, #104]	; 13858 <irqDisable+0xd8>
   137ec:	e51b3008 	ldr	r3, [fp, #-8]
   137f0:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   137f4:	e59f3060 	ldr	r3, [pc, #96]	; 1385c <irqDisable+0xdc>
   137f8:	e5932004 	ldr	r2, [r3, #4]
   137fc:	e51b3008 	ldr	r3, [fp, #-8]
   13800:	e1e03003 	mvn	r3, r3
   13804:	e0033002 	and	r3, r3, r2
   13808:	e59f204c 	ldr	r2, [pc, #76]	; 1385c <irqDisable+0xdc>
   1380c:	e5823004 	str	r3, [r2, #4]
}
   13810:	ea00000c 	b	13848 <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13814:	e51b3010 	ldr	r3, [fp, #-16]
   13818:	e3530047 	cmp	r3, #71	; 0x47
   1381c:	8a000009 	bhi	13848 <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   13820:	e59f2030 	ldr	r2, [pc, #48]	; 13858 <irqDisable+0xd8>
   13824:	e51b3008 	ldr	r3, [fp, #-8]
   13828:	e5823024 	str	r3, [r2, #36]	; 0x24
		enabled[2] &= ~mask;
   1382c:	e59f3028 	ldr	r3, [pc, #40]	; 1385c <irqDisable+0xdc>
   13830:	e5932008 	ldr	r2, [r3, #8]
   13834:	e51b3008 	ldr	r3, [fp, #-8]
   13838:	e1e03003 	mvn	r3, r3
   1383c:	e0033002 	and	r3, r3, r2
   13840:	e59f2014 	ldr	r2, [pc, #20]	; 1385c <irqDisable+0xdc>
   13844:	e5823008 	str	r3, [r2, #8]
}
   13848:	e320f000 	nop	{0}
   1384c:	e28bd000 	add	sp, fp, #0
   13850:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13854:	e12fff1e 	bx	lr
   13858:	2000b200 	andcs	fp, r0, r0, lsl #4
   1385c:	00014b14 	andeq	r4, r1, r4, lsl fp

00013860 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   13860:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13864:	e28db000 	add	fp, sp, #0
   13868:	e24dd01c 	sub	sp, sp, #28
   1386c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13870:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4

	int offset = pinNum / 10;
   13874:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13878:	e59f20b4 	ldr	r2, [pc, #180]	; 13934 <SetGpioFunction+0xd4>
   1387c:	e0832392 	umull	r2, r3, r2, r3
   13880:	e1a031a3 	lsr	r3, r3, #3
   13884:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   13888:	e59f20a8 	ldr	r2, [pc, #168]	; 13938 <SetGpioFunction+0xd8>
   1388c:	e51b3008 	ldr	r3, [fp, #-8]
   13890:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   13894:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   13898:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1389c:	e59f3090 	ldr	r3, [pc, #144]	; 13934 <SetGpioFunction+0xd4>
   138a0:	e0832193 	umull	r2, r3, r3, r1
   138a4:	e1a021a3 	lsr	r2, r3, #3
   138a8:	e1a03002 	mov	r3, r2
   138ac:	e1a03103 	lsl	r3, r3, #2
   138b0:	e0833002 	add	r3, r3, r2
   138b4:	e1a03083 	lsl	r3, r3, #1
   138b8:	e0412003 	sub	r2, r1, r3
   138bc:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   138c0:	e51b2010 	ldr	r2, [fp, #-16]
   138c4:	e1a03002 	mov	r3, r2
   138c8:	e1a03083 	lsl	r3, r3, #1
   138cc:	e0833002 	add	r3, r3, r2
   138d0:	e3a02007 	mov	r2, #7
   138d4:	e1a03312 	lsl	r3, r2, r3
   138d8:	e1e03003 	mvn	r3, r3
   138dc:	e1a02003 	mov	r2, r3
   138e0:	e51b300c 	ldr	r3, [fp, #-12]
   138e4:	e0033002 	and	r3, r3, r2
   138e8:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   138ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   138f0:	e2031007 	and	r1, r3, #7
   138f4:	e51b2010 	ldr	r2, [fp, #-16]
   138f8:	e1a03002 	mov	r3, r2
   138fc:	e1a03083 	lsl	r3, r3, #1
   13900:	e0833002 	add	r3, r3, r2
   13904:	e1a03311 	lsl	r3, r1, r3
   13908:	e51b200c 	ldr	r2, [fp, #-12]
   1390c:	e1823003 	orr	r3, r2, r3
   13910:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   13914:	e59f101c 	ldr	r1, [pc, #28]	; 13938 <SetGpioFunction+0xd8>
   13918:	e51b3008 	ldr	r3, [fp, #-8]
   1391c:	e51b200c 	ldr	r2, [fp, #-12]
   13920:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13924:	e320f000 	nop	{0}
   13928:	e28bd000 	add	sp, fp, #0
   1392c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13930:	e12fff1e 	bx	lr
   13934:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   13938:	20200000 	eorcs	r0, r0, r0

0001393c <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   1393c:	e92d4800 	push	{fp, lr}
   13940:	e28db004 	add	fp, sp, #4
   13944:	e24dd008 	sub	sp, sp, #8
   13948:	e50b0008 	str	r0, [fp, #-8]
   1394c:	e1a03001 	mov	r3, r1
   13950:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   13954:	e55b3009 	ldrb	r3, [fp, #-9]
   13958:	e1a01003 	mov	r1, r3
   1395c:	e51b0008 	ldr	r0, [fp, #-8]
   13960:	ebffffbe 	bl	13860 <SetGpioFunction>
}
   13964:	e320f000 	nop	{0}
   13968:	e24bd004 	sub	sp, fp, #4
   1396c:	e8bd8800 	pop	{fp, pc}

00013970 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   13970:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13974:	e28db000 	add	fp, sp, #0
   13978:	e24dd014 	sub	sp, sp, #20
   1397c:	e50b0010 	str	r0, [fp, #-16]
   13980:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	unsigned long offset=pinNum/32;
   13984:	e51b3010 	ldr	r3, [fp, #-16]
   13988:	e1a032a3 	lsr	r3, r3, #5
   1398c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   13990:	e51b3010 	ldr	r3, [fp, #-16]
   13994:	e203301f 	and	r3, r3, #31
   13998:	e3a02001 	mov	r2, #1
   1399c:	e1a03312 	lsl	r3, r2, r3
   139a0:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   139a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139a8:	e3530000 	cmp	r3, #0
   139ac:	0a00000e 	beq	139ec <SetGpio+0x7c>
		pRegs->GPSET[offset]|=mask;
   139b0:	e59f106c 	ldr	r1, [pc, #108]	; 13a24 <SetGpio+0xb4>
   139b4:	e59f2068 	ldr	r2, [pc, #104]	; 13a24 <SetGpio+0xb4>
   139b8:	e51b3008 	ldr	r3, [fp, #-8]
   139bc:	e2833006 	add	r3, r3, #6
   139c0:	e1a03103 	lsl	r3, r3, #2
   139c4:	e0823003 	add	r3, r2, r3
   139c8:	e5932004 	ldr	r2, [r3, #4]
   139cc:	e51b300c 	ldr	r3, [fp, #-12]
   139d0:	e1822003 	orr	r2, r2, r3
   139d4:	e51b3008 	ldr	r3, [fp, #-8]
   139d8:	e2833006 	add	r3, r3, #6
   139dc:	e1a03103 	lsl	r3, r3, #2
   139e0:	e0813003 	add	r3, r1, r3
   139e4:	e5832004 	str	r2, [r3, #4]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   139e8:	ea000009 	b	13a14 <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   139ec:	e59f1030 	ldr	r1, [pc, #48]	; 13a24 <SetGpio+0xb4>
   139f0:	e59f202c 	ldr	r2, [pc, #44]	; 13a24 <SetGpio+0xb4>
   139f4:	e51b3008 	ldr	r3, [fp, #-8]
   139f8:	e283300a 	add	r3, r3, #10
   139fc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13a00:	e51b300c 	ldr	r3, [fp, #-12]
   13a04:	e1822003 	orr	r2, r2, r3
   13a08:	e51b3008 	ldr	r3, [fp, #-8]
   13a0c:	e283300a 	add	r3, r3, #10
   13a10:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13a14:	e320f000 	nop	{0}
   13a18:	e28bd000 	add	sp, fp, #0
   13a1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a20:	e12fff1e 	bx	lr
   13a24:	20200000 	eorcs	r0, r0, r0

00013a28 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   13a28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a2c:	e28db000 	add	fp, sp, #0
   13a30:	e24dd00c 	sub	sp, sp, #12
   13a34:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   13a38:	e59f2034 	ldr	r2, [pc, #52]	; 13a74 <ReadGpio+0x4c>
   13a3c:	e51b3008 	ldr	r3, [fp, #-8]
   13a40:	e1a032a3 	lsr	r3, r3, #5
   13a44:	e283300c 	add	r3, r3, #12
   13a48:	e1a03103 	lsl	r3, r3, #2
   13a4c:	e0823003 	add	r3, r2, r3
   13a50:	e5932004 	ldr	r2, [r3, #4]
   13a54:	e51b3008 	ldr	r3, [fp, #-8]
   13a58:	e203301f 	and	r3, r3, #31
   13a5c:	e1a03332 	lsr	r3, r2, r3
   13a60:	e2033001 	and	r3, r3, #1
}
   13a64:	e1a00003 	mov	r0, r3
   13a68:	e28bd000 	add	sp, fp, #0
   13a6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a70:	e12fff1e 	bx	lr
   13a74:	20200000 	eorcs	r0, r0, r0

00013a78 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13a78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a7c:	e28db000 	add	fp, sp, #0
   13a80:	e24dd014 	sub	sp, sp, #20
   13a84:	e50b0010 	str	r0, [fp, #-16]
   13a88:	e1a03001 	mov	r3, r1
   13a8c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=(1<<pinNum);
   13a90:	e3a02001 	mov	r2, #1
   13a94:	e51b3010 	ldr	r3, [fp, #-16]
   13a98:	e1a03312 	lsl	r3, r2, r3
   13a9c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13aa0:	e51b3010 	ldr	r3, [fp, #-16]
   13aa4:	e1a032a3 	lsr	r3, r3, #5
   13aa8:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13aac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13ab0:	e3530006 	cmp	r3, #6
   13ab4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13ab8:	ea000055 	b	13c14 <EnableGpioDetect+0x19c>
   13abc:	00013c10 	andeq	r3, r1, r0, lsl ip
   13ac0:	00013ad8 	ldrdeq	r3, [r1], -r8
   13ac4:	00013b14 	andeq	r3, r1, r4, lsl fp
   13ac8:	00013b40 	andeq	r3, r1, r0, asr #22
   13acc:	00013b7c 	andeq	r3, r1, ip, ror fp
   13ad0:	00013ba8 	andeq	r3, r1, r8, lsr #23
   13ad4:	00013be4 	andeq	r3, r1, r4, ror #23
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   13ad8:	e59f1144 	ldr	r1, [pc, #324]	; 13c24 <EnableGpioDetect+0x1ac>
   13adc:	e59f2140 	ldr	r2, [pc, #320]	; 13c24 <EnableGpioDetect+0x1ac>
   13ae0:	e51b300c 	ldr	r3, [fp, #-12]
   13ae4:	e2833012 	add	r3, r3, #18
   13ae8:	e1a03103 	lsl	r3, r3, #2
   13aec:	e0823003 	add	r3, r2, r3
   13af0:	e5932004 	ldr	r2, [r3, #4]
   13af4:	e51b3008 	ldr	r3, [fp, #-8]
   13af8:	e1822003 	orr	r2, r2, r3
   13afc:	e51b300c 	ldr	r3, [fp, #-12]
   13b00:	e2833012 	add	r3, r3, #18
   13b04:	e1a03103 	lsl	r3, r3, #2
   13b08:	e0813003 	add	r3, r1, r3
   13b0c:	e5832004 	str	r2, [r3, #4]
		break;
   13b10:	ea00003f 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   13b14:	e59f1108 	ldr	r1, [pc, #264]	; 13c24 <EnableGpioDetect+0x1ac>
   13b18:	e59f2104 	ldr	r2, [pc, #260]	; 13c24 <EnableGpioDetect+0x1ac>
   13b1c:	e51b300c 	ldr	r3, [fp, #-12]
   13b20:	e2833016 	add	r3, r3, #22
   13b24:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b28:	e51b3008 	ldr	r3, [fp, #-8]
   13b2c:	e1822003 	orr	r2, r2, r3
   13b30:	e51b300c 	ldr	r3, [fp, #-12]
   13b34:	e2833016 	add	r3, r3, #22
   13b38:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13b3c:	ea000034 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   13b40:	e59f10dc 	ldr	r1, [pc, #220]	; 13c24 <EnableGpioDetect+0x1ac>
   13b44:	e59f20d8 	ldr	r2, [pc, #216]	; 13c24 <EnableGpioDetect+0x1ac>
   13b48:	e51b300c 	ldr	r3, [fp, #-12]
   13b4c:	e2833018 	add	r3, r3, #24
   13b50:	e1a03103 	lsl	r3, r3, #2
   13b54:	e0823003 	add	r3, r2, r3
   13b58:	e5932004 	ldr	r2, [r3, #4]
   13b5c:	e51b3008 	ldr	r3, [fp, #-8]
   13b60:	e1822003 	orr	r2, r2, r3
   13b64:	e51b300c 	ldr	r3, [fp, #-12]
   13b68:	e2833018 	add	r3, r3, #24
   13b6c:	e1a03103 	lsl	r3, r3, #2
   13b70:	e0813003 	add	r3, r1, r3
   13b74:	e5832004 	str	r2, [r3, #4]
		break;
   13b78:	ea000025 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   13b7c:	e59f10a0 	ldr	r1, [pc, #160]	; 13c24 <EnableGpioDetect+0x1ac>
   13b80:	e59f209c 	ldr	r2, [pc, #156]	; 13c24 <EnableGpioDetect+0x1ac>
   13b84:	e51b300c 	ldr	r3, [fp, #-12]
   13b88:	e283301c 	add	r3, r3, #28
   13b8c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b90:	e51b3008 	ldr	r3, [fp, #-8]
   13b94:	e1822003 	orr	r2, r2, r3
   13b98:	e51b300c 	ldr	r3, [fp, #-12]
   13b9c:	e283301c 	add	r3, r3, #28
   13ba0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13ba4:	ea00001a 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   13ba8:	e59f1074 	ldr	r1, [pc, #116]	; 13c24 <EnableGpioDetect+0x1ac>
   13bac:	e59f2070 	ldr	r2, [pc, #112]	; 13c24 <EnableGpioDetect+0x1ac>
   13bb0:	e51b300c 	ldr	r3, [fp, #-12]
   13bb4:	e283301e 	add	r3, r3, #30
   13bb8:	e1a03103 	lsl	r3, r3, #2
   13bbc:	e0823003 	add	r3, r2, r3
   13bc0:	e5932004 	ldr	r2, [r3, #4]
   13bc4:	e51b3008 	ldr	r3, [fp, #-8]
   13bc8:	e1822003 	orr	r2, r2, r3
   13bcc:	e51b300c 	ldr	r3, [fp, #-12]
   13bd0:	e283301e 	add	r3, r3, #30
   13bd4:	e1a03103 	lsl	r3, r3, #2
   13bd8:	e0813003 	add	r3, r1, r3
   13bdc:	e5832004 	str	r2, [r3, #4]
		break;
   13be0:	ea00000b 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   13be4:	e59f1038 	ldr	r1, [pc, #56]	; 13c24 <EnableGpioDetect+0x1ac>
   13be8:	e59f2034 	ldr	r2, [pc, #52]	; 13c24 <EnableGpioDetect+0x1ac>
   13bec:	e51b300c 	ldr	r3, [fp, #-12]
   13bf0:	e2833022 	add	r3, r3, #34	; 0x22
   13bf4:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13bf8:	e51b3008 	ldr	r3, [fp, #-8]
   13bfc:	e1822003 	orr	r2, r2, r3
   13c00:	e51b300c 	ldr	r3, [fp, #-12]
   13c04:	e2833022 	add	r3, r3, #34	; 0x22
   13c08:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13c0c:	ea000000 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_NONE:
		break;
   13c10:	e320f000 	nop	{0}
	}
}
   13c14:	e320f000 	nop	{0}
   13c18:	e28bd000 	add	sp, fp, #0
   13c1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13c20:	e12fff1e 	bx	lr
   13c24:	20200000 	eorcs	r0, r0, r0

00013c28 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13c2c:	e28db000 	add	fp, sp, #0
   13c30:	e24dd014 	sub	sp, sp, #20
   13c34:	e50b0010 	str	r0, [fp, #-16]
   13c38:	e1a03001 	mov	r3, r1
   13c3c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   13c40:	e51b3010 	ldr	r3, [fp, #-16]
   13c44:	e203301f 	and	r3, r3, #31
   13c48:	e3a02001 	mov	r2, #1
   13c4c:	e1a03312 	lsl	r3, r2, r3
   13c50:	e1e03003 	mvn	r3, r3
   13c54:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13c58:	e51b3010 	ldr	r3, [fp, #-16]
   13c5c:	e1a032a3 	lsr	r3, r3, #5
   13c60:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13c64:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13c68:	e3530006 	cmp	r3, #6
   13c6c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13c70:	ea000055 	b	13dcc <DisableGpioDetect+0x1a4>
   13c74:	00013dc8 	andeq	r3, r1, r8, asr #27
   13c78:	00013c90 	muleq	r1, r0, ip
   13c7c:	00013ccc 	andeq	r3, r1, ip, asr #25
   13c80:	00013cf8 	strdeq	r3, [r1], -r8
   13c84:	00013d34 	andeq	r3, r1, r4, lsr sp
   13c88:	00013d60 	andeq	r3, r1, r0, ror #26
   13c8c:	00013d9c 	muleq	r1, ip, sp
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   13c90:	e59f1144 	ldr	r1, [pc, #324]	; 13ddc <DisableGpioDetect+0x1b4>
   13c94:	e59f2140 	ldr	r2, [pc, #320]	; 13ddc <DisableGpioDetect+0x1b4>
   13c98:	e51b300c 	ldr	r3, [fp, #-12]
   13c9c:	e2833012 	add	r3, r3, #18
   13ca0:	e1a03103 	lsl	r3, r3, #2
   13ca4:	e0823003 	add	r3, r2, r3
   13ca8:	e5932004 	ldr	r2, [r3, #4]
   13cac:	e51b3008 	ldr	r3, [fp, #-8]
   13cb0:	e0022003 	and	r2, r2, r3
   13cb4:	e51b300c 	ldr	r3, [fp, #-12]
   13cb8:	e2833012 	add	r3, r3, #18
   13cbc:	e1a03103 	lsl	r3, r3, #2
   13cc0:	e0813003 	add	r3, r1, r3
   13cc4:	e5832004 	str	r2, [r3, #4]
		break;
   13cc8:	ea00003f 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   13ccc:	e59f1108 	ldr	r1, [pc, #264]	; 13ddc <DisableGpioDetect+0x1b4>
   13cd0:	e59f2104 	ldr	r2, [pc, #260]	; 13ddc <DisableGpioDetect+0x1b4>
   13cd4:	e51b300c 	ldr	r3, [fp, #-12]
   13cd8:	e2833016 	add	r3, r3, #22
   13cdc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13ce0:	e51b3008 	ldr	r3, [fp, #-8]
   13ce4:	e0022003 	and	r2, r2, r3
   13ce8:	e51b300c 	ldr	r3, [fp, #-12]
   13cec:	e2833016 	add	r3, r3, #22
   13cf0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13cf4:	ea000034 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   13cf8:	e59f10dc 	ldr	r1, [pc, #220]	; 13ddc <DisableGpioDetect+0x1b4>
   13cfc:	e59f20d8 	ldr	r2, [pc, #216]	; 13ddc <DisableGpioDetect+0x1b4>
   13d00:	e51b300c 	ldr	r3, [fp, #-12]
   13d04:	e2833018 	add	r3, r3, #24
   13d08:	e1a03103 	lsl	r3, r3, #2
   13d0c:	e0823003 	add	r3, r2, r3
   13d10:	e5932004 	ldr	r2, [r3, #4]
   13d14:	e51b3008 	ldr	r3, [fp, #-8]
   13d18:	e0022003 	and	r2, r2, r3
   13d1c:	e51b300c 	ldr	r3, [fp, #-12]
   13d20:	e2833018 	add	r3, r3, #24
   13d24:	e1a03103 	lsl	r3, r3, #2
   13d28:	e0813003 	add	r3, r1, r3
   13d2c:	e5832004 	str	r2, [r3, #4]
		break;
   13d30:	ea000025 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   13d34:	e59f10a0 	ldr	r1, [pc, #160]	; 13ddc <DisableGpioDetect+0x1b4>
   13d38:	e59f209c 	ldr	r2, [pc, #156]	; 13ddc <DisableGpioDetect+0x1b4>
   13d3c:	e51b300c 	ldr	r3, [fp, #-12]
   13d40:	e283301c 	add	r3, r3, #28
   13d44:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13d48:	e51b3008 	ldr	r3, [fp, #-8]
   13d4c:	e0022003 	and	r2, r2, r3
   13d50:	e51b300c 	ldr	r3, [fp, #-12]
   13d54:	e283301c 	add	r3, r3, #28
   13d58:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13d5c:	ea00001a 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   13d60:	e59f1074 	ldr	r1, [pc, #116]	; 13ddc <DisableGpioDetect+0x1b4>
   13d64:	e59f2070 	ldr	r2, [pc, #112]	; 13ddc <DisableGpioDetect+0x1b4>
   13d68:	e51b300c 	ldr	r3, [fp, #-12]
   13d6c:	e283301e 	add	r3, r3, #30
   13d70:	e1a03103 	lsl	r3, r3, #2
   13d74:	e0823003 	add	r3, r2, r3
   13d78:	e5932004 	ldr	r2, [r3, #4]
   13d7c:	e51b3008 	ldr	r3, [fp, #-8]
   13d80:	e0022003 	and	r2, r2, r3
   13d84:	e51b300c 	ldr	r3, [fp, #-12]
   13d88:	e283301e 	add	r3, r3, #30
   13d8c:	e1a03103 	lsl	r3, r3, #2
   13d90:	e0813003 	add	r3, r1, r3
   13d94:	e5832004 	str	r2, [r3, #4]
		break;
   13d98:	ea00000b 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   13d9c:	e59f1038 	ldr	r1, [pc, #56]	; 13ddc <DisableGpioDetect+0x1b4>
   13da0:	e59f2034 	ldr	r2, [pc, #52]	; 13ddc <DisableGpioDetect+0x1b4>
   13da4:	e51b300c 	ldr	r3, [fp, #-12]
   13da8:	e2833022 	add	r3, r3, #34	; 0x22
   13dac:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13db0:	e51b3008 	ldr	r3, [fp, #-8]
   13db4:	e0022003 	and	r2, r2, r3
   13db8:	e51b300c 	ldr	r3, [fp, #-12]
   13dbc:	e2833022 	add	r3, r3, #34	; 0x22
   13dc0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13dc4:	ea000000 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_NONE:
		break;
   13dc8:	e320f000 	nop	{0}
	}
}
   13dcc:	e320f000 	nop	{0}
   13dd0:	e28bd000 	add	sp, fp, #0
   13dd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13dd8:	e12fff1e 	bx	lr
   13ddc:	20200000 	eorcs	r0, r0, r0

00013de0 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   13de0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13de4:	e28db000 	add	fp, sp, #0
   13de8:	e24dd014 	sub	sp, sp, #20
   13dec:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   13df0:	e51b3010 	ldr	r3, [fp, #-16]
   13df4:	e203301f 	and	r3, r3, #31
   13df8:	e3a02001 	mov	r2, #1
   13dfc:	e1a03312 	lsl	r3, r2, r3
   13e00:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13e04:	e51b3010 	ldr	r3, [fp, #-16]
   13e08:	e1a032a3 	lsr	r3, r3, #5
   13e0c:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   13e10:	e59f101c 	ldr	r1, [pc, #28]	; 13e34 <ClearGpioInterrupt+0x54>
   13e14:	e51b300c 	ldr	r3, [fp, #-12]
   13e18:	e2833010 	add	r3, r3, #16
   13e1c:	e51b2008 	ldr	r2, [fp, #-8]
   13e20:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13e24:	e320f000 	nop	{0}
   13e28:	e28bd000 	add	sp, fp, #0
   13e2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e30:	e12fff1e 	bx	lr
   13e34:	20200000 	eorcs	r0, r0, r0

00013e38 <pvPortMalloc>:
			{
				xWantedSize += xHeapStructSize;

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   13e38:	e92d4800 	push	{fp, lr}
   13e3c:	e28db004 	add	fp, sp, #4
   13e40:	e24dd018 	sub	sp, sp, #24
   13e44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
				{
					/* Byte alignment required. */
   13e48:	e3a03000 	mov	r3, #0
   13e4c:	e50b3010 	str	r3, [fp, #-16]
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   13e50:	ebfffa23 	bl	126e4 <vTaskSuspendAll>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
   13e54:	e59f3194 	ldr	r3, [pc, #404]	; 13ff0 <pvPortMalloc+0x1b8>
   13e58:	e5933000 	ldr	r3, [r3]
   13e5c:	e3530000 	cmp	r3, #0
   13e60:	1a000000 	bne	13e68 <pvPortMalloc+0x30>
				}
			}
   13e64:	eb000093 	bl	140b8 <prvHeapInit>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

   13e68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e6c:	e3530000 	cmp	r3, #0
   13e70:	0a00000c 	beq	13ea8 <pvPortMalloc+0x70>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
   13e74:	e3a03010 	mov	r3, #16
   13e78:	e1a02003 	mov	r2, r3
   13e7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e80:	e0833002 	add	r3, r3, r2
   13e84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
   13e88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e8c:	e2033007 	and	r3, r3, #7
   13e90:	e3530000 	cmp	r3, #0
   13e94:	0a000003 	beq	13ea8 <pvPortMalloc+0x70>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
				{
					pxPreviousBlock = pxBlock;
   13e98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e9c:	e3c33007 	bic	r3, r3, #7
   13ea0:	e2833008 	add	r3, r3, #8
   13ea4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
   13ea8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13eac:	e3530000 	cmp	r3, #0
   13eb0:	0a000043 	beq	13fc4 <pvPortMalloc+0x18c>
   13eb4:	e3a02a01 	mov	r2, #4096	; 0x1000
   13eb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ebc:	e1530002 	cmp	r3, r2
   13ec0:	2a00003f 	bcs	13fc4 <pvPortMalloc+0x18c>
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
   13ec4:	e59f3128 	ldr	r3, [pc, #296]	; 13ff4 <pvPortMalloc+0x1bc>
   13ec8:	e50b300c 	str	r3, [fp, #-12]
					BlockLink_t structure at its start. */
   13ecc:	e59f3120 	ldr	r3, [pc, #288]	; 13ff4 <pvPortMalloc+0x1bc>
   13ed0:	e5933000 	ldr	r3, [r3]
   13ed4:	e50b3008 	str	r3, [fp, #-8]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   13ed8:	ea000004 	b	13ef0 <pvPortMalloc+0xb8>

					/* This block is being returned for use so must be taken out
   13edc:	e51b3008 	ldr	r3, [fp, #-8]
   13ee0:	e50b300c 	str	r3, [fp, #-12]
					of the list of free blocks. */
   13ee4:	e51b3008 	ldr	r3, [fp, #-8]
   13ee8:	e5933000 	ldr	r3, [r3]
   13eec:	e50b3008 	str	r3, [fp, #-8]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   13ef0:	e51b3008 	ldr	r3, [fp, #-8]
   13ef4:	e5932004 	ldr	r2, [r3, #4]
   13ef8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13efc:	e1520003 	cmp	r2, r3
   13f00:	2a000003 	bcs	13f14 <pvPortMalloc+0xdc>
   13f04:	e51b3008 	ldr	r3, [fp, #-8]
   13f08:	e5933000 	ldr	r3, [r3]
   13f0c:	e3530000 	cmp	r3, #0
   13f10:	1afffff1 	bne	13edc <pvPortMalloc+0xa4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   13f14:	e59f30d4 	ldr	r3, [pc, #212]	; 13ff0 <pvPortMalloc+0x1b8>
   13f18:	e5933000 	ldr	r3, [r3]
   13f1c:	e51b2008 	ldr	r2, [fp, #-8]
   13f20:	e1520003 	cmp	r2, r3
   13f24:	0a000026 	beq	13fc4 <pvPortMalloc+0x18c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
   13f28:	e51b300c 	ldr	r3, [fp, #-12]
   13f2c:	e5933000 	ldr	r3, [r3]
   13f30:	e3a02010 	mov	r2, #16
   13f34:	e0833002 	add	r3, r3, r2
   13f38:	e50b3010 	str	r3, [fp, #-16]
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

   13f3c:	e51b3008 	ldr	r3, [fp, #-8]
   13f40:	e5932000 	ldr	r2, [r3]
   13f44:	e51b300c 	ldr	r3, [fp, #-12]
   13f48:	e5832000 	str	r2, [r3]
						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   13f4c:	e51b3008 	ldr	r3, [fp, #-8]
   13f50:	e5932004 	ldr	r2, [r3, #4]
   13f54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f58:	e0423003 	sub	r3, r2, r3
   13f5c:	e3a02010 	mov	r2, #16
   13f60:	e1a02082 	lsl	r2, r2, #1
   13f64:	e1530002 	cmp	r3, r2
   13f68:	9a00000e 	bls	13fa8 <pvPortMalloc+0x170>
						pxBlock->xBlockSize = xWantedSize;

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
					}
   13f6c:	e51b2008 	ldr	r2, [fp, #-8]
   13f70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f74:	e0823003 	add	r3, r2, r3
   13f78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
   13f7c:	e51b3008 	ldr	r3, [fp, #-8]
   13f80:	e5932004 	ldr	r2, [r3, #4]
   13f84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f88:	e0422003 	sub	r2, r2, r3
   13f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13f90:	e5832004 	str	r2, [r3, #4]

   13f94:	e51b3008 	ldr	r3, [fp, #-8]
   13f98:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f9c:	e5832004 	str	r2, [r3, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   13fa0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   13fa4:	eb000079 	bl	14190 <prvInsertBlockIntoFreeList>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
					}
   13fa8:	e59f3048 	ldr	r3, [pc, #72]	; 13ff8 <pvPortMalloc+0x1c0>
   13fac:	e5932000 	ldr	r2, [r3]
   13fb0:	e51b3008 	ldr	r3, [fp, #-8]
   13fb4:	e5933004 	ldr	r3, [r3, #4]
   13fb8:	e0423003 	sub	r3, r2, r3
   13fbc:	e59f2034 	ldr	r2, [pc, #52]	; 13ff8 <pvPortMalloc+0x1c0>
   13fc0:	e5823000 	str	r3, [r2]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
   13fc4:	ebfff9d2 	bl	12714 <xTaskResumeAll>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
   13fc8:	e59f302c 	ldr	r3, [pc, #44]	; 13ffc <pvPortMalloc+0x1c4>
   13fcc:	e5932000 	ldr	r2, [r3]
   13fd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fd4:	e0823003 	add	r3, r2, r3
   13fd8:	e59f201c 	ldr	r2, [pc, #28]	; 13ffc <pvPortMalloc+0x1c4>
   13fdc:	e5823000 	str	r3, [r2]
			else
			{
   13fe0:	e51b3010 	ldr	r3, [fp, #-16]
				mtCOVERAGE_TEST_MARKER();
   13fe4:	e1a00003 	mov	r0, r3
   13fe8:	e24bd004 	sub	sp, fp, #4
   13fec:	e8bd8800 	pop	{fp, pc}
   13ff0:	00015b28 	andeq	r5, r1, r8, lsr #22
   13ff4:	00015b20 	andeq	r5, r1, r0, lsr #22
   13ff8:	0001474c 	andeq	r4, r1, ip, asr #14
   13ffc:	00015b2c 	andeq	r5, r1, ip, lsr #22

00014000 <vPortFree>:
			}
		}
		else
		{
   14000:	e92d4800 	push	{fp, lr}
   14004:	e28db004 	add	fp, sp, #4
   14008:	e24dd010 	sub	sp, sp, #16
   1400c:	e50b0010 	str	r0, [fp, #-16]
			mtCOVERAGE_TEST_MARKER();
   14010:	e51b3010 	ldr	r3, [fp, #-16]
   14014:	e50b3008 	str	r3, [fp, #-8]
		}

		traceMALLOC( pvReturn, xWantedSize );
   14018:	e51b3010 	ldr	r3, [fp, #-16]
   1401c:	e3530000 	cmp	r3, #0
   14020:	0a000011 	beq	1406c <vPortFree+0x6c>
	}
	( void ) xTaskResumeAll();

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
   14024:	e3a03010 	mov	r3, #16
   14028:	e2633000 	rsb	r3, r3, #0
   1402c:	e51b2008 	ldr	r2, [fp, #-8]
   14030:	e0823003 	add	r3, r2, r3
   14034:	e50b3008 	str	r3, [fp, #-8]
	{
		if( pvReturn == NULL )
		{
   14038:	e51b3008 	ldr	r3, [fp, #-8]
   1403c:	e50b300c 	str	r3, [fp, #-12]
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   14040:	ebfff9a7 	bl	126e4 <vTaskSuspendAll>
		}
		else
		{
   14044:	e51b300c 	ldr	r3, [fp, #-12]
   14048:	e5932004 	ldr	r2, [r3, #4]
   1404c:	e59f3024 	ldr	r3, [pc, #36]	; 14078 <vPortFree+0x78>
   14050:	e5933000 	ldr	r3, [r3]
   14054:	e0823003 	add	r3, r2, r3
   14058:	e59f2018 	ldr	r2, [pc, #24]	; 14078 <vPortFree+0x78>
   1405c:	e5823000 	str	r3, [r2]
			mtCOVERAGE_TEST_MARKER();
   14060:	e51b000c 	ldr	r0, [fp, #-12]
   14064:	eb000049 	bl	14190 <prvInsertBlockIntoFreeList>
		}
	}
   14068:	ebfff9a9 	bl	12714 <xTaskResumeAll>
	#endif

   1406c:	e320f000 	nop	{0}
   14070:	e24bd004 	sub	sp, fp, #4
   14074:	e8bd8800 	pop	{fp, pc}
   14078:	0001474c 	andeq	r4, r1, ip, asr #14

0001407c <xPortGetFreeHeapSize>:
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
/*-----------------------------------------------------------*/
   1407c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14080:	e28db000 	add	fp, sp, #0

   14084:	e59f3010 	ldr	r3, [pc, #16]	; 1409c <xPortGetFreeHeapSize+0x20>
   14088:	e5933000 	ldr	r3, [r3]
void vPortFree( void *pv )
   1408c:	e1a00003 	mov	r0, r3
   14090:	e28bd000 	add	sp, fp, #0
   14094:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14098:	e12fff1e 	bx	lr
   1409c:	0001474c 	andeq	r4, r1, ip, asr #14

000140a0 <vPortInitialiseBlocks>:
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

   140a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140a4:	e28db000 	add	fp, sp, #0
	if( pv != NULL )
	{
   140a8:	e320f000 	nop	{0}
   140ac:	e28bd000 	add	sp, fp, #0
   140b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140b4:	e12fff1e 	bx	lr

000140b8 <prvHeapInit>:
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;

   140b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140bc:	e28db000 	add	fp, sp, #0
   140c0:	e24dd00c 	sub	sp, sp, #12
		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
		{
   140c4:	e59f30b4 	ldr	r3, [pc, #180]	; 14180 <prvHeapInit+0xc8>
   140c8:	e59f20b4 	ldr	r2, [pc, #180]	; 14184 <prvHeapInit+0xcc>
   140cc:	e5832000 	str	r2, [r3]
			if( pxLink->pxNextFreeBlock == NULL )
   140d0:	e59f30a8 	ldr	r3, [pc, #168]	; 14180 <prvHeapInit+0xc8>
   140d4:	e3a02000 	mov	r2, #0
   140d8:	e5832004 	str	r2, [r3, #4]
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   140dc:	e3a02a01 	mov	r2, #4096	; 0x1000
   140e0:	e59f309c 	ldr	r3, [pc, #156]	; 14184 <prvHeapInit+0xcc>
   140e4:	e0823003 	add	r3, r2, r3
   140e8:	e50b3008 	str	r3, [fp, #-8]

   140ec:	e3a03010 	mov	r3, #16
   140f0:	e2633000 	rsb	r3, r3, #0
   140f4:	e51b2008 	ldr	r2, [fp, #-8]
   140f8:	e0823003 	add	r3, r2, r3
   140fc:	e50b3008 	str	r3, [fp, #-8]
				vTaskSuspendAll();
   14100:	e59f2080 	ldr	r2, [pc, #128]	; 14188 <prvHeapInit+0xd0>
   14104:	e51b3008 	ldr	r3, [fp, #-8]
   14108:	e5823000 	str	r3, [r2]
				{
					/* Add this block to the list of free blocks. */
   1410c:	e59f3074 	ldr	r3, [pc, #116]	; 14188 <prvHeapInit+0xd0>
   14110:	e5933000 	ldr	r3, [r3]
   14114:	e3a02000 	mov	r2, #0
   14118:	e5832004 	str	r2, [r3, #4]
					xFreeBytesRemaining += pxLink->xBlockSize;
   1411c:	e59f3064 	ldr	r3, [pc, #100]	; 14188 <prvHeapInit+0xd0>
   14120:	e5933000 	ldr	r3, [r3]
   14124:	e3a02000 	mov	r2, #0
   14128:	e5832000 	str	r2, [r3]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
					xNumberOfSuccessfulFrees++;
				}
   1412c:	e59f3050 	ldr	r3, [pc, #80]	; 14184 <prvHeapInit+0xcc>
   14130:	e50b300c 	str	r3, [fp, #-12]
				( void ) xTaskResumeAll();
   14134:	e3a03a01 	mov	r3, #4096	; 0x1000
   14138:	e3a02010 	mov	r2, #16
   1413c:	e0432002 	sub	r2, r3, r2
   14140:	e51b300c 	ldr	r3, [fp, #-12]
   14144:	e5832004 	str	r2, [r3, #4]
			}
   14148:	e59f3038 	ldr	r3, [pc, #56]	; 14188 <prvHeapInit+0xd0>
   1414c:	e5932000 	ldr	r2, [r3]
   14150:	e51b300c 	ldr	r3, [fp, #-12]
   14154:	e5832000 	str	r2, [r3]
			else
			{
				mtCOVERAGE_TEST_MARKER();
   14158:	e59f302c 	ldr	r3, [pc, #44]	; 1418c <prvHeapInit+0xd4>
   1415c:	e5933000 	ldr	r3, [r3]
   14160:	e3a02010 	mov	r2, #16
   14164:	e0433002 	sub	r3, r3, r2
   14168:	e59f201c 	ldr	r2, [pc, #28]	; 1418c <prvHeapInit+0xd4>
   1416c:	e5823000 	str	r3, [r2]
			}
   14170:	e320f000 	nop	{0}
   14174:	e28bd000 	add	sp, fp, #0
   14178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1417c:	e12fff1e 	bx	lr
   14180:	00015b20 	andeq	r5, r1, r0, lsr #22
   14184:	00014b20 	andeq	r4, r1, r0, lsr #22
   14188:	00015b28 	andeq	r5, r1, r8, lsr #22
   1418c:	0001474c 	andeq	r4, r1, ip, asr #14

00014190 <prvInsertBlockIntoFreeList>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
   14190:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14194:	e28db000 	add	fp, sp, #0
   14198:	e24dd014 	sub	sp, sp, #20
   1419c:	e50b0010 	str	r0, [fp, #-16]
		}
	}
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
   141a0:	e59f3134 	ldr	r3, [pc, #308]	; 142dc <prvInsertBlockIntoFreeList+0x14c>
   141a4:	e50b3008 	str	r3, [fp, #-8]
   141a8:	ea000002 	b	141b8 <prvInsertBlockIntoFreeList+0x28>
   141ac:	e51b3008 	ldr	r3, [fp, #-8]
   141b0:	e5933000 	ldr	r3, [r3]
   141b4:	e50b3008 	str	r3, [fp, #-8]
   141b8:	e51b3008 	ldr	r3, [fp, #-8]
   141bc:	e5932000 	ldr	r2, [r3]
   141c0:	e51b3010 	ldr	r3, [fp, #-16]
   141c4:	e1520003 	cmp	r2, r3
   141c8:	3afffff7 	bcc	141ac <prvInsertBlockIntoFreeList+0x1c>
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
   141cc:	e51b3008 	ldr	r3, [fp, #-8]
   141d0:	e50b300c 	str	r3, [fp, #-12]
	return xMinimumEverFreeBytesRemaining;
   141d4:	e51b3008 	ldr	r3, [fp, #-8]
   141d8:	e5933004 	ldr	r3, [r3, #4]
   141dc:	e51b200c 	ldr	r2, [fp, #-12]
   141e0:	e0822003 	add	r2, r2, r3
   141e4:	e51b3010 	ldr	r3, [fp, #-16]
   141e8:	e1520003 	cmp	r2, r3
   141ec:	1a000008 	bne	14214 <prvInsertBlockIntoFreeList+0x84>
}
/*-----------------------------------------------------------*/
   141f0:	e51b3008 	ldr	r3, [fp, #-8]
   141f4:	e5932004 	ldr	r2, [r3, #4]
   141f8:	e51b3010 	ldr	r3, [fp, #-16]
   141fc:	e5933004 	ldr	r3, [r3, #4]
   14200:	e0822003 	add	r2, r2, r3
   14204:	e51b3008 	ldr	r3, [fp, #-8]
   14208:	e5832004 	str	r2, [r3, #4]

   1420c:	e51b3008 	ldr	r3, [fp, #-8]
   14210:	e50b3010 	str	r3, [fp, #-16]
void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/
   14214:	e51b3010 	ldr	r3, [fp, #-16]
   14218:	e50b300c 	str	r3, [fp, #-12]

   1421c:	e51b3010 	ldr	r3, [fp, #-16]
   14220:	e5933004 	ldr	r3, [r3, #4]
   14224:	e51b200c 	ldr	r2, [fp, #-12]
   14228:	e0822003 	add	r2, r2, r3
   1422c:	e51b3008 	ldr	r3, [fp, #-8]
   14230:	e5933000 	ldr	r3, [r3]
   14234:	e1520003 	cmp	r2, r3
   14238:	1a000018 	bne	142a0 <prvInsertBlockIntoFreeList+0x110>
static void prvHeapInit( void )
{
   1423c:	e51b3008 	ldr	r3, [fp, #-8]
   14240:	e5932000 	ldr	r2, [r3]
   14244:	e59f3094 	ldr	r3, [pc, #148]	; 142e0 <prvInsertBlockIntoFreeList+0x150>
   14248:	e5933000 	ldr	r3, [r3]
   1424c:	e1520003 	cmp	r2, r3
   14250:	0a00000d 	beq	1428c <prvInsertBlockIntoFreeList+0xfc>
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
   14254:	e51b3010 	ldr	r3, [fp, #-16]
   14258:	e5932004 	ldr	r2, [r3, #4]
   1425c:	e51b3008 	ldr	r3, [fp, #-8]
   14260:	e5933000 	ldr	r3, [r3]
   14264:	e5933004 	ldr	r3, [r3, #4]
   14268:	e0822003 	add	r2, r2, r3
   1426c:	e51b3010 	ldr	r3, [fp, #-16]
   14270:	e5832004 	str	r2, [r3, #4]
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   14274:	e51b3008 	ldr	r3, [fp, #-8]
   14278:	e5933000 	ldr	r3, [r3]
   1427c:	e5932000 	ldr	r2, [r3]
   14280:	e51b3010 	ldr	r3, [fp, #-16]
   14284:	e5832000 	str	r2, [r3]
   14288:	ea000008 	b	142b0 <prvInsertBlockIntoFreeList+0x120>

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;

   1428c:	e59f304c 	ldr	r3, [pc, #76]	; 142e0 <prvInsertBlockIntoFreeList+0x150>
   14290:	e5932000 	ldr	r2, [r3]
   14294:	e51b3010 	ldr	r3, [fp, #-16]
   14298:	e5832000 	str	r2, [r3]
   1429c:	ea000003 	b	142b0 <prvInsertBlockIntoFreeList+0x120>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
   142a0:	e51b3008 	ldr	r3, [fp, #-8]
   142a4:	e5932000 	ldr	r2, [r3]
   142a8:	e51b3010 	ldr	r3, [fp, #-16]
   142ac:	e5832000 	str	r2, [r3]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   142b0:	e51b2008 	ldr	r2, [fp, #-8]
   142b4:	e51b3010 	ldr	r3, [fp, #-16]
   142b8:	e1520003 	cmp	r2, r3
   142bc:	0a000002 	beq	142cc <prvInsertBlockIntoFreeList+0x13c>
	xStart.xBlockSize = ( size_t ) 0;

   142c0:	e51b3008 	ldr	r3, [fp, #-8]
   142c4:	e51b2010 	ldr	r2, [fp, #-16]
   142c8:	e5832000 	str	r2, [r3]
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
   142cc:	e320f000 	nop	{0}
   142d0:	e28bd000 	add	sp, fp, #0
   142d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   142d8:	e12fff1e 	bx	lr
   142dc:	00015b20 	andeq	r5, r1, r0, lsr #22
   142e0:	00015b28 	andeq	r5, r1, r8, lsr #22

000142e4 <undefined_instruction>:
   142e4:	eafffffe 	b	142e4 <undefined_instruction>

000142e8 <prefetch_abort>:
   142e8:	eafffffe 	b	142e8 <prefetch_abort>

000142ec <data_abort>:
   142ec:	eafffffe 	b	142ec <data_abort>

000142f0 <unused>:
   142f0:	eafffffe 	b	142f0 <unused>

000142f4 <fiq>:
   142f4:	eafffffe 	b	142f4 <fiq>

000142f8 <hang>:
   142f8:	eafffffe 	b	142f8 <hang>

000142fc <task1>:
#include <task.h>

#include "Drivers/irq.h"
#include "Drivers/gpio.h"

void task1(void *pParam) {
   142fc:	e92d4800 	push	{fp, lr}
   14300:	e28db004 	add	fp, sp, #4
   14304:	e24dd010 	sub	sp, sp, #16
   14308:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   1430c:	e3a03000 	mov	r3, #0
   14310:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14314:	e51b3008 	ldr	r3, [fp, #-8]
   14318:	e2833001 	add	r3, r3, #1
   1431c:	e50b3008 	str	r3, [fp, #-8]
		SetGpio(16, 1);
   14320:	e3a01001 	mov	r1, #1
   14324:	e3a00010 	mov	r0, #16
   14328:	ebfffd90 	bl	13970 <SetGpio>
		vTaskDelay(200);
   1432c:	e3a000c8 	mov	r0, #200	; 0xc8
   14330:	ebfff730 	bl	11ff8 <vTaskDelay>
		i++;
   14334:	eafffff6 	b	14314 <task1+0x18>

00014338 <task2>:
	}
}

void task2(void *pParam) {
   14338:	e92d4800 	push	{fp, lr}
   1433c:	e28db004 	add	fp, sp, #4
   14340:	e24dd010 	sub	sp, sp, #16
   14344:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   14348:	e3a03000 	mov	r3, #0
   1434c:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14350:	e51b3008 	ldr	r3, [fp, #-8]
   14354:	e2833001 	add	r3, r3, #1
   14358:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   1435c:	e3a00064 	mov	r0, #100	; 0x64
   14360:	ebfff724 	bl	11ff8 <vTaskDelay>
		SetGpio(16, 0);
   14364:	e3a01000 	mov	r1, #0
   14368:	e3a00010 	mov	r0, #16
   1436c:	ebfffd7f 	bl	13970 <SetGpio>
		vTaskDelay(100);
   14370:	e3a00064 	mov	r0, #100	; 0x64
   14374:	ebfff71f 	bl	11ff8 <vTaskDelay>
		i++;
   14378:	eafffff4 	b	14350 <task2+0x18>

0001437c <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   1437c:	e92d4800 	push	{fp, lr}
   14380:	e28db004 	add	fp, sp, #4
   14384:	e24dd010 	sub	sp, sp, #16
	SetGpioFunction(16, 1);			// RDY led
   14388:	e3a01001 	mov	r1, #1
   1438c:	e3a00010 	mov	r0, #16
   14390:	ebfffd32 	bl	13860 <SetGpioFunction>

	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   14394:	e3a03000 	mov	r3, #0
   14398:	e58d300c 	str	r3, [sp, #12]
   1439c:	e3a03000 	mov	r3, #0
   143a0:	e58d3008 	str	r3, [sp, #8]
   143a4:	e3a03000 	mov	r3, #0
   143a8:	e58d3004 	str	r3, [sp, #4]
   143ac:	e3a03000 	mov	r3, #0
   143b0:	e58d3000 	str	r3, [sp]
   143b4:	e3a03000 	mov	r3, #0
   143b8:	e3a02080 	mov	r2, #128	; 0x80
   143bc:	e59f1040 	ldr	r1, [pc, #64]	; 14404 <main+0x88>
   143c0:	e59f0040 	ldr	r0, [pc, #64]	; 14408 <main+0x8c>
   143c4:	ebfff5f5 	bl	11ba0 <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   143c8:	e3a03000 	mov	r3, #0
   143cc:	e58d300c 	str	r3, [sp, #12]
   143d0:	e3a03000 	mov	r3, #0
   143d4:	e58d3008 	str	r3, [sp, #8]
   143d8:	e3a03000 	mov	r3, #0
   143dc:	e58d3004 	str	r3, [sp, #4]
   143e0:	e3a03000 	mov	r3, #0
   143e4:	e58d3000 	str	r3, [sp]
   143e8:	e3a03000 	mov	r3, #0
   143ec:	e3a02080 	mov	r2, #128	; 0x80
   143f0:	e59f1014 	ldr	r1, [pc, #20]	; 1440c <main+0x90>
   143f4:	e59f0014 	ldr	r0, [pc, #20]	; 14410 <main+0x94>
   143f8:	ebfff5e8 	bl	11ba0 <xTaskGenericCreate>

	vTaskStartScheduler();
   143fc:	ebfff883 	bl	12610 <vTaskStartScheduler>

	/*
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
   14400:	eafffffe 	b	14400 <main+0x84>
   14404:	00014734 	andeq	r4, r1, r4, lsr r7
   14408:	000142fc 	strdeq	r4, [r1], -ip
   1440c:	0001473c 	andeq	r4, r1, ip, lsr r7
   14410:	00014338 	andeq	r4, r1, r8, lsr r3

00014414 <memcpy>:
   14414:	e352000f 	cmp	r2, #15
   14418:	8a000009 	bhi	14444 <memcpy+0x30>
   1441c:	e3520000 	cmp	r2, #0
   14420:	e1a03000 	mov	r3, r0
   14424:	0a00003c 	beq	1451c <memcpy+0x108>
   14428:	e2433001 	sub	r3, r3, #1
   1442c:	e0812002 	add	r2, r1, r2
   14430:	e4d1c001 	ldrb	ip, [r1], #1
   14434:	e1510002 	cmp	r1, r2
   14438:	e5e3c001 	strb	ip, [r3, #1]!
   1443c:	1afffffb 	bne	14430 <memcpy+0x1c>
   14440:	e12fff1e 	bx	lr
   14444:	e1813000 	orr	r3, r1, r0
   14448:	e3130003 	tst	r3, #3
   1444c:	1a000030 	bne	14514 <memcpy+0x100>
   14450:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14454:	e1a0e002 	mov	lr, r2
   14458:	e280c010 	add	ip, r0, #16
   1445c:	e2813010 	add	r3, r1, #16
   14460:	e5137010 	ldr	r7, [r3, #-16]
   14464:	e513600c 	ldr	r6, [r3, #-12]
   14468:	e5135008 	ldr	r5, [r3, #-8]
   1446c:	e5134004 	ldr	r4, [r3, #-4]
   14470:	e24ee010 	sub	lr, lr, #16
   14474:	e35e000f 	cmp	lr, #15
   14478:	e50c7010 	str	r7, [ip, #-16]
   1447c:	e50c600c 	str	r6, [ip, #-12]
   14480:	e50c5008 	str	r5, [ip, #-8]
   14484:	e50c4004 	str	r4, [ip, #-4]
   14488:	e2833010 	add	r3, r3, #16
   1448c:	e28cc010 	add	ip, ip, #16
   14490:	8afffff2 	bhi	14460 <memcpy+0x4c>
   14494:	e2423010 	sub	r3, r2, #16
   14498:	e3c3300f 	bic	r3, r3, #15
   1449c:	e202600f 	and	r6, r2, #15
   144a0:	e2833010 	add	r3, r3, #16
   144a4:	e3560003 	cmp	r6, #3
   144a8:	e0811003 	add	r1, r1, r3
   144ac:	e0803003 	add	r3, r0, r3
   144b0:	9a00001a 	bls	14520 <memcpy+0x10c>
   144b4:	e1a04001 	mov	r4, r1
   144b8:	e1a0c006 	mov	ip, r6
   144bc:	e243e004 	sub	lr, r3, #4
   144c0:	e24cc004 	sub	ip, ip, #4
   144c4:	e4945004 	ldr	r5, [r4], #4
   144c8:	e35c0003 	cmp	ip, #3
   144cc:	e5ae5004 	str	r5, [lr, #4]!
   144d0:	8afffffa 	bhi	144c0 <memcpy+0xac>
   144d4:	e246c004 	sub	ip, r6, #4
   144d8:	e3ccc003 	bic	ip, ip, #3
   144dc:	e28cc004 	add	ip, ip, #4
   144e0:	e081100c 	add	r1, r1, ip
   144e4:	e083300c 	add	r3, r3, ip
   144e8:	e2022003 	and	r2, r2, #3
   144ec:	e3520000 	cmp	r2, #0
   144f0:	12433001 	subne	r3, r3, #1
   144f4:	10812002 	addne	r2, r1, r2
   144f8:	0a000003 	beq	1450c <memcpy+0xf8>
   144fc:	e4d1c001 	ldrb	ip, [r1], #1
   14500:	e1510002 	cmp	r1, r2
   14504:	e5e3c001 	strb	ip, [r3, #1]!
   14508:	1afffffb 	bne	144fc <memcpy+0xe8>
   1450c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   14510:	e12fff1e 	bx	lr
   14514:	e1a03000 	mov	r3, r0
   14518:	eaffffc2 	b	14428 <memcpy+0x14>
   1451c:	e12fff1e 	bx	lr
   14520:	e1a02006 	mov	r2, r6
   14524:	eafffff0 	b	144ec <memcpy+0xd8>

00014528 <memset>:
   14528:	e3100003 	tst	r0, #3
   1452c:	0a000040 	beq	14634 <memset+0x10c>
   14530:	e3520000 	cmp	r2, #0
   14534:	e2422001 	sub	r2, r2, #1
   14538:	012fff1e 	bxeq	lr
   1453c:	e201c0ff 	and	ip, r1, #255	; 0xff
   14540:	e1a03000 	mov	r3, r0
   14544:	ea000002 	b	14554 <memset+0x2c>
   14548:	e2422001 	sub	r2, r2, #1
   1454c:	e3720001 	cmn	r2, #1
   14550:	012fff1e 	bxeq	lr
   14554:	e4c3c001 	strb	ip, [r3], #1
   14558:	e3130003 	tst	r3, #3
   1455c:	1afffff9 	bne	14548 <memset+0x20>
   14560:	e3520003 	cmp	r2, #3
   14564:	9a00002a 	bls	14614 <memset+0xec>
   14568:	e92d4010 	push	{r4, lr}
   1456c:	e201e0ff 	and	lr, r1, #255	; 0xff
   14570:	e18ee40e 	orr	lr, lr, lr, lsl #8
   14574:	e352000f 	cmp	r2, #15
   14578:	e18ee80e 	orr	lr, lr, lr, lsl #16
   1457c:	9a000010 	bls	145c4 <memset+0x9c>
   14580:	e1a04002 	mov	r4, r2
   14584:	e283c010 	add	ip, r3, #16
   14588:	e2444010 	sub	r4, r4, #16
   1458c:	e354000f 	cmp	r4, #15
   14590:	e50ce010 	str	lr, [ip, #-16]
   14594:	e50ce00c 	str	lr, [ip, #-12]
   14598:	e50ce008 	str	lr, [ip, #-8]
   1459c:	e50ce004 	str	lr, [ip, #-4]
   145a0:	e28cc010 	add	ip, ip, #16
   145a4:	8afffff7 	bhi	14588 <memset+0x60>
   145a8:	e242c010 	sub	ip, r2, #16
   145ac:	e3ccc00f 	bic	ip, ip, #15
   145b0:	e202200f 	and	r2, r2, #15
   145b4:	e28cc010 	add	ip, ip, #16
   145b8:	e3520003 	cmp	r2, #3
   145bc:	e083300c 	add	r3, r3, ip
   145c0:	9a00000a 	bls	145f0 <memset+0xc8>
   145c4:	e1a04003 	mov	r4, r3
   145c8:	e1a0c002 	mov	ip, r2
   145cc:	e24cc004 	sub	ip, ip, #4
   145d0:	e35c0003 	cmp	ip, #3
   145d4:	e484e004 	str	lr, [r4], #4
   145d8:	8afffffb 	bhi	145cc <memset+0xa4>
   145dc:	e242c004 	sub	ip, r2, #4
   145e0:	e3ccc003 	bic	ip, ip, #3
   145e4:	e28cc004 	add	ip, ip, #4
   145e8:	e083300c 	add	r3, r3, ip
   145ec:	e2022003 	and	r2, r2, #3
   145f0:	e3520000 	cmp	r2, #0
   145f4:	0a000004 	beq	1460c <memset+0xe4>
   145f8:	e20110ff 	and	r1, r1, #255	; 0xff
   145fc:	e0832002 	add	r2, r3, r2
   14600:	e4c31001 	strb	r1, [r3], #1
   14604:	e1520003 	cmp	r2, r3
   14608:	1afffffc 	bne	14600 <memset+0xd8>
   1460c:	e8bd4010 	pop	{r4, lr}
   14610:	e12fff1e 	bx	lr
   14614:	e3520000 	cmp	r2, #0
   14618:	012fff1e 	bxeq	lr
   1461c:	e20110ff 	and	r1, r1, #255	; 0xff
   14620:	e0832002 	add	r2, r3, r2
   14624:	e4c31001 	strb	r1, [r3], #1
   14628:	e1520003 	cmp	r2, r3
   1462c:	1afffffc 	bne	14624 <memset+0xfc>
   14630:	e12fff1e 	bx	lr
   14634:	e1a03000 	mov	r3, r0
   14638:	eaffffc8 	b	14560 <memset+0x38>

0001463c <strncpy>:
   1463c:	e1803001 	orr	r3, r0, r1
   14640:	e3130003 	tst	r3, #3
   14644:	03a03001 	moveq	r3, #1
   14648:	13a03000 	movne	r3, #0
   1464c:	e3520003 	cmp	r2, #3
   14650:	93a03000 	movls	r3, #0
   14654:	82033001 	andhi	r3, r3, #1
   14658:	e3530000 	cmp	r3, #0
   1465c:	e92d4070 	push	{r4, r5, r6, lr}
   14660:	e1a03000 	mov	r3, r0
   14664:	0a00000b 	beq	14698 <strncpy+0x5c>
   14668:	e59f50a0 	ldr	r5, [pc, #160]	; 14710 <strncpy+0xd4>
   1466c:	e59f40a0 	ldr	r4, [pc, #160]	; 14714 <strncpy+0xd8>
   14670:	e1a06001 	mov	r6, r1
   14674:	e491e004 	ldr	lr, [r1], #4
   14678:	e08ec005 	add	ip, lr, r5
   1467c:	e1ccc00e 	bic	ip, ip, lr
   14680:	e11c0004 	tst	ip, r4
   14684:	1a00001f 	bne	14708 <strncpy+0xcc>
   14688:	e2422004 	sub	r2, r2, #4
   1468c:	e3520003 	cmp	r2, #3
   14690:	e483e004 	str	lr, [r3], #4
   14694:	8afffff5 	bhi	14670 <strncpy+0x34>
   14698:	e3520000 	cmp	r2, #0
   1469c:	0a00000e 	beq	146dc <strncpy+0xa0>
   146a0:	e5d1c000 	ldrb	ip, [r1]
   146a4:	e35c0000 	cmp	ip, #0
   146a8:	e5c3c000 	strb	ip, [r3]
   146ac:	e2422001 	sub	r2, r2, #1
   146b0:	e2833001 	add	r3, r3, #1
   146b4:	e2811001 	add	r1, r1, #1
   146b8:	1a000005 	bne	146d4 <strncpy+0x98>
   146bc:	ea000008 	b	146e4 <strncpy+0xa8>
   146c0:	e4d1c001 	ldrb	ip, [r1], #1
   146c4:	e35c0000 	cmp	ip, #0
   146c8:	e2422001 	sub	r2, r2, #1
   146cc:	e4c3c001 	strb	ip, [r3], #1
   146d0:	0a000003 	beq	146e4 <strncpy+0xa8>
   146d4:	e3520000 	cmp	r2, #0
   146d8:	1afffff8 	bne	146c0 <strncpy+0x84>
   146dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   146e0:	e12fff1e 	bx	lr
   146e4:	e3520000 	cmp	r2, #0
   146e8:	13a01000 	movne	r1, #0
   146ec:	10832002 	addne	r2, r3, r2
   146f0:	0afffff9 	beq	146dc <strncpy+0xa0>
   146f4:	e4c31001 	strb	r1, [r3], #1
   146f8:	e1520003 	cmp	r2, r3
   146fc:	1afffffc 	bne	146f4 <strncpy+0xb8>
   14700:	e8bd4070 	pop	{r4, r5, r6, lr}
   14704:	e12fff1e 	bx	lr
   14708:	e1a01006 	mov	r1, r6
   1470c:	eaffffe3 	b	146a0 <strncpy+0x64>
   14710:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   14714:	80808080 	addhi	r8, r0, r0, lsl #1

Disassembly of section .rodata:

00014718 <pRegs>:
   14718:	2000b400 	andcs	fp, r0, r0, lsl #8
   1471c:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
   14720:	00000000 	andeq	r0, r0, r0

00014724 <pRegs>:
   14724:	2000b200 	andcs	fp, r0, r0, lsl #4

00014728 <pRegs>:
   14728:	20200000 	eorcs	r0, r0, r0

0001472c <heapSTRUCT_SIZE>:
   1472c:	00000010 	andeq	r0, r0, r0, lsl r0

00014730 <xTotalHeapSize>:
   14730:	00001000 	andeq	r1, r0, r0
   14734:	5f44454c 	svcpl	0x0044454c
   14738:	00000030 	andeq	r0, r0, r0, lsr r0
   1473c:	5f44454c 	svcpl	0x0044454c
   14740:	Address 0x0000000000014740 is out of bounds.


Disassembly of section .data:

00014744 <ulCriticalNesting>:
   14744:	0000270f 	andeq	r2, r0, pc, lsl #14

00014748 <xNextTaskUnblockTime>:
   14748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

0001474c <xFreeBytesRemaining>:
   1474c:	00001000 	andeq	r1, r0, r0

Disassembly of section .bss:

00014750 <__bss_start>:
   14750:	00000000 	andeq	r0, r0, r0

00014754 <pxReadyCoRoutineLists>:
	...

0001477c <xDelayedCoRoutineList1>:
	...

00014790 <xDelayedCoRoutineList2>:
	...

000147a4 <pxDelayedCoRoutineList>:
   147a4:	00000000 	andeq	r0, r0, r0

000147a8 <pxOverflowDelayedCoRoutineList>:
   147a8:	00000000 	andeq	r0, r0, r0

000147ac <xPendingReadyCoRoutineList>:
	...

000147c0 <pxCurrentCoRoutine>:
   147c0:	00000000 	andeq	r0, r0, r0

000147c4 <uxTopCoRoutineReadyPriority>:
   147c4:	00000000 	andeq	r0, r0, r0

000147c8 <xCoRoutineTickCount>:
   147c8:	00000000 	andeq	r0, r0, r0

000147cc <xLastTickCount>:
   147cc:	00000000 	andeq	r0, r0, r0

000147d0 <xPassedTicks>:
   147d0:	00000000 	andeq	r0, r0, r0

000147d4 <pxCurrentTCB>:
   147d4:	00000000 	andeq	r0, r0, r0

000147d8 <pxReadyTasksLists>:
	...

0001483c <xDelayedTaskList1>:
	...

00014850 <xDelayedTaskList2>:
	...

00014864 <pxDelayedTaskList>:
   14864:	00000000 	andeq	r0, r0, r0

00014868 <pxOverflowDelayedTaskList>:
   14868:	00000000 	andeq	r0, r0, r0

0001486c <xPendingReadyList>:
	...

00014880 <xTasksWaitingTermination>:
	...

00014894 <uxTasksDeleted>:
   14894:	00000000 	andeq	r0, r0, r0

00014898 <xSuspendedTaskList>:
	...

000148ac <uxCurrentNumberOfTasks>:
   148ac:	00000000 	andeq	r0, r0, r0

000148b0 <xTickCount>:
   148b0:	00000000 	andeq	r0, r0, r0

000148b4 <uxTopUsedPriority>:
   148b4:	00000000 	andeq	r0, r0, r0

000148b8 <uxTopReadyPriority>:
   148b8:	00000000 	andeq	r0, r0, r0

000148bc <xSchedulerRunning>:
   148bc:	00000000 	andeq	r0, r0, r0

000148c0 <uxSchedulerSuspended>:
   148c0:	00000000 	andeq	r0, r0, r0

000148c4 <uxMissedTicks>:
   148c4:	00000000 	andeq	r0, r0, r0

000148c8 <xMissedYield>:
   148c8:	00000000 	andeq	r0, r0, r0

000148cc <xNumOfOverflows>:
   148cc:	00000000 	andeq	r0, r0, r0

000148d0 <uxTaskNumber>:
   148d0:	00000000 	andeq	r0, r0, r0

000148d4 <g_VectorTable>:
	...

00014b14 <enabled>:
	...

00014b20 <xHeap>:
	...

00015b20 <xStart>:
	...

00015b28 <pxEnd>:
   15b28:	00000000 	andeq	r0, r0, r0

00015b2c <allocated>:
   15b2c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001fb 	strdeq	r0, [r0], -fp
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000e5 	andeq	r0, r0, r5, ror #1
      10:	00008a0c 	andeq	r8, r0, ip, lsl #20
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	00034400 	andeq	r4, r3, r0, lsl #8
      1c:	00000000 	andeq	r0, r0, r0
      20:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      24:	00746e69 	rsbseq	r6, r4, r9, ror #28
      28:	22070403 	andcs	r0, r7, #50331648	; 0x3000000
      2c:	03000006 	movweq	r0, #6
      30:	012f0508 			; <UNDEFINED> instruction: 0x012f0508
      34:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      38:	00015d04 	andeq	r5, r1, r4, lsl #26
      3c:	006c0400 	rsbeq	r0, ip, r0, lsl #8
      40:	47020000 	strmi	r0, [r2, -r0]
      44:	00000048 	andeq	r0, r0, r8, asr #32
      48:	004e0405 	subeq	r0, lr, r5, lsl #8
      4c:	59060000 	stmdbpl	r6, {}	; <UNPREDICTABLE>
      50:	07000000 	streq	r0, [r0, -r0]
      54:	00000059 	andeq	r0, r0, r9, asr r0
      58:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
      5c:	0000000c 	andeq	r0, r0, ip
      60:	00666103 	rsbeq	r6, r6, r3, lsl #2
      64:	04030000 	streq	r0, [r3], #-0
      68:	00061d07 	andeq	r1, r6, r7, lsl #26
      6c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
      70:	00000134 	andeq	r0, r0, r4, lsr r1
      74:	84060103 	strhi	r0, [r6], #-259	; 0xfffffefd
      78:	03000008 	movweq	r0, #8
      7c:	00590702 	subseq	r0, r9, r2, lsl #14
      80:	04050000 	streq	r0, [r5], #-0
      84:	00000066 	andeq	r0, r0, r6, rrx
      88:	dc070403 	cfstrsle	mvf0, [r7], {3}
      8c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      90:	00000045 	andeq	r0, r0, r5, asr #32
      94:	08560124 	ldmdaeq	r6, {r2, r5, r8}^
      98:	0a000001 	beq	a4 <_start-0x7f5c>
      9c:	00444f4c 	subeq	r4, r4, ip, asr #30
      a0:	00665701 	rsbeq	r5, r6, r1, lsl #14
      a4:	0a000000 	beq	ac <_start-0x7f54>
      a8:	004c4156 	subeq	r4, ip, r6, asr r1
      ac:	00665801 	rsbeq	r5, r6, r1, lsl #16
      b0:	0a040000 	beq	1000b8 <__bss_end+0xea588>
      b4:	004c5443 	subeq	r5, ip, r3, asr #8
      b8:	00665901 	rsbeq	r5, r6, r1, lsl #18
      bc:	0a080000 	beq	2000c4 <__bss_end+0x1ea594>
      c0:	00494c43 	subeq	r4, r9, r3, asr #24
      c4:	00665a01 	rsbeq	r5, r6, r1, lsl #20
      c8:	0a0c0000 	beq	3000d0 <__bss_end+0x2ea5a0>
      cc:	00534952 	subseq	r4, r3, r2, asr r9
      d0:	00665b01 	rsbeq	r5, r6, r1, lsl #22
      d4:	0a100000 	beq	4000dc <__bss_end+0x3ea5ac>
      d8:	0053494d 	subseq	r4, r3, sp, asr #18
      dc:	00665c01 	rsbeq	r5, r6, r1, lsl #24
      e0:	0a140000 	beq	5000e8 <__bss_end+0x4ea5b8>
      e4:	00444c52 	subeq	r4, r4, r2, asr ip
      e8:	00665d01 	rsbeq	r5, r6, r1, lsl #26
      ec:	0a180000 	beq	6000f4 <__bss_end+0x5ea5c4>
      f0:	00564944 	subseq	r4, r6, r4, asr #18
      f4:	00665e01 	rsbeq	r5, r6, r1, lsl #28
      f8:	0a1c0000 	beq	700100 <__bss_end+0x6ea5d0>
      fc:	00544e43 	subseq	r4, r4, r3, asr #28
     100:	00665f01 	rsbeq	r5, r6, r1, lsl #30
     104:	00200000 	eoreq	r0, r0, r0
     108:	00004604 	andeq	r4, r0, r4, lsl #12
     10c:	8f600100 	svchi	0x00600100
     110:	0b000000 	bleq	118 <_start-0x7ee8>
     114:	00000108 	andeq	r0, r0, r8, lsl #2
     118:	00014a0c 	andeq	r4, r1, ip, lsl #20
     11c:	2f620100 	svccs	0x00620100
     120:	05000001 	streq	r0, [r0, #-1]
     124:	01471803 	cmpeq	r7, r3, lsl #16
     128:	13040500 	movwne	r0, #17664	; 0x4500
     12c:	0d000001 	stceq	0, cr0, [r0, #-4]
     130:	00000129 	andeq	r0, r0, r9, lsr #2
     134:	0000190e 	andeq	r1, r0, lr, lsl #18
     138:	aceb0100 	stfgee	f0, [fp]
     13c:	98000102 	stmdals	r0, {r1, r8}
     140:	01000000 	mrseq	r0, (UNDEF: 0)
     144:	0001589c 	muleq	r1, ip, r8
     148:	01930c00 	orrseq	r0, r3, r0, lsl #24
     14c:	ed010000 	stc	0, cr0, [r1, #-0]
     150:	00000066 	andeq	r0, r0, r6, rrx
     154:	00749102 	rsbseq	r9, r4, r2, lsl #2
     158:	0000d30f 	andeq	sp, r0, pc, lsl #6
     15c:	74dd0100 	ldrbvc	r0, [sp], #256	; 0x100
     160:	38000102 	stmdacc	r0, {r1, r8}
     164:	01000000 	mrseq	r0, (UNDEF: 0)
     168:	00018a9c 	muleq	r1, ip, sl
     16c:	00001000 	andeq	r1, r0, r0
     170:	dd010000 	stcle	0, cr0, [r1, #-0]
     174:	00000028 	andeq	r0, r0, r8, lsr #32
     178:	10749102 	rsbsne	r9, r4, r2, lsl #2
     17c:	00000030 	andeq	r0, r0, r0, lsr r0
     180:	0059dd01 	subseq	sp, r9, r1, lsl #26
     184:	91020000 	mrsls	r0, (UNDEF: 2)
     188:	78110070 	ldmdavc	r1, {r4, r5, r6}
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	01025cd0 	ldrdeq	r5, [r2, -r0]
     194:	00001800 	andeq	r1, r0, r0, lsl #16
     198:	129c0100 	addsne	r0, ip, #0, 2
     19c:	00000169 	andeq	r0, r0, r9, ror #2
     1a0:	006dc201 	rsbeq	ip, sp, r1, lsl #4
     1a4:	02400000 	subeq	r0, r0, #0
     1a8:	001c0001 	andseq	r0, ip, r1
     1ac:	9c010000 	stcls	0, cr0, [r1], {-0}
     1b0:	00017d13 	andeq	r7, r1, r3, lsl sp
     1b4:	82770100 	rsbshi	r0, r7, #0, 2
     1b8:	00000000 	andeq	r0, r0, r0
     1bc:	40000100 	andmi	r0, r0, r0, lsl #2
     1c0:	01000002 	tsteq	r0, r2
     1c4:	0150109c 			; <UNDEFINED> instruction: 0x0150109c
     1c8:	77010000 	strvc	r0, [r1, -r0]
     1cc:	00000082 	andeq	r0, r0, r2, lsl #1
     1d0:	106c9102 	rsbne	r9, ip, r2, lsl #2
     1d4:	00000005 	andeq	r0, r0, r5
     1d8:	003d7701 	eorseq	r7, sp, r1, lsl #14
     1dc:	91020000 	mrsls	r0, (UNDEF: 2)
     1e0:	013d1068 	teqeq	sp, r8, rrx
     1e4:	77010000 	strvc	r0, [r1, -r0]
     1e8:	00000059 	andeq	r0, r0, r9, asr r0
     1ec:	0c649102 	stfeqp	f1, [r4], #-8
     1f0:	00000037 	andeq	r0, r0, r7, lsr r0
     1f4:	00827901 	addeq	r7, r2, r1, lsl #18
     1f8:	91020000 	mrsls	r0, (UNDEF: 2)
     1fc:	83000074 	movwhi	r0, #116	; 0x74
     200:	04000001 	streq	r0, [r0], #-1
     204:	00011d00 	andeq	r1, r1, r0, lsl #26
     208:	e5010400 	str	r0, [r1, #-1024]	; 0xfffffc00
     20c:	0c000000 	stceq	0, cr0, [r0], {-0}
     210:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     214:	00010344 	andeq	r0, r1, r4, asr #6
     218:	000002a4 	andeq	r0, r0, r4, lsr #5
     21c:	0000010f 	andeq	r0, r0, pc, lsl #2
     220:	69050402 	stmdbvs	r5, {r1, sl}
     224:	0300746e 	movweq	r7, #1134	; 0x46e
     228:	06220704 	strteq	r0, [r2], -r4, lsl #14
     22c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     230:	00012f05 	andeq	r2, r1, r5, lsl #30
     234:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
     238:	0000015d 	andeq	r0, r0, sp, asr r1
     23c:	1d070403 	cfstrsne	mvf0, [r7, #-12]
     240:	04000006 	streq	r0, [r0], #-6
     244:	0000003d 	andeq	r0, r0, sp, lsr r0
     248:	34050403 	strcc	r0, [r5], #-1027	; 0xfffffbfd
     24c:	05000001 	streq	r0, [r0, #-1]
     250:	00000201 	andeq	r0, r0, r1, lsl #4
     254:	00446501 	subeq	r6, r4, r1, lsl #10
     258:	03050000 	movweq	r0, #20480	; 0x5000
     25c:	00014744 	andeq	r4, r1, r4, asr #14
     260:	00025e05 	andeq	r5, r2, r5, lsl #28
     264:	21730100 	cmncs	r3, r0, lsl #2
     268:	05000000 	streq	r0, [r0, #-0]
     26c:	01475003 	cmpeq	r7, r3
     270:	02130600 	andseq	r0, r3, #0, 12
     274:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
     278:	00010584 	andeq	r0, r1, r4, lsl #11
     27c:	00000064 	andeq	r0, r0, r4, rrx
     280:	a2069c01 	andge	r9, r6, #256	; 0x100
     284:	01000001 	tsteq	r0, r1
     288:	010540ee 	smlatteq	r5, lr, r0, r4
     28c:	00004400 	andeq	r4, r0, r0, lsl #8
     290:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     294:	00000250 	andeq	r0, r0, r0, asr r2
     298:	0490c101 	ldreq	ip, [r0], #257	; 0x101
     29c:	00b00001 	adcseq	r0, r0, r1
     2a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2a4:	000000ee 	andeq	r0, r0, lr, ror #1
     2a8:	01049008 	tsteq	r4, r8
     2ac:	00005800 	andeq	r5, r0, r0, lsl #16
     2b0:	0000cd00 	andeq	ip, r0, r0, lsl #26
     2b4:	02690900 	rsbeq	r0, r9, #0, 18
     2b8:	c2010000 	andgt	r0, r1, #0
     2bc:	000000f4 	strdeq	r0, [r0], -r4
     2c0:	00020109 	andeq	r0, r2, r9, lsl #2
     2c4:	44c20100 	strbmi	r0, [r2], #256	; 0x100
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	0104ec0a 	tsteq	r4, sl, lsl #24
     2d0:	00004800 	andeq	r4, r0, r0, lsl #16
     2d4:	02690900 	rsbeq	r0, r9, #0, 18
     2d8:	c4010000 	strgt	r0, [r1], #-0
     2dc:	000000f4 	strdeq	r0, [r0], -r4
     2e0:	00020109 	andeq	r0, r2, r9, lsl #2
     2e4:	44c40100 	strbmi	r0, [r4], #256	; 0x100
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	f9040b00 			; <UNDEFINED> instruction: 0xf9040b00
     2f0:	04000000 	streq	r0, [r0], #-0
     2f4:	000000ee 	andeq	r0, r0, lr, ror #1
     2f8:	023c0d0c 	eorseq	r0, ip, #12, 26	; 0x300
     2fc:	9c010000 	stcls	0, cr0, [r1], {-0}
     300:	000103dc 	ldrdeq	r0, [r1], -ip
     304:	000000b4 	strheq	r0, [r0], -r4
     308:	01549c01 	cmpeq	r4, r1, lsl #24
     30c:	e0080000 	and	r0, r8, r0
     310:	58000103 	stmdapl	r0, {r0, r1, r8}
     314:	33000000 	movwcc	r0, #0
     318:	09000001 	stmdbeq	r0, {r0}
     31c:	00000269 	andeq	r0, r0, r9, ror #4
     320:	00f4a401 	rscseq	sl, r4, r1, lsl #8
     324:	01090000 	mrseq	r0, (UNDEF: 9)
     328:	01000002 	tsteq	r0, r2
     32c:	000044a4 	andeq	r4, r0, r4, lsr #9
     330:	3c0a0000 	stccc	0, cr0, [sl], {-0}
     334:	48000104 	stmdami	r0, {r2, r8}
     338:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     33c:	00000269 	andeq	r0, r0, r9, ror #4
     340:	00f4aa01 	rscseq	sl, r4, r1, lsl #20
     344:	01090000 	mrseq	r0, (UNDEF: 9)
     348:	01000002 	tsteq	r0, r2
     34c:	000044aa 	andeq	r4, r0, sl, lsr #9
     350:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     354:	00000225 	andeq	r0, r0, r5, lsr #4
     358:	03447501 	movteq	r7, #17665	; 0x4501
     35c:	00980001 	addseq	r0, r8, r1
     360:	9c010000 	stcls	0, cr0, [r1], {-0}
     364:	01036c0a 	tsteq	r3, sl, lsl #24
     368:	00004800 	andeq	r4, r0, r0, lsl #16
     36c:	02690900 	rsbeq	r0, r9, #0, 18
     370:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     374:	000000f4 	strdeq	r0, [r0], -r4
     378:	00020109 	andeq	r0, r2, r9, lsl #2
     37c:	44880100 	strmi	r0, [r8], #256	; 0x100
     380:	00000000 	andeq	r0, r0, r0
     384:	04700000 	ldrbteq	r0, [r0], #-0
     388:	00040000 	andeq	r0, r4, r0
     38c:	000001f4 	strdeq	r0, [r0], -r4
     390:	00e50104 	rsceq	r0, r5, r4, lsl #2
     394:	9a0c0000 	bls	30039c <__bss_end+0x2ea86c>
     398:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
     39c:	64000105 	strvs	r0, [r0], #-261	; 0xfffffefb
     3a0:	b9000007 	stmdblt	r0, {r0, r1, r2}
     3a4:	02000001 	andeq	r0, r0, #1
     3a8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3ac:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     3b0:	00062207 	andeq	r2, r6, r7, lsl #4
     3b4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     3b8:	0000012f 	andeq	r0, r0, pc, lsr #2
     3bc:	5d040803 	stcpl	8, cr0, [r4, #-12]
     3c0:	04000001 	streq	r0, [r0], #-1
     3c4:	000c0504 	andeq	r0, ip, r4, lsl #10
     3c8:	61030000 	mrsvs	r0, (UNDEF: 3)
     3cc:	0000004a 	andeq	r0, r0, sl, asr #32
     3d0:	1d070403 	cfstrsne	mvf0, [r7, #-12]
     3d4:	06000006 	streq	r0, [r0], -r6
     3d8:	0000004a 	andeq	r0, r0, sl, asr #32
     3dc:	34050403 	strcc	r0, [r5], #-1027	; 0xfffffbfd
     3e0:	07000001 	streq	r0, [r0, -r1]
     3e4:	0000032a 	andeq	r0, r0, sl, lsr #6
     3e8:	a6690214 			; <UNDEFINED> instruction: 0xa6690214
     3ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3f0:	000002dd 	ldrdeq	r0, [r0], -sp
     3f4:	003f6b02 	eorseq	r6, pc, r2, lsl #22
     3f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3fc:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
     400:	00ab6c02 	adceq	r6, fp, r2, lsl #24
     404:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     408:	000003ce 	andeq	r0, r0, lr, asr #7
     40c:	00ab6d02 	adceq	r6, fp, r2, lsl #26
     410:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     414:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     418:	003d6e02 	eorseq	r6, sp, r2, lsl #28
     41c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     420:	000002a8 	andeq	r0, r0, r8, lsr #5
     424:	003d6f02 	eorseq	r6, sp, r2, lsl #30
     428:	00100000 	andseq	r0, r0, r0
     42c:	00005d06 	andeq	r5, r0, r6, lsl #26
     430:	a6040900 	strge	r0, [r4], -r0, lsl #18
     434:	05000000 	streq	r0, [r0, #-0]
     438:	000004ca 	andeq	r0, r0, sl, asr #9
     43c:	005d7102 	subseq	r7, sp, r2, lsl #2
     440:	b1060000 	mrslt	r0, (UNDEF: 6)
     444:	07000000 	streq	r0, [r0, -r0]
     448:	00000526 	andeq	r0, r0, r6, lsr #10
     44c:	f273020c 	vhsub.s<illegal width 64>	d16, d3, d12
     450:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     454:	000002dd 	ldrdeq	r0, [r0], -sp
     458:	003f7502 	eorseq	r7, pc, r2, lsl #10
     45c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     460:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
     464:	00ab7602 	adceq	r7, fp, r2, lsl #12
     468:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     46c:	000003ce 	andeq	r0, r0, lr, asr #7
     470:	00ab7702 	adceq	r7, fp, r2, lsl #14
     474:	00080000 	andeq	r0, r8, r0
     478:	00043e05 	andeq	r3, r4, r5, lsl #28
     47c:	c1790200 	cmngt	r9, r0, lsl #4
     480:	06000000 	streq	r0, [r0], -r0
     484:	000000f2 	strdeq	r0, [r0], -r2
     488:	00053607 	andeq	r3, r5, r7, lsl #12
     48c:	7e021400 	cfcpysvc	mvf1, mvf2
     490:	00000133 	andeq	r0, r0, r3, lsr r1
     494:	00045d08 	andeq	r5, r4, r8, lsl #26
     498:	51800200 	orrpl	r0, r0, r0, lsl #4
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	0002d508 	andeq	sp, r2, r8, lsl #10
     4a4:	33810200 	orrcc	r0, r1, #0, 4
     4a8:	04000001 	streq	r0, [r0], #-1
     4ac:	0002f608 	andeq	pc, r2, r8, lsl #12
     4b0:	fd820200 	stc2	2, cr0, [r2]
     4b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4b8:	bc040900 			; <UNDEFINED> instruction: 0xbc040900
     4bc:	05000000 	streq	r0, [r0, #-0]
     4c0:	0000095e 	andeq	r0, r0, lr, asr r9
     4c4:	01028302 	tsteq	r2, r2, lsl #6
     4c8:	390a0000 	stmdbcc	sl, {}	; <UNPREDICTABLE>
     4cc:	03000001 	movweq	r0, #1
     4d0:	08840601 	stmeq	r4, {r0, r9, sl}
     4d4:	02030000 	andeq	r0, r3, #0
     4d8:	00005907 	andeq	r5, r0, r7, lsl #18
     4dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     4e0:	000000dc 	ldrdeq	r0, [r0], -ip
     4e4:	00048b05 	andeq	r8, r4, r5, lsl #22
     4e8:	3d530400 	cfldrdcc	mvd0, [r3, #-0]
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
     4f4:	01745604 	cmneq	r4, r4, lsl #12
     4f8:	04090000 	streq	r0, [r9], #-0
     4fc:	0000017a 	andeq	r0, r0, sl, ror r1
     500:	00018a0b 	andeq	r8, r1, fp, lsl #20
     504:	015e0c00 	cmpeq	lr, r0, lsl #24
     508:	4a0c0000 	bmi	300510 <__bss_end+0x2ea9e0>
     50c:	00000000 	andeq	r0, r0, r0
     510:	0003e907 	andeq	lr, r3, r7, lsl #18
     514:	58043800 	stmdapl	r4, {fp, ip, sp}
     518:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     51c:	0002b408 	andeq	fp, r2, r8, lsl #8
     520:	695a0400 	ldmdbvs	sl, {sl}^
     524:	00000001 	andeq	r0, r0, r1
     528:	00056c08 	andeq	r6, r5, r8, lsl #24
     52c:	b15b0400 	cmplt	fp, r0, lsl #8
     530:	04000000 	streq	r0, [r0], #-0
     534:	00059908 	andeq	r9, r5, r8, lsl #18
     538:	b15c0400 	cmplt	ip, r0, lsl #8
     53c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     540:	00048008 	andeq	r8, r4, r8
     544:	4a5d0400 	bmi	174154c <__bss_end+0x172ba1c>
     548:	2c000000 	stccs	0, cr0, [r0], {-0}
     54c:	00043608 	andeq	r3, r4, r8, lsl #12
     550:	4a5e0400 	bmi	1781558 <__bss_end+0x176ba28>
     554:	30000000 	andcc	r0, r0, r0
     558:	0004ff08 	andeq	pc, r4, r8, lsl #30
     55c:	505f0400 	subspl	r0, pc, r0, lsl #8
     560:	34000001 	strcc	r0, [r0], #-1
     564:	038b0500 	orreq	r0, fp, #0, 10
     568:	60040000 	andvs	r0, r4, r0
     56c:	0000018a 	andeq	r0, r0, sl, lsl #3
     570:	0001390d 	andeq	r3, r1, sp, lsl #18
     574:	0001fa00 	andeq	pc, r1, r0, lsl #20
     578:	01570e00 	cmpeq	r7, r0, lsl #28
     57c:	00010000 	andeq	r0, r1, r0
     580:	0004200f 	andeq	r2, r4, pc
     584:	ea510100 	b	144098c <__bss_end+0x142ae5c>
     588:	05000001 	streq	r0, [r0, #-1]
     58c:	01475403 	cmpeq	r7, r3, lsl #8
     590:	035d0f00 	cmpeq	sp, #0, 30
     594:	52010000 	andpl	r0, r1, #0
     598:	00000139 	andeq	r0, r0, r9, lsr r1
     59c:	477c0305 	ldrbmi	r0, [ip, -r5, lsl #6]!
     5a0:	740f0001 	strvc	r0, [pc], #-1	; 5a8 <_start-0x7a58>
     5a4:	01000003 	tsteq	r0, r3
     5a8:	00013953 	andeq	r3, r1, r3, asr r9
     5ac:	90030500 	andls	r0, r3, r0, lsl #10
     5b0:	0f000147 	svceq	0x00000147
     5b4:	0000053c 	andeq	r0, r0, ip, lsr r5
     5b8:	023e5401 	eorseq	r5, lr, #16777216	; 0x1000000
     5bc:	03050000 	movweq	r0, #20480	; 0x5000
     5c0:	000147a4 	andeq	r4, r1, r4, lsr #15
     5c4:	01390409 	teqeq	r9, r9, lsl #8
     5c8:	3e0a0000 	cdpcc	0, 0, cr0, cr10, cr0, {0}
     5cc:	0f000002 	svceq	0x00000002
     5d0:	00000507 	andeq	r0, r0, r7, lsl #10
     5d4:	023e5501 	eorseq	r5, lr, #4194304	; 0x400000
     5d8:	03050000 	movweq	r0, #20480	; 0x5000
     5dc:	000147a8 	andeq	r4, r1, r8, lsr #15
     5e0:	00049c0f 	andeq	r9, r4, pc, lsl #24
     5e4:	39560100 	ldmdbcc	r6, {r8}^
     5e8:	05000001 	streq	r0, [r0, #-1]
     5ec:	0147ac03 	cmpeq	r7, r3, lsl #24
     5f0:	046d1000 	strbteq	r1, [sp], #-0
     5f4:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     5f8:	0000027c 	andeq	r0, r0, ip, ror r2
     5fc:	47c00305 	strbmi	r0, [r0, r5, lsl #6]
     600:	04090001 	streq	r0, [r9], #-1
     604:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     608:	0003410f 	andeq	r4, r3, pc, lsl #2
     60c:	4a5a0100 	bmi	1680a14 <__bss_end+0x166aee4>
     610:	05000000 	streq	r0, [r0, #-0]
     614:	0147c403 	cmpeq	r7, r3, lsl #8
     618:	03160f00 	tsteq	r6, #0, 30
     61c:	5b010000 	blpl	40624 <__bss_end+0x2aaf4>
     620:	0000003f 	andeq	r0, r0, pc, lsr r0
     624:	47c80305 	strbmi	r0, [r8, r5, lsl #6]
     628:	070f0001 	streq	r0, [pc, -r1]
     62c:	01000003 	tsteq	r0, r3
     630:	00003f5b 	andeq	r3, r0, fp, asr pc
     634:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
     638:	0f000147 	svceq	0x00000147
     63c:	000002c8 	andeq	r0, r0, r8, asr #5
     640:	003f5b01 	eorseq	r5, pc, r1, lsl #22
     644:	03050000 	movweq	r0, #20480	; 0x5000
     648:	000147d0 	ldrdeq	r4, [r1], -r0
     64c:	00040211 	andeq	r0, r4, r1, lsl r2
     650:	016c0100 	cmneq	ip, r0, lsl #2
     654:	00000056 	andeq	r0, r0, r6, asr r0
     658:	00010cc8 	andeq	r0, r1, r8, asr #25
     65c:	0000008c 	andeq	r0, r0, ip, lsl #1
     660:	030e9c01 	movweq	r9, #60417	; 0xec01
     664:	be120000 	cdplt	0, 1, cr0, cr2, cr0, {0}
     668:	01000004 	tsteq	r0, r4
     66c:	030e016c 	movweq	r0, #57708	; 0xe16c
     670:	91020000 	mrsls	r0, (UNDEF: 2)
     674:	0276136c 	rsbseq	r1, r6, #108, 6	; 0xb0000001
     678:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     67c:	00027c01 	andeq	r7, r2, r1, lsl #24
     680:	70910200 	addsvc	r0, r1, r0, lsl #4
     684:	000c1613 	andeq	r1, ip, r3, lsl r6
     688:	016f0100 	cmneq	pc, r0, lsl #2
     68c:	00000056 	andeq	r0, r0, r6, asr r0
     690:	00749102 	rsbseq	r9, r4, r2, lsl #2
     694:	01440409 	cmpeq	r4, r9, lsl #8
     698:	7d140000 	ldcvc	0, cr0, [r4, #-0]
     69c:	01000005 	tsteq	r0, r5
     6a0:	0c200158 	stfeqs	f0, [r0], #-352	; 0xfffffea0
     6a4:	00a80001 	adceq	r0, r8, r1
     6a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6ac:	0000033a 	andeq	r0, r0, sl, lsr r3
     6b0:	00048013 	andeq	r8, r4, r3, lsl r0
     6b4:	015a0100 	cmpeq	sl, r0, lsl #2
     6b8:	0000004a 	andeq	r0, r0, sl, asr #32
     6bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6c0:	0004d415 	andeq	sp, r4, r5, lsl r4
     6c4:	013a0100 	teqeq	sl, r0, lsl #2
     6c8:	00010af8 	strdeq	r0, [r1], -r8
     6cc:	00000128 	andeq	r0, r0, r8, lsr #2
     6d0:	036a9c01 	cmneq	sl, #256	; 0x100
     6d4:	60160000 	andsvs	r0, r6, r0
     6d8:	7800010b 	stmdavc	r0, {r0, r1, r3, r8}
     6dc:	13000000 	movwne	r0, #0
     6e0:	00000335 	andeq	r0, r0, r5, lsr r3
     6e4:	44014f01 	strmi	r4, [r1], #-3841	; 0xfffff0ff
     6e8:	02000002 	andeq	r0, r0, #2
     6ec:	00007491 	muleq	r0, r1, r4
     6f0:	0005a814 	andeq	sl, r5, r4, lsl r8
     6f4:	01000100 	mrseq	r0, (UNDEF: 16)
     6f8:	00010928 	andeq	r0, r1, r8, lsr #18
     6fc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     700:	03a99c01 			; <UNDEFINED> instruction: 0x03a99c01
     704:	93130000 	tstls	r3, #0
     708:	01000003 	tsteq	r0, r3
     70c:	027c0102 	rsbseq	r0, ip, #-2147483648	; 0x80000000
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	098c1670 	stmibeq	ip, {r4, r5, r6, r9, sl, ip}
     718:	00280001 	eoreq	r0, r8, r1
     71c:	86130000 	ldrhi	r0, [r3], -r0
     720:	01000002 	tsteq	r0, r2
     724:	023e010d 	eorseq	r0, lr, #1073741827	; 0x40000003
     728:	91020000 	mrsls	r0, (UNDEF: 2)
     72c:	17000074 	smlsdxne	r0, r4, r0, r0
     730:	00000553 	andeq	r0, r0, r3, asr r5
     734:	083ce901 	ldmdaeq	ip!, {r0, r8, fp, sp, lr, pc}
     738:	00ec0001 	rsceq	r0, ip, r1
     73c:	9c010000 	stcls	0, cr0, [r1], {-0}
     740:	000003d7 	ldrdeq	r0, [r0], -r7
     744:	01084c16 	tsteq	r8, r6, lsl ip
     748:	0000b400 	andeq	fp, r0, r0, lsl #8
     74c:	02760f00 	rsbseq	r0, r6, #0, 30
     750:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     754:	0000027c 	andeq	r0, r0, ip, ror r2
     758:	00749102 	rsbseq	r9, r4, r2, lsl #2
     75c:	028d1800 	addeq	r1, sp, #0, 16
     760:	c3010000 	movwgt	r0, #4096	; 0x1000
     764:	00010758 	andeq	r0, r1, r8, asr r7
     768:	000000e4 	andeq	r0, r0, r4, ror #1
     76c:	04179c01 	ldreq	r9, [r7], #-3073	; 0xfffff3ff
     770:	e8190000 	ldmda	r9, {}	; <UNPREDICTABLE>
     774:	01000002 	tsteq	r0, r2
     778:	00003fc3 	andeq	r3, r0, r3, asr #31
     77c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     780:	0004be19 	andeq	fp, r4, r9, lsl lr
     784:	3ec30100 	polccs	f0, f3, f0
     788:	02000002 	andeq	r0, r0, #2
     78c:	e70f6891 			; <UNDEFINED> instruction: 0xe70f6891
     790:	01000004 	tsteq	r0, r4
     794:	00003fc5 	andeq	r3, r0, r5, asr #31
     798:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     79c:	044c1a00 	strbeq	r1, [ip], #-2560	; 0xfffff600
     7a0:	8a010000 	bhi	407a8 <__bss_end+0x2ac78>
     7a4:	00000056 	andeq	r0, r0, r6, asr r0
     7a8:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     7ac:	00000168 	andeq	r0, r0, r8, ror #2
     7b0:	d9199c01 	ldmdble	r9, {r0, sl, fp, ip, pc}
     7b4:	01000003 	tsteq	r0, r3
     7b8:	0001698a 	andeq	r6, r1, sl, lsl #19
     7bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
     7c0:	00048019 	andeq	r8, r4, r9, lsl r0
     7c4:	4a8a0100 	bmi	fe280bcc <_estack+0xf6270bcc>
     7c8:	02000000 	andeq	r0, r0, #0
     7cc:	36196891 			; <UNDEFINED> instruction: 0x36196891
     7d0:	01000004 	tsteq	r0, r4
     7d4:	00004a8a 	andeq	r4, r0, sl, lsl #21
     7d8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     7dc:	000c160f 	andeq	r1, ip, pc, lsl #12
     7e0:	568c0100 	strpl	r0, [ip], r0, lsl #2
     7e4:	02000000 	andeq	r0, r0, #0
     7e8:	f30f7491 	vqshl.u8	d7, d1, d31
     7ec:	01000004 	tsteq	r0, r4
     7f0:	00027c8d 	andeq	r7, r2, sp, lsl #25
     7f4:	70910200 	addsvc	r0, r1, r0, lsl #4
     7f8:	0a900000 	beq	fe400800 <_estack+0xf63f0800>
     7fc:	00040000 	andeq	r0, r4, r0
     800:	00000377 	andeq	r0, r0, r7, ror r3
     804:	00e50104 	rsceq	r0, r5, r4, lsl #2
     808:	f30c0000 	vhadd.u8	d0, d12, d0
     80c:	54000007 	strpl	r0, [r0], #-7
     810:	9c00010d 	stflss	f0, [r0], {13}
     814:	7e000002 	cdpvc	0, 0, cr0, cr0, cr2, {0}
     818:	02000003 	andeq	r0, r0, #3
     81c:	06220704 	strteq	r0, [r2], -r4, lsl #14
     820:	04030000 	streq	r0, [r3], #-0
     824:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     828:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     82c:	0000012f 	andeq	r0, r0, pc, lsr #2
     830:	5d040802 	stcpl	8, cr0, [r4, #-8]
     834:	02000001 	andeq	r0, r0, #1
     838:	08840601 	stmeq	r4, {r0, r9, sl}
     83c:	01020000 	mrseq	r0, (UNDEF: 2)
     840:	00088208 	andeq	r8, r8, r8, lsl #4
     844:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     848:	0000089e 	muleq	r0, lr, r8
     84c:	59070202 	stmdbpl	r7, {r1, r9}
     850:	02000000 	andeq	r0, r0, #0
     854:	01340504 	teqeq	r4, r4, lsl #10
     858:	04020000 	streq	r0, [r2], #-0
     85c:	00061d07 	andeq	r1, r6, r7, lsl #26
     860:	00600400 	rsbeq	r0, r0, r0, lsl #8
     864:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     868:	00061807 	andeq	r1, r6, r7, lsl #16
     86c:	08700500 	ldmdaeq	r0!, {r8, sl}^
     870:	07020000 	streq	r0, [r2, -r0]
     874:	00000028 	andeq	r0, r0, r8, lsr #32
     878:	00085f05 	andeq	r5, r8, r5, lsl #30
     87c:	592c0300 	stmdbpl	ip!, {r8, r9}
     880:	05000000 	streq	r0, [r0, #-0]
     884:	00000955 	andeq	r0, r0, r5, asr r9
     888:	00597203 	subseq	r7, r9, r3, lsl #4
     88c:	c1060000 	mrsgt	r0, (UNDEF: 6)
     890:	04000007 	streq	r0, [r0], #-7
     894:	00210165 	eoreq	r0, r1, r5, ror #2
     898:	04070000 	streq	r0, [r7], #-0
     89c:	00bfa603 	adcseq	sl, pc, r3, lsl #12
     8a0:	bb080000 	bllt	2008a8 <__bss_end+0x1ead78>
     8a4:	03000007 	movweq	r0, #7
     8a8:	000094a8 	andeq	r9, r0, r8, lsr #9
     8ac:	076d0800 	strbeq	r0, [sp, -r0, lsl #16]!
     8b0:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     8b4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     8b8:	00440900 	subeq	r0, r4, r0, lsl #18
     8bc:	00cf0000 	sbceq	r0, pc, r0
     8c0:	cf0a0000 	svcgt	0x000a0000
     8c4:	03000000 	movweq	r0, #0
     8c8:	07040200 	streq	r0, [r4, -r0, lsl #4]
     8cc:	000000dc 	ldrdeq	r0, [r0], -ip
     8d0:	a303080b 	movwge	r0, #14347	; 0x380b
     8d4:	000000f7 	strdeq	r0, [r0], -r7
     8d8:	0009330c 	andeq	r3, r9, ip, lsl #6
     8dc:	28a50300 	stmiacs	r5!, {r8, r9}
     8e0:	00000000 	andeq	r0, r0, r0
     8e4:	00093b0c 	andeq	r3, r9, ip, lsl #22
     8e8:	a0aa0300 	adcge	r0, sl, r0, lsl #6
     8ec:	04000000 	streq	r0, [r0], #-0
     8f0:	08c60500 	stmiaeq	r6, {r8, sl}^
     8f4:	ab030000 	blge	c08fc <__bss_end+0xaadcc>
     8f8:	000000d6 	ldrdeq	r0, [r0], -r6
     8fc:	00073005 	andeq	r3, r7, r5
     900:	73af0300 			; <UNDEFINED> instruction: 0x73af0300
     904:	0d000000 	stceq	0, cr0, [r0, #-0]
     908:	15040e04 	strne	r0, [r4, #-3588]	; 0xfffff1fc
     90c:	02000001 	andeq	r0, r0, #1
     910:	088b0801 	stmeq	fp, {r0, fp}
     914:	150f0000 	strne	r0, [pc, #-0]	; 91c <_start-0x76e4>
     918:	05000001 	streq	r0, [r0, #-1]
     91c:	00000999 	muleq	r0, r9, r9
     920:	00601605 	rsbeq	r1, r0, r5, lsl #12
     924:	41100000 	tstmi	r0, r0
     928:	18000007 	stmdane	r0, {r0, r1, r2}
     92c:	017f2d05 	cmneq	pc, r5, lsl #26
     930:	e70c0000 	str	r0, [ip, -r0]
     934:	05000008 	streq	r0, [r0, #-8]
     938:	00017f2f 	andeq	r7, r1, pc, lsr #30
     93c:	5f110000 	svcpl	0x00110000
     940:	3005006b 	andcc	r0, r5, fp, rrx
     944:	00000028 	andeq	r0, r0, r8, lsr #32
     948:	091e0c04 	ldmdbeq	lr, {r2, sl, fp}
     94c:	30050000 	andcc	r0, r5, r0
     950:	00000028 	andeq	r0, r0, r8, lsr #32
     954:	072a0c08 	streq	r0, [sl, -r8, lsl #24]!
     958:	30050000 	andcc	r0, r5, r0
     95c:	00000028 	andeq	r0, r0, r8, lsr #32
     960:	09f00c0c 	ldmibeq	r0!, {r2, r3, sl, fp}^
     964:	30050000 	andcc	r0, r5, r0
     968:	00000028 	andeq	r0, r0, r8, lsr #32
     96c:	785f1110 	ldmdavc	pc, {r4, r8, ip}^	; <UNPREDICTABLE>
     970:	85310500 	ldrhi	r0, [r1, #-1280]!	; 0xfffffb00
     974:	14000001 	strne	r0, [r0], #-1
     978:	2c040e00 	stccs	14, cr0, [r4], {-0}
     97c:	09000001 	stmdbeq	r0, {r0}
     980:	00000121 	andeq	r0, r0, r1, lsr #2
     984:	00000195 	muleq	r0, r5, r1
     988:	0000cf0a 	andeq	ip, r0, sl, lsl #30
     98c:	10000000 	andne	r0, r0, r0
     990:	00000768 	andeq	r0, r0, r8, ror #14
     994:	0e350524 	cdpeq	5, 3, cr0, cr5, cr4, {1}
     998:	0c000002 	stceq	0, cr0, [r0], {2}
     99c:	00000663 	andeq	r0, r0, r3, ror #12
     9a0:	00283705 	eoreq	r3, r8, r5, lsl #14
     9a4:	0c000000 	stceq	0, cr0, [r0], {-0}
     9a8:	00000964 	andeq	r0, r0, r4, ror #18
     9ac:	00283805 	eoreq	r3, r8, r5, lsl #16
     9b0:	0c040000 	stceq	0, cr0, [r4], {-0}
     9b4:	00000678 	andeq	r0, r0, r8, ror r6
     9b8:	00283905 	eoreq	r3, r8, r5, lsl #18
     9bc:	0c080000 	stceq	0, cr0, [r8], {-0}
     9c0:	00000a7b 	andeq	r0, r0, fp, ror sl
     9c4:	00283a05 	eoreq	r3, r8, r5, lsl #20
     9c8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     9cc:	00000839 	andeq	r0, r0, r9, lsr r8
     9d0:	00283b05 	eoreq	r3, r8, r5, lsl #22
     9d4:	0c100000 	ldceq	0, cr0, [r0], {-0}
     9d8:	000007e9 	andeq	r0, r0, r9, ror #15
     9dc:	00283c05 	eoreq	r3, r8, r5, lsl #24
     9e0:	0c140000 	ldceq	0, cr0, [r4], {-0}
     9e4:	000009f5 	strdeq	r0, [r0], -r5
     9e8:	00283d05 	eoreq	r3, r8, r5, lsl #26
     9ec:	0c180000 	ldceq	0, cr0, [r8], {-0}
     9f0:	000008a8 	andeq	r0, r0, r8, lsr #17
     9f4:	00283e05 	eoreq	r3, r8, r5, lsl #28
     9f8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     9fc:	00000a42 	andeq	r0, r0, r2, asr #20
     a00:	00283f05 	eoreq	r3, r8, r5, lsl #30
     a04:	00200000 	eoreq	r0, r0, r0
     a08:	00068712 	andeq	r8, r6, r2, lsl r7
     a0c:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
     a10:	00024e48 	andeq	r4, r2, r8, asr #28
     a14:	07090c00 	streq	r0, [r9, -r0, lsl #24]
     a18:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
     a1c:	0000024e 	andeq	r0, r0, lr, asr #4
     a20:	05cd0c00 	strbeq	r0, [sp, #3072]	; 0xc00
     a24:	4a050000 	bmi	140a2c <__bss_end+0x12aefc>
     a28:	0000024e 	andeq	r0, r0, lr, asr #4
     a2c:	09801380 	stmibeq	r0, {r7, r8, r9, ip}
     a30:	4c050000 	stcmi	0, cr0, [r5], {-0}
     a34:	00000121 	andeq	r0, r0, r1, lsr #2
     a38:	ac130100 	ldfges	f0, [r3], {-0}
     a3c:	05000006 	streq	r0, [r0, #-6]
     a40:	0001214f 	andeq	r2, r1, pc, asr #2
     a44:	00010400 	andeq	r0, r1, r0, lsl #8
     a48:	00010d09 	andeq	r0, r1, r9, lsl #26
     a4c:	00025e00 	andeq	r5, r2, r0, lsl #28
     a50:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     a54:	001f0000 	andseq	r0, pc, r0
     a58:	00084212 	andeq	r4, r8, r2, lsl r2
     a5c:	05019000 	streq	r9, [r1, #-0]
     a60:	00029c5b 	andeq	r9, r2, fp, asr ip
     a64:	08e70c00 	stmiaeq	r7!, {sl, fp}^
     a68:	5c050000 	stcpl	0, cr0, [r5], {-0}
     a6c:	0000029c 	muleq	r0, ip, r2
     a70:	08ff0c00 	ldmeq	pc!, {sl, fp}^	; <UNPREDICTABLE>
     a74:	5d050000 	stcpl	0, cr0, [r5, #-0]
     a78:	00000028 	andeq	r0, r0, r8, lsr #32
     a7c:	07110c04 	ldreq	r0, [r1, -r4, lsl #24]
     a80:	5f050000 	svcpl	0x00050000
     a84:	000002a2 	andeq	r0, r0, r2, lsr #5
     a88:	06870c08 	streq	r0, [r7], r8, lsl #24
     a8c:	60050000 	andvs	r0, r5, r0
     a90:	0000020e 	andeq	r0, r0, lr, lsl #4
     a94:	040e0088 	streq	r0, [lr], #-136	; 0xffffff78
     a98:	0000025e 	andeq	r0, r0, lr, asr r2
     a9c:	0002b209 	andeq	fp, r2, r9, lsl #4
     aa0:	0002b200 	andeq	fp, r2, r0, lsl #4
     aa4:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     aa8:	001f0000 	andseq	r0, pc, r0
     aac:	02b8040e 	adcseq	r0, r8, #234881024	; 0xe000000
     ab0:	10140000 	andsne	r0, r4, r0
     ab4:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
     ab8:	de730508 	cdple	5, 7, cr0, cr3, cr8, {0}
     abc:	0c000002 	stceq	0, cr0, [r0], {2}
     ac0:	00000672 	andeq	r0, r0, r2, ror r6
     ac4:	02de7405 	sbcseq	r7, lr, #83886080	; 0x5000000
     ac8:	0c000000 	stceq	0, cr0, [r0], {-0}
     acc:	000005d9 	ldrdeq	r0, [r0], -r9
     ad0:	00287505 	eoreq	r7, r8, r5, lsl #10
     ad4:	00040000 	andeq	r0, r4, r0
     ad8:	0044040e 	subeq	r0, r4, lr, lsl #8
     adc:	d1100000 	tstle	r0, r0
     ae0:	68000008 	stmdavs	r0, {r3}
     ae4:	040eb305 	streq	fp, [lr], #-773	; 0xfffffcfb
     ae8:	5f110000 	svcpl	0x00110000
     aec:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
     af0:	000002de 	ldrdeq	r0, [r0], -lr
     af4:	725f1100 	subsvc	r1, pc, #0, 2
     af8:	28b50500 	ldmcs	r5!, {r8, sl}
     afc:	04000000 	streq	r0, [r0], #-0
     b00:	00775f11 	rsbseq	r5, r7, r1, lsl pc
     b04:	0028b605 	eoreq	fp, r8, r5, lsl #12
     b08:	0c080000 	stceq	0, cr0, [r8], {-0}
     b0c:	000006a5 	andeq	r0, r0, r5, lsr #13
     b10:	004bb705 	subeq	fp, fp, r5, lsl #14
     b14:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     b18:	00000784 	andeq	r0, r0, r4, lsl #15
     b1c:	004bb805 	subeq	fp, fp, r5, lsl #16
     b20:	110e0000 	mrsne	r0, (UNDEF: 14)
     b24:	0066625f 	rsbeq	r6, r6, pc, asr r2
     b28:	02b9b905 	adcseq	fp, r9, #81920	; 0x14000
     b2c:	0c100000 	ldceq	0, cr0, [r0], {-0}
     b30:	0000062f 	andeq	r0, r0, pc, lsr #12
     b34:	0028ba05 	eoreq	fp, r8, r5, lsl #20
     b38:	0c180000 	ldceq	0, cr0, [r8], {-0}
     b3c:	00000695 	muleq	r0, r5, r6
     b40:	010dc105 	tsteq	sp, r5, lsl #2
     b44:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     b48:	00000758 	andeq	r0, r0, r8, asr r7
     b4c:	0569c305 	strbeq	ip, [r9, #-773]!	; 0xfffffcfb
     b50:	0c200000 	stceq	0, cr0, [r0], #-0
     b54:	000007e2 	andeq	r0, r0, r2, ror #15
     b58:	0593c505 	ldreq	ip, [r3, #1285]	; 0x505
     b5c:	0c240000 	stceq	0, cr0, [r4], #-0
     b60:	00000943 	andeq	r0, r0, r3, asr #18
     b64:	05b7c805 	ldreq	ip, [r7, #2053]!	; 0x805
     b68:	0c280000 	stceq	0, cr0, [r8], #-0
     b6c:	00000a5c 	andeq	r0, r0, ip, asr sl
     b70:	05d1c905 	ldrbeq	ip, [r1, #2309]	; 0x905
     b74:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
     b78:	0062755f 	rsbeq	r7, r2, pc, asr r5
     b7c:	02b9cc05 	adcseq	ip, r9, #1280	; 0x500
     b80:	11300000 	teqne	r0, r0
     b84:	0070755f 	rsbseq	r7, r0, pc, asr r5
     b88:	02decd05 	sbcseq	ip, lr, #320	; 0x140
     b8c:	11380000 	teqne	r8, r0
     b90:	0072755f 	rsbseq	r7, r2, pc, asr r5
     b94:	0028ce05 	eoreq	ip, r8, r5, lsl #28
     b98:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     b9c:	0000066c 	andeq	r0, r0, ip, ror #12
     ba0:	05d7d105 	ldrbeq	sp, [r7, #261]	; 0x105
     ba4:	0c400000 	mareq	acc0, r0, r0
     ba8:	00000a34 	andeq	r0, r0, r4, lsr sl
     bac:	05e7d205 	strbeq	sp, [r7, #517]!	; 0x205
     bb0:	11430000 	mrsne	r0, (UNDEF: 67)
     bb4:	00626c5f 	rsbeq	r6, r2, pc, asr ip
     bb8:	02b9d505 	adcseq	sp, r9, #20971520	; 0x1400000
     bbc:	0c440000 	mareq	acc0, r0, r4
     bc0:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
     bc4:	0028d805 	eoreq	sp, r8, r5, lsl #16
     bc8:	0c4c0000 	mareq	acc0, r0, ip
     bcc:	000006cc 	andeq	r0, r0, ip, asr #13
     bd0:	007ed905 	rsbseq	sp, lr, r5, lsl #18
     bd4:	0c500000 	mraeq	r0, r0, acc0
     bd8:	000005f2 	strdeq	r0, [r0], -r2
     bdc:	042cdc05 	strteq	sp, [ip], #-3077	; 0xfffff3fb
     be0:	0c540000 	mraeq	r0, r4, acc0
     be4:	000007c8 	andeq	r0, r0, r8, asr #15
     be8:	0102e005 	tsteq	r2, r5
     bec:	0c580000 	mraeq	r0, r8, acc0
     bf0:	000008d9 	ldrdeq	r0, [r0], -r9
     bf4:	00f7e205 	rscseq	lr, r7, r5, lsl #4
     bf8:	0c5c0000 	mraeq	r0, ip, acc0
     bfc:	000007da 	ldrdeq	r0, [r0], -sl
     c00:	0028e305 	eoreq	lr, r8, r5, lsl #6
     c04:	00640000 	rsbeq	r0, r4, r0
     c08:	00002815 	andeq	r2, r0, r5, lsl r8
     c0c:	00042c00 	andeq	r2, r4, r0, lsl #24
     c10:	042c1600 	strteq	r1, [ip], #-1536	; 0xfffffa00
     c14:	0d160000 	ldceq	0, cr0, [r6, #-0]
     c18:	16000001 	strne	r0, [r0], -r1
     c1c:	0000010f 	andeq	r0, r0, pc, lsl #2
     c20:	00002816 	andeq	r2, r0, r6, lsl r8
     c24:	040e0000 	streq	r0, [lr], #-0
     c28:	00000437 	andeq	r0, r0, r7, lsr r4
     c2c:	00042c0f 	andeq	r2, r4, pc, lsl #24
     c30:	09261700 	stmdbeq	r6!, {r8, r9, sl, ip}
     c34:	04280000 	strteq	r0, [r8], #-0
     c38:	69023805 	stmdbvs	r2, {r0, r2, fp, ip, sp}
     c3c:	18000005 	stmdane	r0, {r0, r2}
     c40:	00000897 	muleq	r0, r7, r8
     c44:	28023a05 	stmdacs	r2, {r0, r2, r9, fp, ip, sp}
     c48:	00000000 	andeq	r0, r0, r0
     c4c:	0006b418 	andeq	fp, r6, r8, lsl r4
     c50:	023f0500 	eorseq	r0, pc, #0, 10
     c54:	0000063e 	andeq	r0, r0, lr, lsr r6
     c58:	07741804 	ldrbeq	r1, [r4, -r4, lsl #16]!
     c5c:	3f050000 	svccc	0x00050000
     c60:	00063e02 	andeq	r3, r6, r2, lsl #28
     c64:	39180800 	ldmdbcc	r8, {fp}
     c68:	05000007 	streq	r0, [r0, #-7]
     c6c:	063e023f 			; <UNDEFINED> instruction: 0x063e023f
     c70:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
     c74:	000008fa 	strdeq	r0, [r0], -sl
     c78:	28024105 	stmdacs	r2, {r0, r2, r8, lr}
     c7c:	10000000 	andne	r0, r0, r0
     c80:	0005e718 	andeq	lr, r5, r8, lsl r7
     c84:	02420500 	subeq	r0, r2, #0, 10
     c88:	00000820 	andeq	r0, r0, r0, lsr #16
     c8c:	09c11814 	stmibeq	r1, {r2, r4, fp, ip}^
     c90:	44050000 	strmi	r0, [r5], #-0
     c94:	00002802 	andeq	r2, r0, r2, lsl #16
     c98:	04183000 	ldreq	r3, [r8], #-0
     c9c:	05000009 	streq	r0, [r0, #-9]
     ca0:	058d0245 	streq	r0, [sp, #581]	; 0x245
     ca4:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
     ca8:	00000854 	andeq	r0, r0, r4, asr r8
     cac:	28024705 	stmdacs	r2, {r0, r2, r8, r9, sl, lr}
     cb0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     cb4:	00091418 	andeq	r1, r9, r8, lsl r4
     cb8:	02490500 	subeq	r0, r9, #0, 10
     cbc:	0000083b 	andeq	r0, r0, fp, lsr r8
     cc0:	07b3183c 			; <UNDEFINED> instruction: 0x07b3183c
     cc4:	4c050000 	stcmi	0, cr0, [r5], {-0}
     cc8:	00017f02 	andeq	r7, r1, r2, lsl #30
     ccc:	5e184000 	cdppl	0, 1, cr4, cr8, cr0, {0}
     cd0:	05000007 	streq	r0, [r0, #-7]
     cd4:	0028024d 	eoreq	r0, r8, sp, asr #4
     cd8:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
     cdc:	00000a76 	andeq	r0, r0, r6, ror sl
     ce0:	7f024e05 	svcvc	0x00024e05
     ce4:	48000001 	stmdami	r0, {r0}
     ce8:	00086618 	andeq	r6, r8, r8, lsl r6
     cec:	024f0500 	subeq	r0, pc, #0, 10
     cf0:	00000841 	andeq	r0, r0, r1, asr #16
     cf4:	077c184c 	ldrbeq	r1, [ip, -ip, asr #16]!
     cf8:	52050000 	andpl	r0, r5, #0
     cfc:	00002802 	andeq	r2, r0, r2, lsl #16
     d00:	c4185000 	ldrgt	r5, [r8], #-0
     d04:	05000006 	streq	r0, [r0, #-6]
     d08:	010f0253 	tsteq	pc, r3, asr r2	; <UNPREDICTABLE>
     d0c:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
     d10:	00000890 	muleq	r0, r0, r8
     d14:	fe027605 	cdp2	6, 0, cr7, cr2, cr5, {0}
     d18:	58000007 	stmdapl	r0, {r0, r1, r2}
     d1c:	00084219 	andeq	r4, r8, r9, lsl r2
     d20:	027a0500 	rsbseq	r0, sl, #0, 10
     d24:	0000029c 	muleq	r0, ip, r2
     d28:	91190148 	tstls	r9, r8, asr #2
     d2c:	05000007 	streq	r0, [r0, #-7]
     d30:	025e027b 	subseq	r0, lr, #-1342177273	; 0xb0000007
     d34:	014c0000 	mrseq	r0, (UNDEF: 76)
     d38:	000a1819 	andeq	r1, sl, r9, lsl r8
     d3c:	027f0500 	rsbseq	r0, pc, #0, 10
     d40:	00000852 	andeq	r0, r0, r2, asr r8
     d44:	9d1902dc 	lfmls	f0, 4, [r9, #-880]	; 0xfffffc90
     d48:	05000006 	streq	r0, [r0, #-6]
     d4c:	06030284 	streq	r0, [r3], -r4, lsl #5
     d50:	02e00000 	rsceq	r0, r0, #0
     d54:	00068219 	andeq	r8, r6, r9, lsl r2
     d58:	02850500 	addeq	r0, r5, #0, 10
     d5c:	0000085e 	andeq	r0, r0, lr, asr r8
     d60:	0e0002ec 	cdpeq	2, 0, cr0, cr0, cr12, {7}
     d64:	00040e04 	andeq	r0, r4, r4, lsl #28
     d68:	00281500 	eoreq	r1, r8, r0, lsl #10
     d6c:	058d0000 	streq	r0, [sp]
     d70:	2c160000 	ldccs	0, cr0, [r6], {-0}
     d74:	16000004 	strne	r0, [r0], -r4
     d78:	0000010d 	andeq	r0, r0, sp, lsl #2
     d7c:	00058d16 	andeq	r8, r5, r6, lsl sp
     d80:	00281600 	eoreq	r1, r8, r0, lsl #12
     d84:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     d88:	00011c04 	andeq	r1, r1, r4, lsl #24
     d8c:	6f040e00 	svcvs	0x00040e00
     d90:	15000005 	strne	r0, [r0, #-5]
     d94:	00000089 	andeq	r0, r0, r9, lsl #1
     d98:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     d9c:	00042c16 	andeq	r2, r4, r6, lsl ip
     da0:	010d1600 	tsteq	sp, r0, lsl #12
     da4:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     da8:	16000000 	strne	r0, [r0], -r0
     dac:	00000028 	andeq	r0, r0, r8, lsr #32
     db0:	99040e00 	stmdbls	r4, {r9, sl, fp}
     db4:	15000005 	strne	r0, [r0, #-5]
     db8:	00000028 	andeq	r0, r0, r8, lsr #32
     dbc:	000005d1 	ldrdeq	r0, [r0], -r1
     dc0:	00042c16 	andeq	r2, r4, r6, lsl ip
     dc4:	010d1600 	tsteq	sp, r0, lsl #12
     dc8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     dcc:	0005bd04 	andeq	fp, r5, r4, lsl #26
     dd0:	00440900 	subeq	r0, r4, r0, lsl #18
     dd4:	05e70000 	strbeq	r0, [r7, #0]!
     dd8:	cf0a0000 	svcgt	0x000a0000
     ddc:	02000000 	andeq	r0, r0, #0
     de0:	00440900 	subeq	r0, r4, r0, lsl #18
     de4:	05f70000 	ldrbeq	r0, [r7, #0]!
     de8:	cf0a0000 	svcgt	0x000a0000
     dec:	00000000 	andeq	r0, r0, r0
     df0:	08bf0600 	ldmeq	pc!, {r9, sl}	; <UNPREDICTABLE>
     df4:	1d050000 	stcne	0, cr0, [r5, #-0]
     df8:	0002e401 	andeq	lr, r2, r1, lsl #8
     dfc:	09ff1a00 	ldmibeq	pc!, {r9, fp, ip}^	; <UNPREDICTABLE>
     e00:	050c0000 	streq	r0, [ip, #-0]
     e04:	06380121 	ldrteq	r0, [r8], -r1, lsr #2
     e08:	e7180000 	ldr	r0, [r8, -r0]
     e0c:	05000008 	streq	r0, [r0, #-8]
     e10:	06380123 	ldrteq	r0, [r8], -r3, lsr #2
     e14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     e18:	0000078a 	andeq	r0, r0, sl, lsl #15
     e1c:	28012405 	stmdacs	r1, {r0, r2, sl, sp}
     e20:	04000000 	streq	r0, [r0], #-0
     e24:	0008b918 	andeq	fp, r8, r8, lsl r9
     e28:	01250500 			; <UNDEFINED> instruction: 0x01250500
     e2c:	0000063e 	andeq	r0, r0, lr, lsr r6
     e30:	040e0008 	streq	r0, [lr], #-8
     e34:	00000603 	andeq	r0, r0, r3, lsl #12
     e38:	05f7040e 	ldrbeq	r0, [r7, #1038]!	; 0x40e
     e3c:	df1a0000 	svcle	0x001a0000
     e40:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     e44:	79013d05 	stmdbvc	r1, {r0, r2, r8, sl, fp, ip, sp}
     e48:	18000006 	stmdane	r0, {r1, r2}
     e4c:	0000092d 	andeq	r0, r0, sp, lsr #18
     e50:	79013e05 	stmdbvc	r1, {r0, r2, r9, sl, fp, ip, sp}
     e54:	00000006 	andeq	r0, r0, r6
     e58:	00096d18 	andeq	r6, r9, r8, lsl sp
     e5c:	013f0500 	teqeq	pc, r0, lsl #10
     e60:	00000679 	andeq	r0, r0, r9, ror r6
     e64:	09891806 	stmibeq	r9, {r1, r2, fp, ip}
     e68:	40050000 	andmi	r0, r5, r0
     e6c:	00005201 	andeq	r5, r0, r1, lsl #4
     e70:	09000c00 	stmdbeq	r0, {sl, fp}
     e74:	00000052 	andeq	r0, r0, r2, asr r0
     e78:	00000689 	andeq	r0, r0, r9, lsl #13
     e7c:	0000cf0a 	andeq	ip, r0, sl, lsl #30
     e80:	1b000200 	blne	1688 <_start-0x6978>
     e84:	025705d0 	subseq	r0, r7, #208, 10	; 0x34000000
     e88:	0000078a 	andeq	r0, r0, sl, lsl #15
     e8c:	0009d318 	andeq	sp, r9, r8, lsl r3
     e90:	02590500 	subseq	r0, r9, #0, 10
     e94:	00000021 	andeq	r0, r0, r1, lsr #32
     e98:	09731800 	ldmdbeq	r3!, {fp, ip}^
     e9c:	5a050000 	bpl	140ea4 <__bss_end+0x12b374>
     ea0:	00010f02 	andeq	r0, r1, r2, lsl #30
     ea4:	a6180400 	ldrge	r0, [r8], -r0, lsl #8
     ea8:	05000007 	streq	r0, [r0, #-7]
     eac:	078a025b 			; <UNDEFINED> instruction: 0x078a025b
     eb0:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
     eb4:	00000a4d 	andeq	r0, r0, sp, asr #20
     eb8:	95025c05 	strls	r5, [r2, #-3077]	; 0xfffff3fb
     ebc:	24000001 	strcs	r0, [r0], #-1
     ec0:	00074918 	andeq	r4, r7, r8, lsl r9
     ec4:	025d0500 	subseq	r0, sp, #0, 10
     ec8:	00000028 	andeq	r0, r0, r8, lsr #32
     ecc:	08e21848 	stmiaeq	r2!, {r3, r6, fp, ip}^
     ed0:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
     ed4:	00006c02 	andeq	r6, r0, r2, lsl #24
     ed8:	63185000 	tstvs	r8, #0
     edc:	0500000a 	streq	r0, [r0, #-10]
     ee0:	0644025f 			; <UNDEFINED> instruction: 0x0644025f
     ee4:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
     ee8:	000008ed 	andeq	r0, r0, sp, ror #17
     eec:	f7026005 			; <UNDEFINED> instruction: 0xf7026005
     ef0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     ef4:	000a6818 	andeq	r6, sl, r8, lsl r8
     ef8:	02610500 	rsbeq	r0, r1, #0, 10
     efc:	000000f7 	strdeq	r0, [r0], -r7
     f00:	06551870 			; <UNDEFINED> instruction: 0x06551870
     f04:	62050000 	andvs	r0, r5, #0
     f08:	0000f702 	andeq	pc, r0, r2, lsl #14
     f0c:	0e187800 	cdpeq	8, 1, cr7, cr8, cr0, {0}
     f10:	0500000a 	streq	r0, [r0, #-10]
     f14:	079a0263 	ldreq	r0, [sl, r3, ror #4]
     f18:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
     f1c:	0000079a 	muleq	r0, sl, r7
     f20:	aa026405 	bge	99f3c <__bss_end+0x8440c>
     f24:	88000007 	stmdahi	r0, {r0, r1, r2}
     f28:	0009a118 	andeq	sl, r9, r8, lsl r1
     f2c:	02650500 	rsbeq	r0, r5, #0, 10
     f30:	00000028 	andeq	r0, r0, r8, lsr #32
     f34:	06fb18a0 	ldrbteq	r1, [fp], r0, lsr #17
     f38:	66050000 	strvs	r0, [r5], -r0
     f3c:	0000f702 	andeq	pc, r0, r2, lsl #14
     f40:	4618a400 	ldrmi	sl, [r8], -r0, lsl #8
     f44:	05000006 	streq	r0, [r0, #-6]
     f48:	00f70267 	rscseq	r0, r7, r7, ror #4
     f4c:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
     f50:	000006ea 	andeq	r0, r0, sl, ror #13
     f54:	f7026805 			; <UNDEFINED> instruction: 0xf7026805
     f58:	b4000000 	strlt	r0, [r0], #-0
     f5c:	0005f818 	andeq	pc, r5, r8, lsl r8	; <UNPREDICTABLE>
     f60:	02690500 	rsbeq	r0, r9, #0, 10
     f64:	000000f7 	strdeq	r0, [r0], -r7
     f68:	060718bc 			; <UNDEFINED> instruction: 0x060718bc
     f6c:	6a050000 	bvs	140f74 <__bss_end+0x12b444>
     f70:	0000f702 	andeq	pc, r0, r2, lsl #14
     f74:	9518c400 	ldrls	ip, [r8, #-1024]	; 0xfffffc00
     f78:	05000008 	streq	r0, [r0, #-8]
     f7c:	0028026b 	eoreq	r0, r8, fp, ror #4
     f80:	00cc0000 	sbceq	r0, ip, r0
     f84:	00011509 	andeq	r1, r1, r9, lsl #10
     f88:	00079a00 	andeq	r9, r7, r0, lsl #20
     f8c:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     f90:	00190000 	andseq	r0, r9, r0
     f94:	00011509 	andeq	r1, r1, r9, lsl #10
     f98:	0007aa00 	andeq	sl, r7, r0, lsl #20
     f9c:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     fa0:	00070000 	andeq	r0, r7, r0
     fa4:	00011509 	andeq	r1, r1, r9, lsl #10
     fa8:	0007ba00 	andeq	fp, r7, r0, lsl #20
     fac:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     fb0:	00170000 	andseq	r0, r7, r0
     fb4:	7005f01b 	andvc	pc, r5, fp, lsl r0	; <UNPREDICTABLE>
     fb8:	0007de02 	andeq	sp, r7, r2, lsl #28
     fbc:	08321800 	ldmdaeq	r2!, {fp, ip}
     fc0:	73050000 	movwvc	r0, #20480	; 0x5000
     fc4:	0007de02 	andeq	sp, r7, r2, lsl #28
     fc8:	05180000 	ldreq	r0, [r8, #-0]
     fcc:	0500000a 	streq	r0, [r0, #-10]
     fd0:	07ee0274 			; <UNDEFINED> instruction: 0x07ee0274
     fd4:	00780000 	rsbseq	r0, r8, r0
     fd8:	0002de09 	andeq	sp, r2, r9, lsl #28
     fdc:	0007ee00 	andeq	lr, r7, r0, lsl #28
     fe0:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     fe4:	001d0000 	andseq	r0, sp, r0
     fe8:	00002109 	andeq	r2, r0, r9, lsl #2
     fec:	0007fe00 	andeq	pc, r7, r0, lsl #28
     ff0:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     ff4:	001d0000 	andseq	r0, sp, r0
     ff8:	5505f01c 	strpl	pc, [r5, #-28]	; 0xffffffe4
     ffc:	00082002 	andeq	r2, r8, r2
    1000:	09261d00 	stmdbeq	r6!, {r8, sl, fp, ip}
    1004:	6c050000 	stcvs	0, cr0, [r5], {-0}
    1008:	00068902 	andeq	r8, r6, r2, lsl #18
    100c:	0a3a1d00 	beq	e88414 <__bss_end+0xe728e4>
    1010:	75050000 	strvc	r0, [r5, #-0]
    1014:	0007ba02 	andeq	fp, r7, r2, lsl #20
    1018:	15090000 	strne	r0, [r9, #-0]
    101c:	30000001 	andcc	r0, r0, r1
    1020:	0a000008 	beq	1048 <_start-0x6fb8>
    1024:	000000cf 	andeq	r0, r0, pc, asr #1
    1028:	3b1e0018 	blcc	781090 <__bss_end+0x76b560>
    102c:	16000008 	strne	r0, [r0], -r8
    1030:	0000042c 	andeq	r0, r0, ip, lsr #8
    1034:	30040e00 	andcc	r0, r4, r0, lsl #28
    1038:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    103c:	00017f04 	andeq	r7, r1, r4, lsl #30
    1040:	08521e00 	ldmdaeq	r2, {r9, sl, fp, ip}^
    1044:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
    1048:	00000000 	andeq	r0, r0, r0
    104c:	0858040e 	ldmdaeq	r8, {r1, r2, r3, sl}^
    1050:	040e0000 	streq	r0, [lr], #-0
    1054:	00000847 	andeq	r0, r0, r7, asr #16
    1058:	0005f709 	andeq	pc, r5, r9, lsl #14
    105c:	00086e00 	andeq	r6, r8, r0, lsl #28
    1060:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
    1064:	00020000 	andeq	r0, r2, r0
    1068:	0009b51f 	andeq	fp, r9, pc, lsl r5
    106c:	02fd0500 	rscseq	r0, sp, #0, 10
    1070:	0000042c 	andeq	r0, r0, ip, lsr #8
    1074:	0009ae1f 	andeq	sl, r9, pc, lsl lr
    1078:	02fe0500 	rscseq	r0, lr, #0, 10
    107c:	00000432 	andeq	r0, r0, r2, lsr r4
    1080:	00084a20 	andeq	r4, r8, r0, lsr #20
    1084:	0f5f0600 	svceq	0x005f0600
    1088:	05000001 	streq	r0, [r0, #-1]
    108c:	0000000c 	andeq	r0, r0, ip
    1090:	00606107 	rsbeq	r6, r0, r7, lsl #2
    1094:	2a100000 	bcs	40109c <__bss_end+0x3eb56c>
    1098:	14000003 	strne	r0, [r0], #-3
    109c:	08e56908 	stmiaeq	r5!, {r3, r8, fp, sp, lr}^
    10a0:	dd0c0000 	stcle	0, cr0, [ip, #-0]
    10a4:	08000002 	stmdaeq	r0, {r1}
    10a8:	0008916b 	andeq	r9, r8, fp, ror #2
    10ac:	b70c0000 	strlt	r0, [ip, -r0]
    10b0:	08000004 	stmdaeq	r0, {r2}
    10b4:	0008ea6c 	andeq	lr, r8, ip, ror #20
    10b8:	ce0c0400 	cfcpysgt	mvf0, mvf12
    10bc:	08000003 	stmdaeq	r0, {r0, r1}
    10c0:	0008ea6d 	andeq	lr, r8, sp, ror #20
    10c4:	ff0c0800 			; <UNDEFINED> instruction: 0xff0c0800
    10c8:	08000002 	stmdaeq	r0, {r1}
    10cc:	00010d6e 	andeq	r0, r1, lr, ror #26
    10d0:	a80c0c00 	stmdage	ip, {sl, fp}
    10d4:	08000002 	stmdaeq	r0, {r1}
    10d8:	00010d6f 	andeq	r0, r1, pc, ror #26
    10dc:	04001000 	streq	r1, [r0], #-0
    10e0:	0000089c 	muleq	r0, ip, r8
    10e4:	08e5040e 	stmiaeq	r5!, {r1, r2, r3, sl}^
    10e8:	ca050000 	bgt	1410f0 <__bss_end+0x12b5c0>
    10ec:	08000004 	stmdaeq	r0, {r2}
    10f0:	00089c71 	andeq	r9, r8, r1, ror ip
    10f4:	08f00400 	ldmeq	r0!, {sl}^
    10f8:	26100000 	ldrcs	r0, [r0], -r0
    10fc:	0c000005 	stceq	0, cr0, [r0], {5}
    1100:	09317308 	ldmdbeq	r1!, {r3, r8, r9, ip, sp, lr}
    1104:	dd0c0000 	stcle	0, cr0, [ip, #-0]
    1108:	08000002 	stmdaeq	r0, {r1}
    110c:	00089175 	andeq	r9, r8, r5, ror r1
    1110:	b70c0000 	strlt	r0, [ip, -r0]
    1114:	08000004 	stmdaeq	r0, {r2}
    1118:	0008ea76 	andeq	lr, r8, r6, ror sl
    111c:	ce0c0400 	cfcpysgt	mvf0, mvf12
    1120:	08000003 	stmdaeq	r0, {r0, r1}
    1124:	0008ea77 	andeq	lr, r8, r7, ror sl
    1128:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    112c:	0000043e 	andeq	r0, r0, lr, lsr r4
    1130:	09007908 	stmdbeq	r0, {r3, r8, fp, ip, sp, lr}
    1134:	31040000 	mrscc	r0, (UNDEF: 4)
    1138:	10000009 	andne	r0, r0, r9
    113c:	00000536 	andeq	r0, r0, r6, lsr r5
    1140:	727e0814 	rsbsvc	r0, lr, #20, 16	; 0x140000
    1144:	0c000009 	stceq	0, cr0, [r0], {9}
    1148:	0000045d 	andeq	r0, r0, sp, asr r4
    114c:	00678008 	rsbeq	r8, r7, r8
    1150:	0c000000 	stceq	0, cr0, [r0], {-0}
    1154:	000002d5 	ldrdeq	r0, [r0], -r5
    1158:	09728108 	ldmdbeq	r2!, {r3, r8, pc}^
    115c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1160:	000002f6 	strdeq	r0, [r0], -r6
    1164:	093c8208 	ldmdbeq	ip!, {r3, r9, pc}
    1168:	00080000 	andeq	r0, r8, r0
    116c:	08fb040e 	ldmeq	fp!, {r1, r2, r3, sl}^
    1170:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    1174:	08000009 	stmdaeq	r0, {r0, r3}
    1178:	00094183 	andeq	r4, r9, r3, lsl #3
    117c:	07ce2100 	strbeq	r2, [lr, r0, lsl #2]
    1180:	b7010000 	strlt	r0, [r1, -r0]
    1184:	00010f58 	andeq	r0, r1, r8, asr pc
    1188:	00000098 	muleq	r0, r8, r0
    118c:	09b59c01 	ldmibeq	r5!, {r0, sl, fp, ip, pc}
    1190:	23220000 			; <UNDEFINED> instruction: 0x23220000
    1194:	01000008 	tsteq	r0, r8
    1198:	0009b5b7 			; <UNDEFINED> instruction: 0x0009b5b7
    119c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11a0:	00095d23 	andeq	r5, r9, r3, lsr #26
    11a4:	bbb90100 	bllt	fee415ac <_estack+0xf6e315ac>
    11a8:	02000009 	andeq	r0, r0, #9
    11ac:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
    11b0:	0008f004 	andeq	pc, r8, r4
    11b4:	78040e00 	stmdavc	r4, {r9, sl, fp}
    11b8:	21000009 	tstcs	r0, r9
    11bc:	00000949 	andeq	r0, r0, r9, asr #18
    11c0:	0e807e01 	cdpeq	14, 8, cr7, cr0, cr1, {0}
    11c4:	00d80001 	sbcseq	r0, r8, r1
    11c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    11cc:	00000a0f 	andeq	r0, r0, pc, lsl #20
    11d0:	00095d22 	andeq	r5, r9, r2, lsr #26
    11d4:	bb7e0100 	bllt	1f815dc <__bss_end+0x1f6baac>
    11d8:	02000009 	andeq	r0, r0, #9
    11dc:	38226c91 	stmdacc	r2!, {r0, r4, r7, sl, fp, sp, lr}
    11e0:	01000006 	tsteq	r0, r6
    11e4:	0009b57e 	andeq	fp, r9, lr, ror r5
    11e8:	68910200 	ldmvs	r1, {r9}
    11ec:	00098e23 	andeq	r8, r9, r3, lsr #28
    11f0:	72800100 	addvc	r0, r0, #0, 2
    11f4:	02000009 	andeq	r0, r0, #9
    11f8:	22237491 	eorcs	r7, r3, #-1862270976	; 0x91000000
    11fc:	0100000a 	tsteq	r0, sl
    1200:	00089181 	andeq	r9, r8, r1, lsl #3
    1204:	70910200 	addsvc	r0, r1, r0, lsl #4
    1208:	06db2100 	ldrbeq	r2, [fp], r0, lsl #2
    120c:	67010000 	strvs	r0, [r1, -r0]
    1210:	00010de8 	andeq	r0, r1, r8, ror #27
    1214:	00000098 	muleq	r0, r8, r0
    1218:	0a4f9c01 	beq	13e8224 <__bss_end+0x13d26f4>
    121c:	5d220000 	stcpl	0, cr0, [r2, #-0]
    1220:	01000009 	tsteq	r0, r9
    1224:	0009bb67 	andeq	fp, r9, r7, ror #22
    1228:	6c910200 	lfmvs	f0, 4, [r1], {0}
    122c:	00063822 	andeq	r3, r6, r2, lsr #16
    1230:	b5670100 	strblt	r0, [r7, #-256]!	; 0xffffff00
    1234:	02000009 	andeq	r0, r0, #9
    1238:	d5236891 	strle	r6, [r3, #-2193]!	; 0xfffff76f
    123c:	01000002 	tsteq	r0, r2
    1240:	00097269 	andeq	r7, r9, r9, ror #4
    1244:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1248:	07162100 	ldreq	r2, [r6, -r0, lsl #2]
    124c:	60010000 	andvs	r0, r1, r0
    1250:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
    1254:	0000002c 	andeq	r0, r0, ip, lsr #32
    1258:	0a739c01 	beq	1ce8264 <__bss_end+0x1cd2734>
    125c:	d4220000 	strtle	r0, [r2], #-0
    1260:	01000006 	tsteq	r0, r6
    1264:	0009b560 	andeq	fp, r9, r0, ror #10
    1268:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    126c:	09e02400 	stmibeq	r0!, {sl, sp}^
    1270:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1274:	00010d54 	andeq	r0, r1, r4, asr sp
    1278:	00000068 	andeq	r0, r0, r8, rrx
    127c:	5d229c01 	stcpl	12, cr9, [r2, #-4]!
    1280:	01000009 	tsteq	r0, r9
    1284:	0009bb4c 	andeq	fp, r9, ip, asr #22
    1288:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    128c:	0f2d0000 	svceq	0x002d0000
    1290:	00040000 	andeq	r0, r4, r0
    1294:	00000552 	andeq	r0, r0, r2, asr r5
    1298:	00e50104 	rsceq	r0, r5, r4, lsl #2
    129c:	2f0c0000 	svccs	0x000c0000
    12a0:	f000000b 			; <UNDEFINED> instruction: 0xf000000b
    12a4:	b000010f 	andlt	r0, r0, pc, lsl #2
    12a8:	3000000b 	andcc	r0, r0, fp
    12ac:	02000005 	andeq	r0, r0, #5
    12b0:	00000ae2 	andeq	r0, r0, r2, ror #21
    12b4:	002cd802 	eoreq	sp, ip, r2, lsl #16
    12b8:	04030000 	streq	r0, [r3], #-0
    12bc:	00062207 	andeq	r2, r6, r7, lsl #4
    12c0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    12c4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    12c8:	2f050803 	svccs	0x00050803
    12cc:	03000001 	movweq	r0, #1
    12d0:	015d0408 	cmpeq	sp, r8, lsl #8
    12d4:	01030000 	mrseq	r0, (UNDEF: 3)
    12d8:	00088406 	andeq	r8, r8, r6, lsl #8
    12dc:	08010300 	stmdaeq	r1, {r8, r9}
    12e0:	00000882 	andeq	r0, r0, r2, lsl #17
    12e4:	9e050203 	cdpls	2, 0, cr0, cr5, cr3, {0}
    12e8:	03000008 	movweq	r0, #8
    12ec:	00590702 	subseq	r0, r9, r2, lsl #14
    12f0:	04030000 	streq	r0, [r3], #-0
    12f4:	00013405 	andeq	r3, r1, r5, lsl #8
    12f8:	00640500 	rsbeq	r0, r4, r0, lsl #10
    12fc:	04030000 	streq	r0, [r3], #-0
    1300:	00061d07 	andeq	r1, r6, r7, lsl #26
    1304:	00700500 	rsbseq	r0, r0, r0, lsl #10
    1308:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    130c:	00061807 	andeq	r1, r6, r7, lsl #16
    1310:	08700200 	ldmdaeq	r0!, {r9}^
    1314:	07030000 	streq	r0, [r3, -r0]
    1318:	00000033 	andeq	r0, r0, r3, lsr r0
    131c:	00085f02 	andeq	r5, r8, r2, lsl #30
    1320:	642c0400 	strtvs	r0, [ip], #-1024	; 0xfffffc00
    1324:	02000000 	andeq	r0, r0, #0
    1328:	00000955 	andeq	r0, r0, r5, asr r9
    132c:	00647204 	rsbeq	r7, r4, r4, lsl #4
    1330:	c1060000 	mrsgt	r0, (UNDEF: 6)
    1334:	02000007 	andeq	r0, r0, #7
    1338:	002c0165 	eoreq	r0, ip, r5, ror #2
    133c:	04070000 	streq	r0, [r7], #-0
    1340:	00cfa604 	sbceq	sl, pc, r4, lsl #12
    1344:	bb080000 	bllt	20134c <__bss_end+0x1eb81c>
    1348:	04000007 	streq	r0, [r0], #-7
    134c:	0000a4a8 	andeq	sl, r0, r8, lsr #9
    1350:	076d0800 	strbeq	r0, [sp, -r0, lsl #16]!
    1354:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    1358:	000000cf 	andeq	r0, r0, pc, asr #1
    135c:	004f0900 	subeq	r0, pc, r0, lsl #18
    1360:	00df0000 	sbcseq	r0, pc, r0
    1364:	df0a0000 	svcle	0x000a0000
    1368:	03000000 	movweq	r0, #0
    136c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1370:	000000dc 	ldrdeq	r0, [r0], -ip
    1374:	a304080b 	movwge	r0, #18443	; 0x480b
    1378:	00000107 	andeq	r0, r0, r7, lsl #2
    137c:	0009330c 	andeq	r3, r9, ip, lsl #6
    1380:	33a50400 			; <UNDEFINED> instruction: 0x33a50400
    1384:	00000000 	andeq	r0, r0, r0
    1388:	00093b0c 	andeq	r3, r9, ip, lsl #22
    138c:	b0aa0400 	adclt	r0, sl, r0, lsl #8
    1390:	04000000 	streq	r0, [r0], #-0
    1394:	08c60200 	stmiaeq	r6, {r9}^
    1398:	ab040000 	blge	1013a0 <__bss_end+0xeb870>
    139c:	000000e6 	andeq	r0, r0, r6, ror #1
    13a0:	00073002 	andeq	r3, r7, r2
    13a4:	83af0400 			; <UNDEFINED> instruction: 0x83af0400
    13a8:	0d000000 	stceq	0, cr0, [r0, #-0]
    13ac:	011d0e04 	tsteq	sp, r4, lsl #28
    13b0:	040f0000 	streq	r0, [pc], #-0	; 13b8 <_start-0x6c48>
    13b4:	0000012a 	andeq	r0, r0, sl, lsr #2
    13b8:	8b080103 	blhi	2017cc <__bss_end+0x1ebc9c>
    13bc:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    13c0:	0000012a 	andeq	r0, r0, sl, lsr #2
    13c4:	00099902 	andeq	r9, r9, r2, lsl #18
    13c8:	70160500 	andsvc	r0, r6, r0, lsl #10
    13cc:	10000000 	andne	r0, r0, r0
    13d0:	00000741 	andeq	r0, r0, r1, asr #14
    13d4:	942d0518 	strtls	r0, [sp], #-1304	; 0xfffffae8
    13d8:	0c000001 	stceq	0, cr0, [r0], {1}
    13dc:	000008e7 	andeq	r0, r0, r7, ror #17
    13e0:	01942f05 	orrseq	r2, r4, r5, lsl #30
    13e4:	11000000 	mrsne	r0, (UNDEF: 0)
    13e8:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    13ec:	00003330 	andeq	r3, r0, r0, lsr r3
    13f0:	1e0c0400 	cfcpysne	mvf0, mvf12
    13f4:	05000009 	streq	r0, [r0, #-9]
    13f8:	00003330 	andeq	r3, r0, r0, lsr r3
    13fc:	2a0c0800 	bcs	303404 <__bss_end+0x2ed8d4>
    1400:	05000007 	streq	r0, [r0, #-7]
    1404:	00003330 	andeq	r3, r0, r0, lsr r3
    1408:	f00c0c00 			; <UNDEFINED> instruction: 0xf00c0c00
    140c:	05000009 	streq	r0, [r0, #-9]
    1410:	00003330 	andeq	r3, r0, r0, lsr r3
    1414:	5f111000 	svcpl	0x00111000
    1418:	31050078 	tstcc	r5, r8, ror r0
    141c:	0000019a 	muleq	r0, sl, r1
    1420:	040f0014 	streq	r0, [pc], #-20	; 1428 <_start-0x6bd8>
    1424:	00000141 	andeq	r0, r0, r1, asr #2
    1428:	00013609 	andeq	r3, r1, r9, lsl #12
    142c:	0001aa00 	andeq	sl, r1, r0, lsl #20
    1430:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    1434:	00000000 	andeq	r0, r0, r0
    1438:	00076810 	andeq	r6, r7, r0, lsl r8
    143c:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
    1440:	00000223 	andeq	r0, r0, r3, lsr #4
    1444:	0006630c 	andeq	r6, r6, ip, lsl #6
    1448:	33370500 	teqcc	r7, #0, 10
    144c:	00000000 	andeq	r0, r0, r0
    1450:	0009640c 	andeq	r6, r9, ip, lsl #8
    1454:	33380500 	teqcc	r8, #0, 10
    1458:	04000000 	streq	r0, [r0], #-0
    145c:	0006780c 	andeq	r7, r6, ip, lsl #16
    1460:	33390500 	teqcc	r9, #0, 10
    1464:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1468:	000a7b0c 	andeq	r7, sl, ip, lsl #22
    146c:	333a0500 	teqcc	sl, #0, 10
    1470:	0c000000 	stceq	0, cr0, [r0], {-0}
    1474:	0008390c 	andeq	r3, r8, ip, lsl #18
    1478:	333b0500 	teqcc	fp, #0, 10
    147c:	10000000 	andne	r0, r0, r0
    1480:	0007e90c 	andeq	lr, r7, ip, lsl #18
    1484:	333c0500 	teqcc	ip, #0, 10
    1488:	14000000 	strne	r0, [r0], #-0
    148c:	0009f50c 	andeq	pc, r9, ip, lsl #10
    1490:	333d0500 	teqcc	sp, #0, 10
    1494:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1498:	0008a80c 	andeq	sl, r8, ip, lsl #16
    149c:	333e0500 	teqcc	lr, #0, 10
    14a0:	1c000000 	stcne	0, cr0, [r0], {-0}
    14a4:	000a420c 	andeq	r4, sl, ip, lsl #4
    14a8:	333f0500 	teqcc	pc, #0, 10
    14ac:	20000000 	andcs	r0, r0, r0
    14b0:	06871200 	streq	r1, [r7], r0, lsl #4
    14b4:	01080000 	mrseq	r0, (UNDEF: 8)
    14b8:	02634805 	rsbeq	r4, r3, #327680	; 0x50000
    14bc:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    14c0:	05000007 	streq	r0, [r0, #-7]
    14c4:	00026349 	andeq	r6, r2, r9, asr #6
    14c8:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
    14cc:	05000005 	streq	r0, [r0, #-5]
    14d0:	0002634a 	andeq	r6, r2, sl, asr #6
    14d4:	80138000 	andshi	r8, r3, r0
    14d8:	05000009 	streq	r0, [r0, #-9]
    14dc:	0001364c 	andeq	r3, r1, ip, asr #12
    14e0:	13010000 	movwne	r0, #4096	; 0x1000
    14e4:	000006ac 	andeq	r0, r0, ip, lsr #13
    14e8:	01364f05 	teqeq	r6, r5, lsl #30
    14ec:	01040000 	mrseq	r0, (UNDEF: 4)
    14f0:	011d0900 	tsteq	sp, r0, lsl #18
    14f4:	02730000 	rsbseq	r0, r3, #0
    14f8:	df0a0000 	svcle	0x000a0000
    14fc:	1f000000 	svcne	0x00000000
    1500:	08421200 	stmdaeq	r2, {r9, ip}^
    1504:	01900000 	orrseq	r0, r0, r0
    1508:	02b15b05 	adcseq	r5, r1, #5120	; 0x1400
    150c:	e70c0000 	str	r0, [ip, -r0]
    1510:	05000008 	streq	r0, [r0, #-8]
    1514:	0002b15c 	andeq	fp, r2, ip, asr r1
    1518:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
    151c:	05000008 	streq	r0, [r0, #-8]
    1520:	0000335d 	andeq	r3, r0, sp, asr r3
    1524:	110c0400 	tstne	ip, r0, lsl #8
    1528:	05000007 	streq	r0, [r0, #-7]
    152c:	0002b75f 	andeq	fp, r2, pc, asr r7
    1530:	870c0800 	strhi	r0, [ip, -r0, lsl #16]
    1534:	05000006 	streq	r0, [r0, #-6]
    1538:	00022360 	andeq	r2, r2, r0, ror #6
    153c:	0f008800 	svceq	0x00008800
    1540:	00027304 	andeq	r7, r2, r4, lsl #6
    1544:	02c70900 	sbceq	r0, r7, #0, 18
    1548:	02c70000 	sbceq	r0, r7, #0
    154c:	df0a0000 	svcle	0x000a0000
    1550:	1f000000 	svcne	0x00000000
    1554:	cd040f00 	stcgt	15, cr0, [r4, #-0]
    1558:	14000002 	strne	r0, [r0], #-2
    155c:	0008b210 	andeq	fp, r8, r0, lsl r2
    1560:	73050800 	movwvc	r0, #22528	; 0x5800
    1564:	000002f3 	strdeq	r0, [r0], -r3
    1568:	0006720c 	andeq	r7, r6, ip, lsl #4
    156c:	f3740500 	vrshl.u64	d16, d0, d4
    1570:	00000002 	andeq	r0, r0, r2
    1574:	0005d90c 	andeq	sp, r5, ip, lsl #18
    1578:	33750500 	cmncc	r5, #0, 10
    157c:	04000000 	streq	r0, [r0], #-0
    1580:	4f040f00 	svcmi	0x00040f00
    1584:	10000000 	andne	r0, r0, r0
    1588:	000008d1 	ldrdeq	r0, [r0], -r1
    158c:	23b30568 			; <UNDEFINED> instruction: 0x23b30568
    1590:	11000004 	tstne	r0, r4
    1594:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    1598:	0002f3b4 			; <UNDEFINED> instruction: 0x0002f3b4
    159c:	5f110000 	svcpl	0x00110000
    15a0:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    15a4:	00000033 	andeq	r0, r0, r3, lsr r0
    15a8:	775f1104 	ldrbvc	r1, [pc, -r4, lsl #2]
    15ac:	33b60500 			; <UNDEFINED> instruction: 0x33b60500
    15b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    15b4:	0006a50c 	andeq	sl, r6, ip, lsl #10
    15b8:	56b70500 	ldrtpl	r0, [r7], r0, lsl #10
    15bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    15c0:	0007840c 	andeq	r8, r7, ip, lsl #8
    15c4:	56b80500 	ldrtpl	r0, [r8], r0, lsl #10
    15c8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    15cc:	66625f11 	uqadd16vs	r5, r2, r1
    15d0:	ceb90500 	cdpgt	5, 11, cr0, cr9, cr0, {0}
    15d4:	10000002 	andne	r0, r0, r2
    15d8:	00062f0c 	andeq	r2, r6, ip, lsl #30
    15dc:	33ba0500 			; <UNDEFINED> instruction: 0x33ba0500
    15e0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    15e4:	0006950c 	andeq	r9, r6, ip, lsl #10
    15e8:	1dc10500 	cfstr64ne	mvdx0, [r1]
    15ec:	1c000001 	stcne	0, cr0, [r0], {1}
    15f0:	0007580c 	andeq	r5, r7, ip, lsl #16
    15f4:	7ec30500 	cdpvc	5, 12, cr0, cr3, cr0, {0}
    15f8:	20000005 	andcs	r0, r0, r5
    15fc:	0007e20c 	andeq	lr, r7, ip, lsl #4
    1600:	a8c50500 	stmiage	r5, {r8, sl}^
    1604:	24000005 	strcs	r0, [r0], #-5
    1608:	0009430c 	andeq	r4, r9, ip, lsl #6
    160c:	ccc80500 	cfstr64gt	mvdx0, [r8], {0}
    1610:	28000005 	stmdacs	r0, {r0, r2}
    1614:	000a5c0c 	andeq	r5, sl, ip, lsl #24
    1618:	e6c90500 	strb	r0, [r9], r0, lsl #10
    161c:	2c000005 	stccs	0, cr0, [r0], {5}
    1620:	62755f11 	rsbsvs	r5, r5, #17, 30	; 0x44
    1624:	cecc0500 	cdpgt	5, 12, cr0, cr12, cr0, {0}
    1628:	30000002 	andcc	r0, r0, r2
    162c:	70755f11 	rsbsvc	r5, r5, r1, lsl pc
    1630:	f3cd0500 	vabal.u8	q8, d13, d0
    1634:	38000002 	stmdacc	r0, {r1}
    1638:	72755f11 	rsbsvc	r5, r5, #17, 30	; 0x44
    163c:	33ce0500 	biccc	r0, lr, #0, 10
    1640:	3c000000 	stccc	0, cr0, [r0], {-0}
    1644:	00066c0c 	andeq	r6, r6, ip, lsl #24
    1648:	ecd10500 	cfldr64	mvdx0, [r1], {0}
    164c:	40000005 	andmi	r0, r0, r5
    1650:	000a340c 	andeq	r3, sl, ip, lsl #8
    1654:	fcd20500 	ldc2l	5, cr0, [r2], {0}
    1658:	43000005 	movwmi	r0, #5
    165c:	626c5f11 	rsbvs	r5, ip, #17, 30	; 0x44
    1660:	ced50500 	cdpgt	5, 13, cr0, cr5, cr0, {0}
    1664:	44000002 	strmi	r0, [r0], #-2
    1668:	0006bb0c 	andeq	fp, r6, ip, lsl #22
    166c:	33d80500 	bicscc	r0, r8, #0, 10
    1670:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1674:	0006cc0c 	andeq	ip, r6, ip, lsl #24
    1678:	8ed90500 	cdphi	5, 13, cr0, cr9, cr0, {0}
    167c:	50000000 	andpl	r0, r0, r0
    1680:	0005f20c 	andeq	pc, r5, ip, lsl #4
    1684:	41dc0500 	bicsmi	r0, ip, r0, lsl #10
    1688:	54000004 	strpl	r0, [r0], #-4
    168c:	0007c80c 	andeq	ip, r7, ip, lsl #16
    1690:	12e00500 	rscne	r0, r0, #0, 10
    1694:	58000001 	stmdapl	r0, {r0}
    1698:	0008d90c 	andeq	sp, r8, ip, lsl #18
    169c:	07e20500 	strbeq	r0, [r2, r0, lsl #10]!
    16a0:	5c000001 	stcpl	0, cr0, [r0], {1}
    16a4:	0007da0c 	andeq	sp, r7, ip, lsl #20
    16a8:	33e30500 	mvncc	r0, #0, 10
    16ac:	64000000 	strvs	r0, [r0], #-0
    16b0:	00331500 	eorseq	r1, r3, r0, lsl #10
    16b4:	04410000 	strbeq	r0, [r1], #-0
    16b8:	41160000 	tstmi	r6, r0
    16bc:	16000004 	strne	r0, [r0], -r4
    16c0:	0000011d 	andeq	r0, r0, sp, lsl r1
    16c4:	00012416 	andeq	r2, r1, r6, lsl r4
    16c8:	00331600 	eorseq	r1, r3, r0, lsl #12
    16cc:	0f000000 	svceq	0x00000000
    16d0:	00044c04 	andeq	r4, r4, r4, lsl #24
    16d4:	04410e00 	strbeq	r0, [r1], #-3584	; 0xfffff200
    16d8:	26170000 	ldrcs	r0, [r7], -r0
    16dc:	28000009 	stmdacs	r0, {r0, r3}
    16e0:	02380504 	eorseq	r0, r8, #4, 10	; 0x1000000
    16e4:	0000057e 	andeq	r0, r0, lr, ror r5
    16e8:	00089718 	andeq	r9, r8, r8, lsl r7
    16ec:	023a0500 	eorseq	r0, sl, #0, 10
    16f0:	00000033 	andeq	r0, r0, r3, lsr r0
    16f4:	06b41800 	ldrteq	r1, [r4], r0, lsl #16
    16f8:	3f050000 	svccc	0x00050000
    16fc:	00065302 	andeq	r5, r6, r2, lsl #6
    1700:	74180400 	ldrvc	r0, [r8], #-1024	; 0xfffffc00
    1704:	05000007 	streq	r0, [r0, #-7]
    1708:	0653023f 			; <UNDEFINED> instruction: 0x0653023f
    170c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1710:	00000739 	andeq	r0, r0, r9, lsr r7
    1714:	53023f05 	movwpl	r3, #12037	; 0x2f05
    1718:	0c000006 	stceq	0, cr0, [r0], {6}
    171c:	0008fa18 	andeq	pc, r8, r8, lsl sl	; <UNPREDICTABLE>
    1720:	02410500 	subeq	r0, r1, #0, 10
    1724:	00000033 	andeq	r0, r0, r3, lsr r0
    1728:	05e71810 	strbeq	r1, [r7, #2064]!	; 0x810
    172c:	42050000 	andmi	r0, r5, #0
    1730:	00083502 	andeq	r3, r8, r2, lsl #10
    1734:	c1181400 	tstgt	r8, r0, lsl #8
    1738:	05000009 	streq	r0, [r0, #-9]
    173c:	00330244 	eorseq	r0, r3, r4, asr #4
    1740:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    1744:	00000904 	andeq	r0, r0, r4, lsl #18
    1748:	a2024505 	andge	r4, r2, #20971520	; 0x1400000
    174c:	34000005 	strcc	r0, [r0], #-5
    1750:	00085418 	andeq	r5, r8, r8, lsl r4
    1754:	02470500 	subeq	r0, r7, #0, 10
    1758:	00000033 	andeq	r0, r0, r3, lsr r0
    175c:	09141838 	ldmdbeq	r4, {r3, r4, r5, fp, ip}
    1760:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    1764:	00085002 	andeq	r5, r8, r2
    1768:	b3183c00 	tstlt	r8, #0, 24
    176c:	05000007 	streq	r0, [r0, #-7]
    1770:	0194024c 	orrseq	r0, r4, ip, asr #4
    1774:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    1778:	0000075e 	andeq	r0, r0, lr, asr r7
    177c:	33024d05 	movwcc	r4, #11525	; 0x2d05
    1780:	44000000 	strmi	r0, [r0], #-0
    1784:	000a7618 	andeq	r7, sl, r8, lsl r6
    1788:	024e0500 	subeq	r0, lr, #0, 10
    178c:	00000194 	muleq	r0, r4, r1
    1790:	08661848 	stmdaeq	r6!, {r3, r6, fp, ip}^
    1794:	4f050000 	svcmi	0x00050000
    1798:	00085602 	andeq	r5, r8, r2, lsl #12
    179c:	7c184c00 	ldcvc	12, cr4, [r8], {-0}
    17a0:	05000007 	streq	r0, [r0, #-7]
    17a4:	00330252 	eorseq	r0, r3, r2, asr r2
    17a8:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    17ac:	000006c4 	andeq	r0, r0, r4, asr #13
    17b0:	24025305 	strcs	r5, [r2], #-773	; 0xfffffcfb
    17b4:	54000001 	strpl	r0, [r0], #-1
    17b8:	00089018 	andeq	r9, r8, r8, lsl r0
    17bc:	02760500 	rsbseq	r0, r6, #0, 10
    17c0:	00000813 	andeq	r0, r0, r3, lsl r8
    17c4:	08421958 	stmdaeq	r2, {r3, r4, r6, r8, fp, ip}^
    17c8:	7a050000 	bvc	1417d0 <__bss_end+0x12bca0>
    17cc:	0002b102 	andeq	fp, r2, r2, lsl #2
    17d0:	19014800 	stmdbne	r1, {fp, lr}
    17d4:	00000791 	muleq	r0, r1, r7
    17d8:	73027b05 	movwvc	r7, #11013	; 0x2b05
    17dc:	4c000002 	stcmi	0, cr0, [r0], {2}
    17e0:	0a181901 	beq	607bec <__bss_end+0x5f20bc>
    17e4:	7f050000 	svcvc	0x00050000
    17e8:	00086702 	andeq	r6, r8, r2, lsl #14
    17ec:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    17f0:	0000069d 	muleq	r0, sp, r6
    17f4:	18028405 	stmdane	r2, {r0, r2, sl, pc}
    17f8:	e0000006 	and	r0, r0, r6
    17fc:	06821902 	streq	r1, [r2], r2, lsl #18
    1800:	85050000 	strhi	r0, [r5, #-0]
    1804:	00087302 	andeq	r7, r8, r2, lsl #6
    1808:	0002ec00 	andeq	lr, r2, r0, lsl #24
    180c:	0423040f 	strteq	r0, [r3], #-1039	; 0xfffffbf1
    1810:	33150000 	tstcc	r5, #0
    1814:	a2000000 	andge	r0, r0, #0
    1818:	16000005 	strne	r0, [r0], -r5
    181c:	00000441 	andeq	r0, r0, r1, asr #8
    1820:	00011d16 	andeq	r1, r1, r6, lsl sp
    1824:	05a21600 	streq	r1, [r2, #1536]!	; 0x600
    1828:	33160000 	tstcc	r6, #0
    182c:	00000000 	andeq	r0, r0, r0
    1830:	0131040f 	teqeq	r1, pc, lsl #8
    1834:	040f0000 	streq	r0, [pc], #-0	; 183c <_start-0x67c4>
    1838:	00000584 	andeq	r0, r0, r4, lsl #11
    183c:	00009915 	andeq	r9, r0, r5, lsl r9
    1840:	0005cc00 	andeq	ip, r5, r0, lsl #24
    1844:	04411600 	strbeq	r1, [r1], #-1536	; 0xfffffa00
    1848:	1d160000 	ldcne	0, cr0, [r6, #-0]
    184c:	16000001 	strne	r0, [r0], -r1
    1850:	00000099 	muleq	r0, r9, r0
    1854:	00003316 	andeq	r3, r0, r6, lsl r3
    1858:	040f0000 	streq	r0, [pc], #-0	; 1860 <_start-0x67a0>
    185c:	000005ae 	andeq	r0, r0, lr, lsr #11
    1860:	00003315 	andeq	r3, r0, r5, lsl r3
    1864:	0005e600 	andeq	lr, r5, r0, lsl #12
    1868:	04411600 	strbeq	r1, [r1], #-1536	; 0xfffffa00
    186c:	1d160000 	ldcne	0, cr0, [r6, #-0]
    1870:	00000001 	andeq	r0, r0, r1
    1874:	05d2040f 	ldrbeq	r0, [r2, #1039]	; 0x40f
    1878:	4f090000 	svcmi	0x00090000
    187c:	fc000000 	stc2	0, cr0, [r0], {-0}
    1880:	0a000005 	beq	189c <_start-0x6764>
    1884:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1888:	4f090002 	svcmi	0x00090002
    188c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1890:	0a000006 	beq	18b0 <_start-0x6750>
    1894:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1898:	bf060000 	svclt	0x00060000
    189c:	05000008 	streq	r0, [r0, #-8]
    18a0:	02f9011d 	rscseq	r0, r9, #1073741831	; 0x40000007
    18a4:	ff1a0000 			; <UNDEFINED> instruction: 0xff1a0000
    18a8:	0c000009 	stceq	0, cr0, [r0], {9}
    18ac:	4d012105 	stfmis	f2, [r1, #-20]	; 0xffffffec
    18b0:	18000006 	stmdane	r0, {r1, r2}
    18b4:	000008e7 	andeq	r0, r0, r7, ror #17
    18b8:	4d012305 	stcmi	3, cr2, [r1, #-20]	; 0xffffffec
    18bc:	00000006 	andeq	r0, r0, r6
    18c0:	00078a18 	andeq	r8, r7, r8, lsl sl
    18c4:	01240500 			; <UNDEFINED> instruction: 0x01240500
    18c8:	00000033 	andeq	r0, r0, r3, lsr r0
    18cc:	08b91804 	ldmeq	r9!, {r2, fp, ip}
    18d0:	25050000 	strcs	r0, [r5, #-0]
    18d4:	00065301 	andeq	r5, r6, r1, lsl #6
    18d8:	0f000800 	svceq	0x00000800
    18dc:	00061804 	andeq	r1, r6, r4, lsl #16
    18e0:	0c040f00 	stceq	15, cr0, [r4], {-0}
    18e4:	1a000006 	bne	1904 <_start-0x66fc>
    18e8:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    18ec:	013d050e 	teqeq	sp, lr, lsl #10
    18f0:	0000068e 	andeq	r0, r0, lr, lsl #13
    18f4:	00092d18 	andeq	r2, r9, r8, lsl sp
    18f8:	013e0500 	teqeq	lr, r0, lsl #10
    18fc:	0000068e 	andeq	r0, r0, lr, lsl #13
    1900:	096d1800 	stmdbeq	sp!, {fp, ip}^
    1904:	3f050000 	svccc	0x00050000
    1908:	00068e01 	andeq	r8, r6, r1, lsl #28
    190c:	89180600 	ldmdbhi	r8, {r9, sl}
    1910:	05000009 	streq	r0, [r0, #-9]
    1914:	005d0140 	subseq	r0, sp, r0, asr #2
    1918:	000c0000 	andeq	r0, ip, r0
    191c:	00005d09 	andeq	r5, r0, r9, lsl #26
    1920:	00069e00 	andeq	r9, r6, r0, lsl #28
    1924:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    1928:	00020000 	andeq	r0, r2, r0
    192c:	5705d01b 	smladpl	r5, fp, r0, sp
    1930:	00079f02 	andeq	r9, r7, r2, lsl #30
    1934:	09d31800 	ldmibeq	r3, {fp, ip}^
    1938:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    193c:	00002c02 	andeq	r2, r0, r2, lsl #24
    1940:	73180000 	tstvc	r8, #0
    1944:	05000009 	streq	r0, [r0, #-9]
    1948:	0124025a 			; <UNDEFINED> instruction: 0x0124025a
    194c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1950:	000007a6 	andeq	r0, r0, r6, lsr #15
    1954:	9f025b05 	svcls	0x00025b05
    1958:	08000007 	stmdaeq	r0, {r0, r1, r2}
    195c:	000a4d18 	andeq	r4, sl, r8, lsl sp
    1960:	025c0500 	subseq	r0, ip, #0, 10
    1964:	000001aa 	andeq	r0, r0, sl, lsr #3
    1968:	07491824 	strbeq	r1, [r9, -r4, lsr #16]
    196c:	5d050000 	stcpl	0, cr0, [r5, #-0]
    1970:	00003302 	andeq	r3, r0, r2, lsl #6
    1974:	e2184800 	ands	r4, r8, #0, 16
    1978:	05000008 	streq	r0, [r0, #-8]
    197c:	007c025e 	rsbseq	r0, ip, lr, asr r2
    1980:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    1984:	00000a63 	andeq	r0, r0, r3, ror #20
    1988:	59025f05 	stmdbpl	r2, {r0, r2, r8, r9, sl, fp, ip, lr}
    198c:	58000006 	stmdapl	r0, {r1, r2}
    1990:	0008ed18 	andeq	lr, r8, r8, lsl sp
    1994:	02600500 	rsbeq	r0, r0, #0, 10
    1998:	00000107 	andeq	r0, r0, r7, lsl #2
    199c:	0a681868 	beq	1a07b44 <__bss_end+0x19f2014>
    19a0:	61050000 	mrsvs	r0, (UNDEF: 5)
    19a4:	00010702 	andeq	r0, r1, r2, lsl #14
    19a8:	55187000 	ldrpl	r7, [r8, #-0]
    19ac:	05000006 	streq	r0, [r0, #-6]
    19b0:	01070262 	tsteq	r7, r2, ror #4
    19b4:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    19b8:	00000a0e 	andeq	r0, r0, lr, lsl #20
    19bc:	af026305 	svcge	0x00026305
    19c0:	80000007 	andhi	r0, r0, r7
    19c4:	00079a18 	andeq	r9, r7, r8, lsl sl
    19c8:	02640500 	rsbeq	r0, r4, #0, 10
    19cc:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
    19d0:	09a11888 	stmibeq	r1!, {r3, r7, fp, ip}
    19d4:	65050000 	strvs	r0, [r5, #-0]
    19d8:	00003302 	andeq	r3, r0, r2, lsl #6
    19dc:	fb18a000 	blx	6299e6 <__bss_end+0x613eb6>
    19e0:	05000006 	streq	r0, [r0, #-6]
    19e4:	01070266 	tsteq	r7, r6, ror #4
    19e8:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    19ec:	00000646 	andeq	r0, r0, r6, asr #12
    19f0:	07026705 	streq	r6, [r2, -r5, lsl #14]
    19f4:	ac000001 	stcge	0, cr0, [r0], {1}
    19f8:	0006ea18 	andeq	lr, r6, r8, lsl sl
    19fc:	02680500 	rsbeq	r0, r8, #0, 10
    1a00:	00000107 	andeq	r0, r0, r7, lsl #2
    1a04:	05f818b4 	ldrbeq	r1, [r8, #2228]!	; 0x8b4
    1a08:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    1a0c:	00010702 	andeq	r0, r1, r2, lsl #14
    1a10:	0718bc00 	ldreq	fp, [r8, -r0, lsl #24]
    1a14:	05000006 	streq	r0, [r0, #-6]
    1a18:	0107026a 	tsteq	r7, sl, ror #4
    1a1c:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    1a20:	00000895 	muleq	r0, r5, r8
    1a24:	33026b05 	movwcc	r6, #11013	; 0x2b05
    1a28:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1a2c:	012a0900 			; <UNDEFINED> instruction: 0x012a0900
    1a30:	07af0000 	streq	r0, [pc, r0]!
    1a34:	df0a0000 	svcle	0x000a0000
    1a38:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1a3c:	012a0900 			; <UNDEFINED> instruction: 0x012a0900
    1a40:	07bf0000 	ldreq	r0, [pc, r0]!
    1a44:	df0a0000 	svcle	0x000a0000
    1a48:	07000000 	streq	r0, [r0, -r0]
    1a4c:	012a0900 			; <UNDEFINED> instruction: 0x012a0900
    1a50:	07cf0000 	strbeq	r0, [pc, r0]
    1a54:	df0a0000 	svcle	0x000a0000
    1a58:	17000000 	strne	r0, [r0, -r0]
    1a5c:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
    1a60:	07f30270 			; <UNDEFINED> instruction: 0x07f30270
    1a64:	32180000 	andscc	r0, r8, #0
    1a68:	05000008 	streq	r0, [r0, #-8]
    1a6c:	07f30273 			; <UNDEFINED> instruction: 0x07f30273
    1a70:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1a74:	00000a05 	andeq	r0, r0, r5, lsl #20
    1a78:	03027405 	movweq	r7, #9221	; 0x2405
    1a7c:	78000008 	stmdavc	r0, {r3}
    1a80:	02f30900 	rscseq	r0, r3, #0, 18
    1a84:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1a88:	df0a0000 	svcle	0x000a0000
    1a8c:	1d000000 	stcne	0, cr0, [r0, #-0]
    1a90:	002c0900 	eoreq	r0, ip, r0, lsl #18
    1a94:	08130000 	ldmdaeq	r3, {}	; <UNPREDICTABLE>
    1a98:	df0a0000 	svcle	0x000a0000
    1a9c:	1d000000 	stcne	0, cr0, [r0, #-0]
    1aa0:	05f01c00 	ldrbeq	r1, [r0, #3072]!	; 0xc00
    1aa4:	08350255 	ldmdaeq	r5!, {r0, r2, r4, r6, r9}
    1aa8:	261d0000 	ldrcs	r0, [sp], -r0
    1aac:	05000009 	streq	r0, [r0, #-9]
    1ab0:	069e026c 	ldreq	r0, [lr], ip, ror #4
    1ab4:	3a1d0000 	bcc	741abc <__bss_end+0x72bf8c>
    1ab8:	0500000a 	streq	r0, [r0, #-10]
    1abc:	07cf0275 			; <UNDEFINED> instruction: 0x07cf0275
    1ac0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1ac4:	0000012a 	andeq	r0, r0, sl, lsr #2
    1ac8:	00000845 	andeq	r0, r0, r5, asr #16
    1acc:	0000df0a 	andeq	sp, r0, sl, lsl #30
    1ad0:	1e001800 	cdpne	8, 0, cr1, cr0, cr0, {0}
    1ad4:	00000850 	andeq	r0, r0, r0, asr r8
    1ad8:	00044116 	andeq	r4, r4, r6, lsl r1
    1adc:	040f0000 	streq	r0, [pc], #-0	; 1ae4 <_start-0x651c>
    1ae0:	00000845 	andeq	r0, r0, r5, asr #16
    1ae4:	0194040f 	orrseq	r0, r4, pc, lsl #8
    1ae8:	671e0000 	ldrvs	r0, [lr, -r0]
    1aec:	16000008 	strne	r0, [r0], -r8
    1af0:	00000033 	andeq	r0, r0, r3, lsr r0
    1af4:	6d040f00 	stcvs	15, cr0, [r4, #-0]
    1af8:	0f000008 	svceq	0x00000008
    1afc:	00085c04 	andeq	r5, r8, r4, lsl #24
    1b00:	060c0900 	streq	r0, [ip], -r0, lsl #18
    1b04:	08830000 	stmeq	r3, {}	; <UNPREDICTABLE>
    1b08:	df0a0000 	svcle	0x000a0000
    1b0c:	02000000 	andeq	r0, r0, #0
    1b10:	09b51f00 	ldmibeq	r5!, {r8, r9, sl, fp, ip}
    1b14:	fd050000 	stc2	0, cr0, [r5, #-0]
    1b18:	00044102 	andeq	r4, r4, r2, lsl #2
    1b1c:	09ae1f00 	stmibeq	lr!, {r8, r9, sl, fp, ip}
    1b20:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
    1b24:	00044702 	andeq	r4, r4, r2, lsl #14
    1b28:	a6040f00 	strge	r0, [r4], -r0, lsl #30
    1b2c:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    1b30:	0000089b 	muleq	r0, fp, r8
    1b34:	084a2120 	stmdaeq	sl, {r5, r8, sp}^
    1b38:	5f060000 	svcpl	0x00060000
    1b3c:	00000124 	andeq	r0, r0, r4, lsr #2
    1b40:	00000c02 	andeq	r0, r0, r2, lsl #24
    1b44:	70610700 	rsbvc	r0, r1, r0, lsl #14
    1b48:	10000000 	andne	r0, r0, r0
    1b4c:	0000032a 	andeq	r0, r0, sl, lsr #6
    1b50:	06690814 			; <UNDEFINED> instruction: 0x06690814
    1b54:	0c000009 	stceq	0, cr0, [r0], {9}
    1b58:	000002dd 	ldrdeq	r0, [r0], -sp
    1b5c:	08b26b08 	ldmeq	r2!, {r3, r8, r9, fp, sp, lr}
    1b60:	0c000000 	stceq	0, cr0, [r0], {-0}
    1b64:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    1b68:	090b6c08 	stmdbeq	fp, {r3, sl, fp, sp, lr}
    1b6c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1b70:	000003ce 	andeq	r0, r0, lr, asr #7
    1b74:	090b6d08 	stmdbeq	fp, {r3, r8, sl, fp, sp, lr}
    1b78:	0c080000 	stceq	0, cr0, [r8], {-0}
    1b7c:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1b80:	011d6e08 	tsteq	sp, r8, lsl #28
    1b84:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1b88:	000002a8 	andeq	r0, r0, r8, lsr #5
    1b8c:	011d6f08 	tsteq	sp, r8, lsl #30
    1b90:	00100000 	andseq	r0, r0, r0
    1b94:	0008bd05 	andeq	fp, r8, r5, lsl #26
    1b98:	06040f00 	streq	r0, [r4], -r0, lsl #30
    1b9c:	02000009 	andeq	r0, r0, #9
    1ba0:	000004ca 	andeq	r0, r0, sl, asr #9
    1ba4:	08bd7108 	popeq	{r3, r8, ip, sp, lr}
    1ba8:	11050000 	mrsne	r0, (UNDEF: 5)
    1bac:	10000009 	andne	r0, r0, r9
    1bb0:	00000526 	andeq	r0, r0, r6, lsr #10
    1bb4:	5273080c 	rsbspl	r0, r3, #12, 16	; 0xc0000
    1bb8:	0c000009 	stceq	0, cr0, [r0], {9}
    1bbc:	000002dd 	ldrdeq	r0, [r0], -sp
    1bc0:	08b27508 	ldmeq	r2!, {r3, r8, sl, ip, sp, lr}
    1bc4:	0c000000 	stceq	0, cr0, [r0], {-0}
    1bc8:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    1bcc:	090b7608 	stmdbeq	fp, {r3, r9, sl, ip, sp, lr}
    1bd0:	0c040000 	stceq	0, cr0, [r4], {-0}
    1bd4:	000003ce 	andeq	r0, r0, lr, asr #7
    1bd8:	090b7708 	stmdbeq	fp, {r3, r8, r9, sl, ip, sp, lr}
    1bdc:	00080000 	andeq	r0, r8, r0
    1be0:	00043e02 	andeq	r3, r4, r2, lsl #28
    1be4:	21790800 	cmncs	r9, r0, lsl #16
    1be8:	05000009 	streq	r0, [r0, #-9]
    1bec:	00000952 	andeq	r0, r0, r2, asr r9
    1bf0:	00053610 	andeq	r3, r5, r0, lsl r6
    1bf4:	7e081400 	cfcpysvc	mvf1, mvf8
    1bf8:	00000993 	muleq	r0, r3, r9
    1bfc:	00045d0c 	andeq	r5, r4, ip, lsl #26
    1c00:	77800800 	strvc	r0, [r0, r0, lsl #16]
    1c04:	00000000 	andeq	r0, r0, r0
    1c08:	0002d50c 	andeq	sp, r2, ip, lsl #10
    1c0c:	93810800 	orrls	r0, r1, #0, 16
    1c10:	04000009 	streq	r0, [r0], #-9
    1c14:	0002f60c 	andeq	pc, r2, ip, lsl #12
    1c18:	5d820800 	stcpl	8, cr0, [r2]
    1c1c:	08000009 	stmdaeq	r0, {r0, r3}
    1c20:	1c040f00 	stcne	15, cr0, [r4], {-0}
    1c24:	02000009 	andeq	r0, r0, #9
    1c28:	0000095e 	andeq	r0, r0, lr, asr r9
    1c2c:	09628308 	stmdbeq	r2!, {r3, r8, r9, pc}^
    1c30:	73100000 	tstvc	r0, #0
    1c34:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1c38:	09c96809 	stmibeq	r9, {r0, r3, fp, sp, lr}^
    1c3c:	970c0000 	strls	r0, [ip, -r0]
    1c40:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1c44:	0000646a 	andeq	r6, r0, sl, ror #8
    1c48:	a30c0000 	movwge	r0, #49152	; 0xc000
    1c4c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1c50:	0008b26b 	andeq	fp, r8, fp, ror #4
    1c54:	02000400 	andeq	r0, r0, #0, 8
    1c58:	00000c08 	andeq	r0, r0, r8, lsl #24
    1c5c:	09a46c09 	stmibeq	r4!, {r0, r3, sl, fp, sp, lr}
    1c60:	c9100000 	ldmdbgt	r0, {}	; <UNPREDICTABLE>
    1c64:	4c00000c 	stcmi	0, cr0, [r0], {12}
    1c68:	0a657901 	beq	1960074 <__bss_end+0x194a544>
    1c6c:	d20c0000 	andle	r0, ip, #0
    1c70:	0100000b 	tsteq	r0, fp
    1c74:	000a657b 	andeq	r6, sl, fp, ror r5
    1c78:	570c0000 	strpl	r0, [ip, -r0]
    1c7c:	0100000d 	tsteq	r0, sp
    1c80:	000a657c 	andeq	r6, sl, ip, ror r5
    1c84:	8e0c0400 	cfcpyshi	mvf0, mvf12
    1c88:	0100000d 	tsteq	r0, sp
    1c8c:	000a657e 	andeq	r6, sl, lr, ror r5
    1c90:	7d0c0800 	stcvc	8, cr0, [ip, #-0]
    1c94:	0100000b 	tsteq	r0, fp
    1c98:	000a657f 	andeq	r6, sl, pc, ror r5
    1c9c:	680c0c00 	stmdavs	ip, {sl, fp}
    1ca0:	0100000d 	tsteq	r0, sp
    1ca4:	00099981 	andeq	r9, r9, r1, lsl #19
    1ca8:	180c1000 	stmdane	ip, {ip}
    1cac:	0100000b 	tsteq	r0, fp
    1cb0:	00099982 	andeq	r9, r9, r2, lsl #19
    1cb4:	0d0c2400 	cfstrseq	mvf2, [ip, #-0]
    1cb8:	0100000d 	tsteq	r0, sp
    1cbc:	00007784 	andeq	r7, r0, r4, lsl #15
    1cc0:	400c3800 	andmi	r3, ip, r0, lsl #16
    1cc4:	0100000c 	tsteq	r0, ip
    1cc8:	00007085 	andeq	r7, r0, r5, lsl #1
    1ccc:	980c3c00 	stmdals	ip, {sl, fp, ip, sp}
    1cd0:	0100000d 	tsteq	r0, sp
    1cd4:	00007086 	andeq	r7, r0, r6, lsl #1
    1cd8:	4f0c4000 	svcmi	0x000c4000
    1cdc:	0100000d 	tsteq	r0, sp
    1ce0:	00006b88 	andeq	r6, r0, r8, lsl #23
    1ce4:	030c4400 	movweq	r4, #50176	; 0xc400
    1ce8:	0100000b 	tsteq	r0, fp
    1cec:	00006b89 	andeq	r6, r0, r9, lsl #23
    1cf0:	0f004800 	svceq	0x00004800
    1cf4:	00004804 	andeq	r4, r0, r4, lsl #16
    1cf8:	0cb40200 	lfmeq	f0, 4, [r4]
    1cfc:	90010000 	andls	r0, r1, r0
    1d00:	000009d4 	ldrdeq	r0, [r0], -r4
    1d04:	000c1e02 	andeq	r1, ip, r2, lsl #28
    1d08:	86980100 	ldrhi	r0, [r8], r0, lsl #2
    1d0c:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    1d10:	00000a76 	andeq	r0, r0, r6, ror sl
    1d14:	0a6b040f 	beq	1ac2d58 <__bss_end+0x1aad228>
    1d18:	860e0000 	strhi	r0, [lr], -r0
    1d1c:	2200000a 	andcs	r0, r0, #10
    1d20:	00000aaa 	andeq	r0, r0, sl, lsr #21
    1d24:	64056901 	strvs	r6, [r5], #-2305	; 0xfffff6ff
    1d28:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1d2c:	4800011b 	stmdami	r0, {r0, r1, r3, r4, r8}
    1d30:	01000000 	mrseq	r0, (UNDEF: 0)
    1d34:	000aca9c 	muleq	sl, ip, sl
    1d38:	0ada2300 	beq	ff68a940 <_estack+0xf767a940>
    1d3c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1d40:	000a8105 	andeq	r8, sl, r5, lsl #2
    1d44:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1d48:	000c1624 	andeq	r1, ip, r4, lsr #12
    1d4c:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    1d50:	00000064 	andeq	r0, r0, r4, rrx
    1d54:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d58:	000b8825 	andeq	r8, fp, r5, lsr #16
    1d5c:	055d0100 	ldrbeq	r0, [sp, #-256]	; 0xffffff00
    1d60:	00000064 	andeq	r0, r0, r4, rrx
    1d64:	00011b0c 	andeq	r1, r1, ip, lsl #22
    1d68:	0000004c 	andeq	r0, r0, ip, asr #32
    1d6c:	0b039c01 	bleq	e8d78 <__bss_end+0xd3248>
    1d70:	da230000 	ble	8c1d78 <__bss_end+0x8ac248>
    1d74:	0100000a 	tsteq	r0, sl
    1d78:	0a81055d 	beq	fe0432f4 <_estack+0xf60332f4>
    1d7c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d80:	0c16246c 	cfldrseq	mvf2, [r6], {108}	; 0x6c
    1d84:	5f010000 	svcpl	0x00010000
    1d88:	00006405 	andeq	r6, r0, r5, lsl #8
    1d8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d90:	0ae92200 	beq	ffa4a598 <_estack+0xf7a3a598>
    1d94:	52010000 	andpl	r0, r1, #0
    1d98:	00006405 	andeq	r6, r0, r5, lsl #8
    1d9c:	011acc00 	tsteq	sl, r0, lsl #24
    1da0:	00004000 	andeq	r4, r0, r0
    1da4:	3c9c0100 	ldfccs	f0, [ip], {0}
    1da8:	2300000b 	movwcs	r0, #11
    1dac:	00000ada 	ldrdeq	r0, [r0], -sl
    1db0:	81055201 	tsthi	r5, r1, lsl #4
    1db4:	0200000a 	andeq	r0, r0, #10
    1db8:	16246c91 			; <UNDEFINED> instruction: 0x16246c91
    1dbc:	0100000c 	tsteq	r0, ip
    1dc0:	00640554 	rsbeq	r0, r4, r4, asr r5
    1dc4:	91020000 	mrsls	r0, (UNDEF: 2)
    1dc8:	e6250074 			; <UNDEFINED> instruction: 0xe6250074
    1dcc:	0100000b 	tsteq	r0, fp
    1dd0:	00640546 	rsbeq	r0, r4, r6, asr #10
    1dd4:	1a880000 	bne	fe201ddc <_estack+0xf61f1ddc>
    1dd8:	00440001 	subeq	r0, r4, r1
    1ddc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1de0:	00000b75 	andeq	r0, r0, r5, ror fp
    1de4:	000ada23 	andeq	sp, sl, r3, lsr #20
    1de8:	05460100 	strbeq	r0, [r6, #-256]	; 0xffffff00
    1dec:	00000a81 	andeq	r0, r0, r1, lsl #21
    1df0:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    1df4:	00000c16 	andeq	r0, r0, r6, lsl ip
    1df8:	64054801 	strvs	r4, [r5], #-2049	; 0xfffff7ff
    1dfc:	02000000 	andeq	r0, r0, #0
    1e00:	26007491 			; <UNDEFINED> instruction: 0x26007491
    1e04:	00000d40 	andeq	r0, r0, r0, asr #26
    1e08:	84050601 	strhi	r0, [r5], #-1537	; 0xfffff9ff
    1e0c:	04000119 	streq	r0, [r0], #-281	; 0xfffffee7
    1e10:	01000001 	tsteq	r0, r1
    1e14:	000b9b9c 	muleq	fp, ip, fp
    1e18:	0ada2300 	beq	ff68aa20 <_estack+0xf767aa20>
    1e1c:	06010000 	streq	r0, [r1], -r0
    1e20:	000a7605 	andeq	r7, sl, r5, lsl #12
    1e24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e28:	0cf82600 	ldcleq	6, cr2, [r8]
    1e2c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    1e30:	0118f404 	tsteq	r8, r4, lsl #8	; <UNPREDICTABLE>
    1e34:	00009000 	andeq	r9, r0, r0
    1e38:	d09c0100 	addsle	r0, ip, r0, lsl #2
    1e3c:	2300000b 	movwcs	r0, #11
    1e40:	00000ada 	ldrdeq	r0, [r0], -sl
    1e44:	8c04f801 	stchi	8, cr15, [r4], {1}
    1e48:	0200000a 	andeq	r0, r0, #10
    1e4c:	b3237491 			; <UNDEFINED> instruction: 0xb3237491
    1e50:	0100000d 	tsteq	r0, sp
    1e54:	089b04f8 	ldmeq	fp, {r3, r4, r5, r6, r7, sl}
    1e58:	91020000 	mrsls	r0, (UNDEF: 2)
    1e5c:	60260070 	eorvs	r0, r6, r0, ror r0
    1e60:	0100000b 	tsteq	r0, fp
    1e64:	17c804d2 			; <UNDEFINED> instruction: 0x17c804d2
    1e68:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
    1e6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e70:	00000c14 	andeq	r0, r0, r4, lsl ip
    1e74:	000ada23 	andeq	sp, sl, r3, lsr #20
    1e78:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    1e7c:	00000a86 	andeq	r0, r0, r6, lsl #21
    1e80:	23749102 	cmncs	r4, #-2147483648	; 0x80000000
    1e84:	00000ca6 	andeq	r0, r0, r6, lsr #25
    1e88:	9b04d201 	blls	136694 <__bss_end+0x120b64>
    1e8c:	02000008 	andeq	r0, r0, #8
    1e90:	5e237091 	mcrpl	0, 1, r7, cr3, cr1, {4}
    1e94:	0100000d 	tsteq	r0, sp
    1e98:	006404d2 	ldrdeq	r0, [r4], #-66	; 0xffffffbe	; <UNPREDICTABLE>
    1e9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1ea0:	0b27006c 	bleq	9c2058 <__bss_end+0x9ac528>
    1ea4:	0100000b 	tsteq	r0, fp
    1ea8:	179404a9 	ldrne	r0, [r4, r9, lsr #9]
    1eac:	00340001 	eorseq	r0, r4, r1
    1eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1eb4:	00000c3a 	andeq	r0, r0, sl, lsr ip
    1eb8:	000ada23 	andeq	sp, sl, r3, lsr #20
    1ebc:	04a90100 	strteq	r0, [r9], #256	; 0x100
    1ec0:	00000a76 	andeq	r0, r0, r6, ror sl
    1ec4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ec8:	000c8822 	andeq	r8, ip, r2, lsr #16
    1ecc:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    1ed0:	00000070 	andeq	r0, r0, r0, ror r0
    1ed4:	00011764 	andeq	r1, r1, r4, ror #14
    1ed8:	00000030 	andeq	r0, r0, r0, lsr r0
    1edc:	0c739c01 	ldcleq	12, cr9, [r3], #-4
    1ee0:	da230000 	ble	8c1ee8 <__bss_end+0x8ac3b8>
    1ee4:	0100000a 	tsteq	r0, sl
    1ee8:	0a81049d 	beq	fe043164 <_estack+0xf6033164>
    1eec:	91020000 	mrsls	r0, (UNDEF: 2)
    1ef0:	0c15246c 	cfldrseq	mvf2, [r5], {108}	; 0x6c
    1ef4:	9f010000 	svcls	0x00010000
    1ef8:	00007004 	andeq	r7, r0, r4
    1efc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f00:	0ac32800 	beq	ff0cbf08 <_estack+0xf70bbf08>
    1f04:	8f010000 	svchi	0x00010000
    1f08:	00007004 	andeq	r7, r0, r4
    1f0c:	01173000 	tsteq	r7, r0
    1f10:	00003400 	andeq	r3, r0, r0, lsl #8
    1f14:	ac9c0100 	ldfges	f0, [ip], {0}
    1f18:	2300000c 	movwcs	r0, #12
    1f1c:	00000ada 	ldrdeq	r0, [r0], -sl
    1f20:	81048f01 	tsthi	r4, r1, lsl #30
    1f24:	0200000a 	andeq	r0, r0, #10
    1f28:	15246c91 	strne	r6, [r4, #-3217]!	; 0xfffff36f
    1f2c:	0100000c 	tsteq	r0, ip
    1f30:	00700491 			; <UNDEFINED> instruction: 0x00700491
    1f34:	91020000 	mrsls	r0, (UNDEF: 2)
    1f38:	2b280074 	blcs	a02110 <__bss_end+0x9ec5e0>
    1f3c:	0100000c 	tsteq	r0, ip
    1f40:	00640456 	rsbeq	r0, r4, r6, asr r4
    1f44:	16500000 	ldrbne	r0, [r0], -r0
    1f48:	00e00001 	rsceq	r0, r0, r1
    1f4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f50:	00000d12 	andeq	r0, r0, r2, lsl sp
    1f54:	000ada23 	andeq	sp, sl, r3, lsr #20
    1f58:	04560100 	ldrbeq	r0, [r6], #-256	; 0xffffff00
    1f5c:	00000a76 	andeq	r0, r0, r6, ror sl
    1f60:	236c9102 	cmncs	ip, #-2147483648	; 0x80000000
    1f64:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    1f68:	1f045601 	svcne	0x00045601
    1f6c:	02000001 	andeq	r0, r0, #1
    1f70:	60236891 	mlavs	r3, r1, r8, r6
    1f74:	0100000c 	tsteq	r0, ip
    1f78:	0d120456 	cfldrseq	mvf0, [r2, #-344]	; 0xfffffea8
    1f7c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f80:	0c162464 	cfldrseq	mvf2, [r6], {100}	; 0x64
    1f84:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    1f88:	00006404 	andeq	r6, r0, r4, lsl #8
    1f8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f90:	000bbb24 	andeq	fp, fp, r4, lsr #22
    1f94:	04590100 	ldrbeq	r0, [r9], #-256	; 0xffffff00
    1f98:	00000070 	andeq	r0, r0, r0, ror r0
    1f9c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1fa0:	0064040f 	rsbeq	r0, r4, pc, lsl #8
    1fa4:	a6280000 	strtge	r0, [r8], -r0
    1fa8:	0100000b 	tsteq	r0, fp
    1fac:	006403c1 	rsbeq	r0, r4, r1, asr #7
    1fb0:	144c0000 	strbne	r0, [ip], #-0
    1fb4:	02040001 	andeq	r0, r4, #1
    1fb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fbc:	00000d9c 	muleq	r0, ip, sp
    1fc0:	000ada23 	andeq	sp, sl, r3, lsr #20
    1fc4:	03c10100 	biceq	r0, r1, #0, 2
    1fc8:	00000a76 	andeq	r0, r0, r6, ror sl
    1fcc:	23649102 	cmncs	r4, #-2147483648	; 0x80000000
    1fd0:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    1fd4:	1f03c101 	svcne	0x0003c101
    1fd8:	02000001 	andeq	r0, r0, #1
    1fdc:	0f236091 	svceq	0x00236091
    1fe0:	01000010 	tsteq	r0, r0, lsl r0
    1fe4:	08b203c1 	ldmeq	r2!, {r0, r6, r7, r8, r9}
    1fe8:	91020000 	mrsls	r0, (UNDEF: 2)
    1fec:	0bd9235c 	bleq	ff64ad64 <_estack+0xf763ad64>
    1ff0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    1ff4:	00006403 	andeq	r6, r0, r3, lsl #8
    1ff8:	58910200 	ldmpl	r1, {r9}
    1ffc:	000cbb24 	andeq	fp, ip, r4, lsr #22
    2000:	03c30100 	biceq	r0, r3, #0, 2
    2004:	00000064 	andeq	r0, r0, r4, rrx
    2008:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    200c:	0000113c 	andeq	r1, r0, ip, lsr r1
    2010:	c903c401 	stmdbgt	r3, {r0, sl, lr, pc}
    2014:	02000009 	andeq	r0, r0, #9
    2018:	49246891 	stmdbmi	r4!, {r0, r4, r7, fp, sp, lr}
    201c:	0100000c 	tsteq	r0, ip
    2020:	0a6503c5 	beq	1942f3c <__bss_end+0x192d40c>
    2024:	91020000 	mrsls	r0, (UNDEF: 2)
    2028:	85280070 	strhi	r0, [r8, #-112]!	; 0xffffff90
    202c:	0100000a 	tsteq	r0, sl
    2030:	00640386 	rsbeq	r0, r4, r6, lsl #7
    2034:	13700000 	cmnne	r0, #0
    2038:	00dc0001 	sbcseq	r0, ip, r1
    203c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2040:	00000e11 	andeq	r0, r0, r1, lsl lr
    2044:	000ada23 	andeq	sp, sl, r3, lsr #20
    2048:	03860100 	orreq	r0, r6, #0, 2
    204c:	00000a76 	andeq	r0, r0, r6, ror sl
    2050:	236c9102 	cmncs	ip, #-2147483648	; 0x80000000
    2054:	00000ca6 	andeq	r0, r0, r6, lsr #25
    2058:	a1038601 	tstge	r3, r1, lsl #12
    205c:	02000008 	andeq	r0, r0, #8
    2060:	60236891 	mlavs	r3, r1, r8, r6
    2064:	0100000c 	tsteq	r0, ip
    2068:	0d120386 	ldceq	3, cr0, [r2, #-536]	; 0xfffffde8
    206c:	91020000 	mrsls	r0, (UNDEF: 2)
    2070:	0d322364 	ldceq	3, cr2, [r2, #-400]!	; 0xfffffe70
    2074:	86010000 	strhi	r0, [r1], -r0
    2078:	00006403 	andeq	r6, r0, r3, lsl #8
    207c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2080:	000c1624 	andeq	r1, ip, r4, lsr #12
    2084:	03880100 	orreq	r0, r8, #0, 2
    2088:	00000064 	andeq	r0, r0, r4, rrx
    208c:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    2090:	00000bbb 			; <UNDEFINED> instruction: 0x00000bbb
    2094:	70038901 	andvc	r8, r3, r1, lsl #18
    2098:	02000000 	andeq	r0, r0, #0
    209c:	28007091 	stmdacs	r0, {r0, r4, r7, ip, sp, lr}
    20a0:	00000bf6 	strdeq	r0, [r0], -r6
    20a4:	64024101 	strvs	r4, [r2], #-257	; 0xfffffeff
    20a8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    20ac:	a4000111 	strge	r0, [r0], #-273	; 0xfffffeef
    20b0:	01000001 	tsteq	r0, r1
    20b4:	000e869c 	muleq	lr, ip, r6
    20b8:	0ada2300 	beq	ff68acc0 <_estack+0xf767acc0>
    20bc:	41010000 	mrsmi	r0, (UNDEF: 1)
    20c0:	000a7602 	andeq	r7, sl, r2, lsl #12
    20c4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    20c8:	000ca623 	andeq	sl, ip, r3, lsr #12
    20cc:	02410100 	subeq	r0, r1, #0, 2
    20d0:	000008a1 	andeq	r0, r0, r1, lsr #17
    20d4:	23609102 	cmncs	r0, #-2147483648	; 0x80000000
    20d8:	0000100f 	andeq	r1, r0, pc
    20dc:	b2024101 	andlt	r4, r2, #1073741824	; 0x40000000
    20e0:	02000008 	andeq	r0, r0, #8
    20e4:	32235c91 	eorcc	r5, r3, #37120	; 0x9100
    20e8:	0100000d 	tsteq	r0, sp
    20ec:	00640241 	rsbeq	r0, r4, r1, asr #4
    20f0:	91020000 	mrsls	r0, (UNDEF: 2)
    20f4:	0cbb2458 	cfldrseq	mvf2, [fp], #352	; 0x160
    20f8:	43010000 	movwmi	r0, #4096	; 0x1000
    20fc:	00006402 	andeq	r6, r0, r2, lsl #8
    2100:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2104:	00113c24 	andseq	r3, r1, r4, lsr #24
    2108:	02440100 	subeq	r0, r4, #0, 2
    210c:	000009c9 	andeq	r0, r0, r9, asr #19
    2110:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2114:	000ce428 	andeq	lr, ip, r8, lsr #8
    2118:	01420100 	mrseq	r0, (UNDEF: 82)
    211c:	00000a76 	andeq	r0, r0, r6, ror sl
    2120:	00011104 	andeq	r1, r1, r4, lsl #2
    2124:	000000c8 	andeq	r0, r0, r8, asr #1
    2128:	0efb9c01 	cdpeq	12, 15, cr9, cr11, cr1, {0}
    212c:	7a230000 	bvc	8c2134 <__bss_end+0x8ac604>
    2130:	0100000c 	tsteq	r0, ip
    2134:	00700142 	rsbseq	r0, r0, r2, asr #2
    2138:	91020000 	mrsls	r0, (UNDEF: 2)
    213c:	0d982364 	ldceq	3, cr2, [r8, #400]	; 0x190
    2140:	42010000 	andmi	r0, r1, #0
    2144:	00007001 	andeq	r7, r0, r1
    2148:	60910200 	addsvs	r0, r1, r0, lsl #4
    214c:	000a9e23 	andeq	r9, sl, r3, lsr #28
    2150:	01420100 	mrseq	r0, (UNDEF: 82)
    2154:	0000004f 	andeq	r0, r0, pc, asr #32
    2158:	245f9102 	ldrbcs	r9, [pc], #-258	; 2160 <_start-0x5ea0>
    215c:	00000cd9 	ldrdeq	r0, [r0], -r9
    2160:	86014401 	strhi	r4, [r1], -r1, lsl #8
    2164:	0200000a 	andeq	r0, r0, #10
    2168:	7c247091 	stcvc	0, cr7, [r4], #-580	; 0xfffffdbc
    216c:	0100000d 	tsteq	r0, sp
    2170:	00210145 	eoreq	r0, r1, r5, asr #2
    2174:	91020000 	mrsls	r0, (UNDEF: 2)
    2178:	0c16246c 	cfldrseq	mvf2, [r6], {108}	; 0x6c
    217c:	46010000 	strmi	r0, [r1], -r0
    2180:	000a7601 	andeq	r7, sl, r1, lsl #12
    2184:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2188:	0d1f2900 	vldreq.16	s4, [pc, #-0]	; 2190 <_start-0x5e70>	; <UNPREDICTABLE>
    218c:	17010000 	strne	r0, [r1, -r0]
    2190:	00006401 	andeq	r6, r0, r1, lsl #8
    2194:	010ff000 	mrseq	pc, CPSR	; <UNPREDICTABLE>
    2198:	00011400 	andeq	r1, r1, r0, lsl #8
    219c:	239c0100 	orrscs	r0, ip, #0, 2
    21a0:	00000ada 	ldrdeq	r0, [r0], -sl
    21a4:	76011701 	strvc	r1, [r1], -r1, lsl #14
    21a8:	0200000a 	andeq	r0, r0, #10
    21ac:	da237491 	ble	8df3f8 <__bss_end+0x8c98c8>
    21b0:	0100000c 	tsteq	r0, ip
    21b4:	00640117 	rsbeq	r0, r4, r7, lsl r1
    21b8:	91020000 	mrsls	r0, (UNDEF: 2)
    21bc:	32000070 	andcc	r0, r0, #112	; 0x70
    21c0:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    21c4:	00079e00 	andeq	r9, r7, r0, lsl #28
    21c8:	e5010400 	str	r0, [r1, #-1024]	; 0xfffffc00
    21cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    21d0:	00001363 	andeq	r1, r0, r3, ror #6
    21d4:	00000ea5 	andeq	r0, r0, r5, lsr #29
    21d8:	00011ba0 	andeq	r1, r1, r0, lsr #23
    21dc:	00001920 	andeq	r1, r0, r0, lsr #18
    21e0:	000007e4 	andeq	r0, r0, r4, ror #15
    21e4:	84060102 	strhi	r0, [r6], #-258	; 0xfffffefe
    21e8:	03000008 	movweq	r0, #8
    21ec:	00000025 	andeq	r0, r0, r5, lsr #32
    21f0:	82080102 	andhi	r0, r8, #-2147483648	; 0x80000000
    21f4:	02000008 	andeq	r0, r0, #8
    21f8:	089e0502 	ldmeq	lr, {r1, r8, sl}
    21fc:	02020000 	andeq	r0, r2, #0
    2200:	00005907 	andeq	r5, r0, r7, lsl #18
    2204:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2208:	00000134 	andeq	r0, r0, r4, lsr r1
    220c:	00004604 	andeq	r4, r0, r4, lsl #12
    2210:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2214:	0000061d 	andeq	r0, r0, sp, lsl r6
    2218:	00005204 	andeq	r5, r0, r4, lsl #4
    221c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    2220:	0000012f 	andeq	r0, r0, pc, lsr #2
    2224:	18070802 	stmdane	r7, {r1, fp}
    2228:	05000006 	streq	r0, [r0, #-6]
    222c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2230:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2234:	00062207 	andeq	r2, r6, r7, lsl #4
    2238:	0ae20600 	beq	ff883a40 <_estack+0xf7873a40>
    223c:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    2240:	00000073 	andeq	r0, r0, r3, ror r0
    2244:	5d040802 	stcpl	8, cr0, [r4, #-8]
    2248:	07000001 	streq	r0, [r0, -r1]
    224c:	08700604 	ldmdaeq	r0!, {r2, r9, sl}^
    2250:	07030000 	streq	r0, [r3, -r0]
    2254:	0000006c 	andeq	r0, r0, ip, rrx
    2258:	00085f06 	andeq	r5, r8, r6, lsl #30
    225c:	462c0400 	strtmi	r0, [ip], -r0, lsl #8
    2260:	06000000 	streq	r0, [r0], -r0
    2264:	00000955 	andeq	r0, r0, r5, asr r9
    2268:	00467204 	subeq	r7, r6, r4, lsl #4
    226c:	c1080000 	mrsgt	r0, (UNDEF: 8)
    2270:	02000007 	andeq	r0, r0, #7
    2274:	00730165 	rsbseq	r0, r3, r5, ror #2
    2278:	04090000 	streq	r0, [r9], #-0
    227c:	00daa604 	sbcseq	sl, sl, r4, lsl #12
    2280:	bb0a0000 	bllt	282288 <__bss_end+0x26c758>
    2284:	04000007 	streq	r0, [r0], #-7
    2288:	0000afa8 	andeq	sl, r0, r8, lsr #31
    228c:	076d0a00 	strbeq	r0, [sp, -r0, lsl #20]!
    2290:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    2294:	000000da 	ldrdeq	r0, [r0], -sl
    2298:	00310b00 	eorseq	r0, r1, r0, lsl #22
    229c:	00ea0000 	rsceq	r0, sl, r0
    22a0:	ea0c0000 	b	3022a8 <__bss_end+0x2ec778>
    22a4:	03000000 	movweq	r0, #0
    22a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    22ac:	000000dc 	ldrdeq	r0, [r0], -ip
    22b0:	a304080d 	movwge	r0, #18445	; 0x480d
    22b4:	00000112 	andeq	r0, r0, r2, lsl r1
    22b8:	0009330e 	andeq	r3, r9, lr, lsl #6
    22bc:	6ca50400 	cfstrsvs	mvf0, [r5]
    22c0:	00000000 	andeq	r0, r0, r0
    22c4:	00093b0e 	andeq	r3, r9, lr, lsl #22
    22c8:	bbaa0400 	bllt	fea832d0 <_estack+0xf6a732d0>
    22cc:	04000000 	streq	r0, [r0], #-0
    22d0:	08c60600 	stmiaeq	r6, {r9, sl}^
    22d4:	ab040000 	blge	1022dc <__bss_end+0xec7ac>
    22d8:	000000f1 	strdeq	r0, [r0], -r1
    22dc:	00073006 	andeq	r3, r7, r6
    22e0:	8eaf0400 	cdphi	4, 10, cr0, cr15, cr0, {0}
    22e4:	06000000 	streq	r0, [r0], -r0
    22e8:	00000999 	muleq	r0, r9, r9
    22ec:	00521605 	subseq	r1, r2, r5, lsl #12
    22f0:	410f0000 	mrsmi	r0, CPSR
    22f4:	18000007 	stmdane	r0, {r0, r1, r2}
    22f8:	01862d05 	orreq	r2, r6, r5, lsl #26
    22fc:	e70e0000 	str	r0, [lr, -r0]
    2300:	05000008 	streq	r0, [r0, #-8]
    2304:	0001862f 	andeq	r8, r1, pc, lsr #12
    2308:	5f100000 	svcpl	0x00100000
    230c:	3005006b 	andcc	r0, r5, fp, rrx
    2310:	0000006c 	andeq	r0, r0, ip, rrx
    2314:	091e0e04 	ldmdbeq	lr, {r2, r9, sl, fp}
    2318:	30050000 	andcc	r0, r5, r0
    231c:	0000006c 	andeq	r0, r0, ip, rrx
    2320:	072a0e08 	streq	r0, [sl, -r8, lsl #28]!
    2324:	30050000 	andcc	r0, r5, r0
    2328:	0000006c 	andeq	r0, r0, ip, rrx
    232c:	09f00e0c 	ldmibeq	r0!, {r2, r3, r9, sl, fp}^
    2330:	30050000 	andcc	r0, r5, r0
    2334:	0000006c 	andeq	r0, r0, ip, rrx
    2338:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    233c:	8c310500 	cfldr32hi	mvfx0, [r1], #-0
    2340:	14000001 	strne	r0, [r0], #-1
    2344:	33041100 	movwcc	r1, #16640	; 0x4100
    2348:	0b000001 	bleq	2354 <_start-0x5cac>
    234c:	00000128 	andeq	r0, r0, r8, lsr #2
    2350:	0000019c 	muleq	r0, ip, r1
    2354:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    2358:	0f000000 	svceq	0x00000000
    235c:	00000768 	andeq	r0, r0, r8, ror #14
    2360:	15350524 	ldrne	r0, [r5, #-1316]!	; 0xfffffadc
    2364:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2368:	00000663 	andeq	r0, r0, r3, ror #12
    236c:	006c3705 	rsbeq	r3, ip, r5, lsl #14
    2370:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2374:	00000964 	andeq	r0, r0, r4, ror #18
    2378:	006c3805 	rsbeq	r3, ip, r5, lsl #16
    237c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2380:	00000678 	andeq	r0, r0, r8, ror r6
    2384:	006c3905 	rsbeq	r3, ip, r5, lsl #18
    2388:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    238c:	00000a7b 	andeq	r0, r0, fp, ror sl
    2390:	006c3a05 	rsbeq	r3, ip, r5, lsl #20
    2394:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    2398:	00000839 	andeq	r0, r0, r9, lsr r8
    239c:	006c3b05 	rsbeq	r3, ip, r5, lsl #22
    23a0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    23a4:	000007e9 	andeq	r0, r0, r9, ror #15
    23a8:	006c3c05 	rsbeq	r3, ip, r5, lsl #24
    23ac:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    23b0:	000009f5 	strdeq	r0, [r0], -r5
    23b4:	006c3d05 	rsbeq	r3, ip, r5, lsl #26
    23b8:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    23bc:	000008a8 	andeq	r0, r0, r8, lsr #17
    23c0:	006c3e05 	rsbeq	r3, ip, r5, lsl #28
    23c4:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    23c8:	00000a42 	andeq	r0, r0, r2, asr #20
    23cc:	006c3f05 	rsbeq	r3, ip, r5, lsl #30
    23d0:	00200000 	eoreq	r0, r0, r0
    23d4:	00068712 	andeq	r8, r6, r2, lsl r7
    23d8:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    23dc:	00025548 	andeq	r5, r2, r8, asr #10
    23e0:	07090e00 	streq	r0, [r9, -r0, lsl #28]
    23e4:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    23e8:	00000255 	andeq	r0, r0, r5, asr r2
    23ec:	05cd0e00 	strbeq	r0, [sp, #3584]	; 0xe00
    23f0:	4a050000 	bmi	1423f8 <__bss_end+0x12c8c8>
    23f4:	00000255 	andeq	r0, r0, r5, asr r2
    23f8:	09801380 	stmibeq	r0, {r7, r8, r9, ip}
    23fc:	4c050000 	stcmi	0, cr0, [r5], {-0}
    2400:	00000128 	andeq	r0, r0, r8, lsr #2
    2404:	ac130100 	ldfges	f0, [r3], {-0}
    2408:	05000006 	streq	r0, [r0, #-6]
    240c:	0001284f 	andeq	r2, r1, pc, asr #16
    2410:	00010400 	andeq	r0, r1, r0, lsl #8
    2414:	00008c0b 	andeq	r8, r0, fp, lsl #24
    2418:	00026500 	andeq	r6, r2, r0, lsl #10
    241c:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    2420:	001f0000 	andseq	r0, pc, r0
    2424:	00084212 	andeq	r4, r8, r2, lsl r2
    2428:	05019000 	streq	r9, [r1, #-0]
    242c:	0002a35b 	andeq	sl, r2, fp, asr r3
    2430:	08e70e00 	stmiaeq	r7!, {r9, sl, fp}^
    2434:	5c050000 	stcpl	0, cr0, [r5], {-0}
    2438:	000002a3 	andeq	r0, r0, r3, lsr #5
    243c:	08ff0e00 	ldmeq	pc!, {r9, sl, fp}^	; <UNPREDICTABLE>
    2440:	5d050000 	stcpl	0, cr0, [r5, #-0]
    2444:	0000006c 	andeq	r0, r0, ip, rrx
    2448:	07110e04 	ldreq	r0, [r1, -r4, lsl #28]
    244c:	5f050000 	svcpl	0x00050000
    2450:	000002a9 	andeq	r0, r0, r9, lsr #5
    2454:	06870e08 	streq	r0, [r7], r8, lsl #28
    2458:	60050000 	andvs	r0, r5, r0
    245c:	00000215 	andeq	r0, r0, r5, lsl r2
    2460:	04110088 	ldreq	r0, [r1], #-136	; 0xffffff78
    2464:	00000265 	andeq	r0, r0, r5, ror #4
    2468:	0002b90b 	andeq	fp, r2, fp, lsl #18
    246c:	0002b900 	andeq	fp, r2, r0, lsl #18
    2470:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    2474:	001f0000 	andseq	r0, pc, r0
    2478:	02bf0411 	adcseq	r0, pc, #285212672	; 0x11000000
    247c:	0f140000 	svceq	0x00140000
    2480:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
    2484:	e5730508 	ldrb	r0, [r3, #-1288]!	; 0xfffffaf8
    2488:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    248c:	00000672 	andeq	r0, r0, r2, ror r6
    2490:	02e57405 	rsceq	r7, r5, #83886080	; 0x5000000
    2494:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2498:	000005d9 	ldrdeq	r0, [r0], -r9
    249c:	006c7505 	rsbeq	r7, ip, r5, lsl #10
    24a0:	00040000 	andeq	r0, r4, r0
    24a4:	00310411 	eorseq	r0, r1, r1, lsl r4
    24a8:	d10f0000 	mrsle	r0, CPSR
    24ac:	68000008 	stmdavs	r0, {r3}
    24b0:	0415b305 	ldreq	fp, [r5], #-773	; 0xfffffcfb
    24b4:	5f100000 	svcpl	0x00100000
    24b8:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    24bc:	000002e5 	andeq	r0, r0, r5, ror #5
    24c0:	725f1000 	subsvc	r1, pc, #0
    24c4:	6cb50500 	cfldr32vs	mvfx0, [r5]
    24c8:	04000000 	streq	r0, [r0], #-0
    24cc:	00775f10 	rsbseq	r5, r7, r0, lsl pc
    24d0:	006cb605 	rsbeq	fp, ip, r5, lsl #12
    24d4:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    24d8:	000006a5 	andeq	r0, r0, r5, lsr #13
    24dc:	0038b705 	eorseq	fp, r8, r5, lsl #14
    24e0:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    24e4:	00000784 	andeq	r0, r0, r4, lsl #15
    24e8:	0038b805 	eorseq	fp, r8, r5, lsl #16
    24ec:	100e0000 	andne	r0, lr, r0
    24f0:	0066625f 	rsbeq	r6, r6, pc, asr r2
    24f4:	02c0b905 	sbceq	fp, r0, #81920	; 0x14000
    24f8:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    24fc:	0000062f 	andeq	r0, r0, pc, lsr #12
    2500:	006cba05 	rsbeq	fp, ip, r5, lsl #20
    2504:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    2508:	00000695 	muleq	r0, r5, r6
    250c:	008cc105 	addeq	ip, ip, r5, lsl #2
    2510:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    2514:	00000758 	andeq	r0, r0, r8, asr r7
    2518:	0582c305 	streq	ip, [r2, #773]	; 0x305
    251c:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    2520:	000007e2 	andeq	r0, r0, r2, ror #15
    2524:	05acc505 	streq	ip, [ip, #1285]!	; 0x505
    2528:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    252c:	00000943 	andeq	r0, r0, r3, asr #18
    2530:	05d0c805 	ldrbeq	ip, [r0, #2053]	; 0x805
    2534:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    2538:	00000a5c 	andeq	r0, r0, ip, asr sl
    253c:	05eac905 	strbeq	ip, [sl, #2309]!	; 0x905
    2540:	102c0000 	eorne	r0, ip, r0
    2544:	0062755f 	rsbeq	r7, r2, pc, asr r5
    2548:	02c0cc05 	sbceq	ip, r0, #1280	; 0x500
    254c:	10300000 	eorsne	r0, r0, r0
    2550:	0070755f 	rsbseq	r7, r0, pc, asr r5
    2554:	02e5cd05 	rsceq	ip, r5, #320	; 0x140
    2558:	10380000 	eorsne	r0, r8, r0
    255c:	0072755f 	rsbseq	r7, r2, pc, asr r5
    2560:	006cce05 	rsbeq	ip, ip, r5, lsl #28
    2564:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    2568:	0000066c 	andeq	r0, r0, ip, ror #12
    256c:	05f0d105 	ldrbeq	sp, [r0, #261]!	; 0x105
    2570:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    2574:	00000a34 	andeq	r0, r0, r4, lsr sl
    2578:	0600d205 	streq	sp, [r0], -r5, lsl #4
    257c:	10430000 	subne	r0, r3, r0
    2580:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    2584:	02c0d505 	sbceq	sp, r0, #20971520	; 0x1400000
    2588:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    258c:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
    2590:	006cd805 	rsbeq	sp, ip, r5, lsl #16
    2594:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    2598:	000006cc 	andeq	r0, r0, ip, asr #13
    259c:	0099d905 	addseq	sp, r9, r5, lsl #18
    25a0:	0e500000 	cdpeq	0, 5, cr0, cr0, cr0, {0}
    25a4:	000005f2 	strdeq	r0, [r0], -r2
    25a8:	0433dc05 	ldrteq	sp, [r3], #-3077	; 0xfffff3fb
    25ac:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    25b0:	000007c8 	andeq	r0, r0, r8, asr #15
    25b4:	011de005 	tsteq	sp, r5
    25b8:	0e580000 	cdpeq	0, 5, cr0, cr8, cr0, {0}
    25bc:	000008d9 	ldrdeq	r0, [r0], -r9
    25c0:	0112e205 	tsteq	r2, r5, lsl #4
    25c4:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    25c8:	000007da 	ldrdeq	r0, [r0], -sl
    25cc:	006ce305 	rsbeq	lr, ip, r5, lsl #6
    25d0:	00640000 	rsbeq	r0, r4, r0
    25d4:	00006c15 	andeq	r6, r0, r5, lsl ip
    25d8:	00043300 	andeq	r3, r4, r0, lsl #6
    25dc:	04331600 	ldrteq	r1, [r3], #-1536	; 0xfffffa00
    25e0:	8c160000 	ldchi	0, cr0, [r6], {-0}
    25e4:	16000000 	strne	r0, [r0], -r0
    25e8:	00000570 	andeq	r0, r0, r0, ror r5
    25ec:	00006c16 	andeq	r6, r0, r6, lsl ip
    25f0:	04110000 	ldreq	r0, [r1], #-0
    25f4:	0000043e 	andeq	r0, r0, lr, lsr r4
    25f8:	00043303 	andeq	r3, r4, r3, lsl #6
    25fc:	09261700 	stmdbeq	r6!, {r8, r9, sl, ip}
    2600:	04280000 	strteq	r0, [r8], #-0
    2604:	70023805 	andvc	r3, r2, r5, lsl #16
    2608:	18000005 	stmdane	r0, {r0, r2}
    260c:	00000897 	muleq	r0, r7, r8
    2610:	6c023a05 			; <UNDEFINED> instruction: 0x6c023a05
    2614:	00000000 	andeq	r0, r0, r0
    2618:	0006b418 	andeq	fp, r6, r8, lsl r4
    261c:	023f0500 	eorseq	r0, pc, #0, 10
    2620:	00000657 	andeq	r0, r0, r7, asr r6
    2624:	07741804 	ldrbeq	r1, [r4, -r4, lsl #16]!
    2628:	3f050000 	svccc	0x00050000
    262c:	00065702 	andeq	r5, r6, r2, lsl #14
    2630:	39180800 	ldmdbcc	r8, {fp}
    2634:	05000007 	streq	r0, [r0, #-7]
    2638:	0657023f 			; <UNDEFINED> instruction: 0x0657023f
    263c:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    2640:	000008fa 	strdeq	r0, [r0], -sl
    2644:	6c024105 	stfvss	f4, [r2], {5}
    2648:	10000000 	andne	r0, r0, r0
    264c:	0005e718 	andeq	lr, r5, r8, lsl r7
    2650:	02420500 	subeq	r0, r2, #0, 10
    2654:	00000839 	andeq	r0, r0, r9, lsr r8
    2658:	09c11814 	stmibeq	r1, {r2, r4, fp, ip}^
    265c:	44050000 	strmi	r0, [r5], #-0
    2660:	00006c02 	andeq	r6, r0, r2, lsl #24
    2664:	04183000 	ldreq	r3, [r8], #-0
    2668:	05000009 	streq	r0, [r0, #-9]
    266c:	05a60245 	streq	r0, [r6, #581]!	; 0x245
    2670:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    2674:	00000854 	andeq	r0, r0, r4, asr r8
    2678:	6c024705 	stcvs	7, cr4, [r2], {5}
    267c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2680:	00091418 	andeq	r1, r9, r8, lsl r4
    2684:	02490500 	subeq	r0, r9, #0, 10
    2688:	00000854 	andeq	r0, r0, r4, asr r8
    268c:	07b3183c 			; <UNDEFINED> instruction: 0x07b3183c
    2690:	4c050000 	stcmi	0, cr0, [r5], {-0}
    2694:	00018602 	andeq	r8, r1, r2, lsl #12
    2698:	5e184000 	cdppl	0, 1, cr4, cr8, cr0, {0}
    269c:	05000007 	streq	r0, [r0, #-7]
    26a0:	006c024d 	rsbeq	r0, ip, sp, asr #4
    26a4:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    26a8:	00000a76 	andeq	r0, r0, r6, ror sl
    26ac:	86024e05 	strhi	r4, [r2], -r5, lsl #28
    26b0:	48000001 	stmdami	r0, {r0}
    26b4:	00086618 	andeq	r6, r8, r8, lsl r6
    26b8:	024f0500 	subeq	r0, pc, #0, 10
    26bc:	0000085a 	andeq	r0, r0, sl, asr r8
    26c0:	077c184c 	ldrbeq	r1, [ip, -ip, asr #16]!
    26c4:	52050000 	andpl	r0, r5, #0
    26c8:	00006c02 	andeq	r6, r0, r2, lsl #24
    26cc:	c4185000 	ldrgt	r5, [r8], #-0
    26d0:	05000006 	streq	r0, [r0, #-6]
    26d4:	05700253 	ldrbeq	r0, [r0, #-595]!	; 0xfffffdad
    26d8:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    26dc:	00000890 	muleq	r0, r0, r8
    26e0:	17027605 	strne	r7, [r2, -r5, lsl #12]
    26e4:	58000008 	stmdapl	r0, {r3}
    26e8:	00084219 	andeq	r4, r8, r9, lsl r2
    26ec:	027a0500 	rsbseq	r0, sl, #0, 10
    26f0:	000002a3 	andeq	r0, r0, r3, lsr #5
    26f4:	91190148 	tstls	r9, r8, asr #2
    26f8:	05000007 	streq	r0, [r0, #-7]
    26fc:	0265027b 	rsbeq	r0, r5, #-1342177273	; 0xb0000007
    2700:	014c0000 	mrseq	r0, (UNDEF: 76)
    2704:	000a1819 	andeq	r1, sl, r9, lsl r8
    2708:	027f0500 	rsbseq	r0, pc, #0, 10
    270c:	0000086b 	andeq	r0, r0, fp, ror #16
    2710:	9d1902dc 	lfmls	f0, 4, [r9, #-880]	; 0xfffffc90
    2714:	05000006 	streq	r0, [r0, #-6]
    2718:	061c0284 	ldreq	r0, [ip], -r4, lsl #5
    271c:	02e00000 	rsceq	r0, r0, #0
    2720:	00068219 	andeq	r8, r6, r9, lsl r2
    2724:	02850500 	addeq	r0, r5, #0, 10
    2728:	00000877 	andeq	r0, r0, r7, ror r8
    272c:	110002ec 	smlattne	r0, ip, r2, r0
    2730:	00057604 	andeq	r7, r5, r4, lsl #12
    2734:	08010200 	stmdaeq	r1, {r9}
    2738:	0000088b 	andeq	r0, r0, fp, lsl #17
    273c:	00057603 	andeq	r7, r5, r3, lsl #12
    2740:	15041100 	strne	r1, [r4, #-256]	; 0xffffff00
    2744:	15000004 	strne	r0, [r0, #-4]
    2748:	0000006c 	andeq	r0, r0, ip, rrx
    274c:	000005a6 	andeq	r0, r0, r6, lsr #11
    2750:	00043316 	andeq	r3, r4, r6, lsl r3
    2754:	008c1600 	addeq	r1, ip, r0, lsl #12
    2758:	a6160000 	ldrge	r0, [r6], -r0
    275c:	16000005 	strne	r0, [r0], -r5
    2760:	0000006c 	andeq	r0, r0, ip, rrx
    2764:	7d041100 	stfvcs	f1, [r4, #-0]
    2768:	11000005 	tstne	r0, r5
    276c:	00058804 	andeq	r8, r5, r4, lsl #16
    2770:	00a41500 	adceq	r1, r4, r0, lsl #10
    2774:	05d00000 	ldrbeq	r0, [r0]
    2778:	33160000 	tstcc	r6, #0
    277c:	16000004 	strne	r0, [r0], -r4
    2780:	0000008c 	andeq	r0, r0, ip, lsl #1
    2784:	0000a416 	andeq	sl, r0, r6, lsl r4
    2788:	006c1600 	rsbeq	r1, ip, r0, lsl #12
    278c:	11000000 	mrsne	r0, (UNDEF: 0)
    2790:	0005b204 	andeq	fp, r5, r4, lsl #4
    2794:	006c1500 	rsbeq	r1, ip, r0, lsl #10
    2798:	05ea0000 	strbeq	r0, [sl, #0]!
    279c:	33160000 	tstcc	r6, #0
    27a0:	16000004 	strne	r0, [r0], -r4
    27a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    27a8:	d6041100 	strle	r1, [r4], -r0, lsl #2
    27ac:	0b000005 	bleq	27c8 <_start-0x5838>
    27b0:	00000031 	andeq	r0, r0, r1, lsr r0
    27b4:	00000600 	andeq	r0, r0, r0, lsl #12
    27b8:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    27bc:	0b000200 	bleq	2fc4 <_start-0x503c>
    27c0:	00000031 	andeq	r0, r0, r1, lsr r0
    27c4:	00000610 	andeq	r0, r0, r0, lsl r6
    27c8:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    27cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    27d0:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    27d4:	eb011d05 	bl	49bf0 <__bss_end+0x340c0>
    27d8:	1a000002 	bne	27e8 <_start-0x5818>
    27dc:	000009ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    27e0:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
    27e4:	00000651 	andeq	r0, r0, r1, asr r6
    27e8:	0008e718 	andeq	lr, r8, r8, lsl r7
    27ec:	01230500 			; <UNDEFINED> instruction: 0x01230500
    27f0:	00000651 	andeq	r0, r0, r1, asr r6
    27f4:	078a1800 	streq	r1, [sl, r0, lsl #16]
    27f8:	24050000 	strcs	r0, [r5], #-0
    27fc:	00006c01 	andeq	r6, r0, r1, lsl #24
    2800:	b9180400 	ldmdblt	r8, {sl}
    2804:	05000008 	streq	r0, [r0, #-8]
    2808:	06570125 	ldrbeq	r0, [r7], -r5, lsr #2
    280c:	00080000 	andeq	r0, r8, r0
    2810:	061c0411 			; <UNDEFINED> instruction: 0x061c0411
    2814:	04110000 	ldreq	r0, [r1], #-0
    2818:	00000610 	andeq	r0, r0, r0, lsl r6
    281c:	0005df1a 	andeq	sp, r5, sl, lsl pc
    2820:	3d050e00 	stccc	14, cr0, [r5, #-0]
    2824:	00069201 	andeq	r9, r6, r1, lsl #4
    2828:	092d1800 	pusheq	{fp, ip}
    282c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    2830:	00069201 	andeq	r9, r6, r1, lsl #4
    2834:	6d180000 	ldcvs	0, cr0, [r8, #-0]
    2838:	05000009 	streq	r0, [r0, #-9]
    283c:	0692013f 			; <UNDEFINED> instruction: 0x0692013f
    2840:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    2844:	00000989 	andeq	r0, r0, r9, lsl #19
    2848:	3f014005 	svccc	0x00014005
    284c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2850:	003f0b00 	eorseq	r0, pc, r0, lsl #22
    2854:	06a20000 	strteq	r0, [r2], r0
    2858:	ea0c0000 	b	302860 <__bss_end+0x2ecd30>
    285c:	02000000 	andeq	r0, r0, #0
    2860:	05d01b00 	ldrbeq	r1, [r0, #2816]	; 0xb00
    2864:	07a30257 	sbfxeq	r0, r7, #4, #4
    2868:	d3180000 	tstle	r8, #0
    286c:	05000009 	streq	r0, [r0, #-9]
    2870:	00730259 	rsbseq	r0, r3, r9, asr r2
    2874:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2878:	00000973 	andeq	r0, r0, r3, ror r9
    287c:	70025a05 	andvc	r5, r2, r5, lsl #20
    2880:	04000005 	streq	r0, [r0], #-5
    2884:	0007a618 	andeq	sl, r7, r8, lsl r6
    2888:	025b0500 	subseq	r0, fp, #0, 10
    288c:	000007a3 	andeq	r0, r0, r3, lsr #15
    2890:	0a4d1808 	beq	13488b8 <__bss_end+0x1332d88>
    2894:	5c050000 	stcpl	0, cr0, [r5], {-0}
    2898:	00019c02 	andeq	r9, r1, r2, lsl #24
    289c:	49182400 	ldmdbmi	r8, {sl, sp}
    28a0:	05000007 	streq	r0, [r0, #-7]
    28a4:	006c025d 	rsbeq	r0, ip, sp, asr r2
    28a8:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    28ac:	000008e2 	andeq	r0, r0, r2, ror #17
    28b0:	65025e05 	strvs	r5, [r2, #-3589]	; 0xfffff1fb
    28b4:	50000000 	andpl	r0, r0, r0
    28b8:	000a6318 	andeq	r6, sl, r8, lsl r3
    28bc:	025f0500 	subseq	r0, pc, #0, 10
    28c0:	0000065d 	andeq	r0, r0, sp, asr r6
    28c4:	08ed1858 	stmiaeq	sp!, {r3, r4, r6, fp, ip}^
    28c8:	60050000 	andvs	r0, r5, r0
    28cc:	00011202 	andeq	r1, r1, r2, lsl #4
    28d0:	68186800 	ldmdavs	r8, {fp, sp, lr}
    28d4:	0500000a 	streq	r0, [r0, #-10]
    28d8:	01120261 	tsteq	r2, r1, ror #4
    28dc:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    28e0:	00000655 	andeq	r0, r0, r5, asr r6
    28e4:	12026205 	andne	r6, r2, #1342177280	; 0x50000000
    28e8:	78000001 	stmdavc	r0, {r0}
    28ec:	000a0e18 	andeq	r0, sl, r8, lsl lr
    28f0:	02630500 	rsbeq	r0, r3, #0, 10
    28f4:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    28f8:	079a1880 	ldreq	r1, [sl, r0, lsl #17]
    28fc:	64050000 	strvs	r0, [r5], #-0
    2900:	0007c302 	andeq	ip, r7, r2, lsl #6
    2904:	a1188800 	tstge	r8, r0, lsl #16
    2908:	05000009 	streq	r0, [r0, #-9]
    290c:	006c0265 	rsbeq	r0, ip, r5, ror #4
    2910:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    2914:	000006fb 	strdeq	r0, [r0], -fp
    2918:	12026605 	andne	r6, r2, #5242880	; 0x500000
    291c:	a4000001 	strge	r0, [r0], #-1
    2920:	00064618 	andeq	r4, r6, r8, lsl r6
    2924:	02670500 	rsbeq	r0, r7, #0, 10
    2928:	00000112 	andeq	r0, r0, r2, lsl r1
    292c:	06ea18ac 	strbteq	r1, [sl], ip, lsr #17
    2930:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    2934:	00011202 	andeq	r1, r1, r2, lsl #4
    2938:	f818b400 			; <UNDEFINED> instruction: 0xf818b400
    293c:	05000005 	streq	r0, [r0, #-5]
    2940:	01120269 	tsteq	r2, r9, ror #4
    2944:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    2948:	00000607 	andeq	r0, r0, r7, lsl #12
    294c:	12026a05 	andne	r6, r2, #20480	; 0x5000
    2950:	c4000001 	strgt	r0, [r0], #-1
    2954:	00089518 	andeq	r9, r8, r8, lsl r5
    2958:	026b0500 	rsbeq	r0, fp, #0, 10
    295c:	0000006c 	andeq	r0, r0, ip, rrx
    2960:	760b00cc 	strvc	r0, [fp], -ip, asr #1
    2964:	b3000005 	movwlt	r0, #5
    2968:	0c000007 	stceq	0, cr0, [r0], {7}
    296c:	000000ea 	andeq	r0, r0, sl, ror #1
    2970:	760b0019 			; <UNDEFINED> instruction: 0x760b0019
    2974:	c3000005 	movwgt	r0, #5
    2978:	0c000007 	stceq	0, cr0, [r0], {7}
    297c:	000000ea 	andeq	r0, r0, sl, ror #1
    2980:	760b0007 	strvc	r0, [fp], -r7
    2984:	d3000005 	movwle	r0, #5
    2988:	0c000007 	stceq	0, cr0, [r0], {7}
    298c:	000000ea 	andeq	r0, r0, sl, ror #1
    2990:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    2994:	f7027005 			; <UNDEFINED> instruction: 0xf7027005
    2998:	18000007 	stmdane	r0, {r0, r1, r2}
    299c:	00000832 	andeq	r0, r0, r2, lsr r8
    29a0:	f7027305 			; <UNDEFINED> instruction: 0xf7027305
    29a4:	00000007 	andeq	r0, r0, r7
    29a8:	000a0518 	andeq	r0, sl, r8, lsl r5
    29ac:	02740500 	rsbseq	r0, r4, #0, 10
    29b0:	00000807 	andeq	r0, r0, r7, lsl #16
    29b4:	e50b0078 	str	r0, [fp, #-120]	; 0xffffff88
    29b8:	07000002 	streq	r0, [r0, -r2]
    29bc:	0c000008 	stceq	0, cr0, [r0], {8}
    29c0:	000000ea 	andeq	r0, r0, sl, ror #1
    29c4:	730b001d 	movwvc	r0, #45085	; 0xb01d
    29c8:	17000000 	strne	r0, [r0, -r0]
    29cc:	0c000008 	stceq	0, cr0, [r0], {8}
    29d0:	000000ea 	andeq	r0, r0, sl, ror #1
    29d4:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    29d8:	39025505 	stmdbcc	r2, {r0, r2, r8, sl, ip, lr}
    29dc:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    29e0:	00000926 	andeq	r0, r0, r6, lsr #18
    29e4:	a2026c05 	andge	r6, r2, #1280	; 0x500
    29e8:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    29ec:	00000a3a 	andeq	r0, r0, sl, lsr sl
    29f0:	d3027505 	movwle	r7, #9477	; 0x2505
    29f4:	00000007 	andeq	r0, r0, r7
    29f8:	0005760b 	andeq	r7, r5, fp, lsl #12
    29fc:	00084900 	andeq	r4, r8, r0, lsl #18
    2a00:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    2a04:	00180000 	andseq	r0, r8, r0
    2a08:	0008541e 	andeq	r5, r8, lr, lsl r4
    2a0c:	04331600 	ldrteq	r1, [r3], #-1536	; 0xfffffa00
    2a10:	11000000 	mrsne	r0, (UNDEF: 0)
    2a14:	00084904 	andeq	r4, r8, r4, lsl #18
    2a18:	86041100 	strhi	r1, [r4], -r0, lsl #2
    2a1c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    2a20:	0000086b 	andeq	r0, r0, fp, ror #16
    2a24:	00006c16 	andeq	r6, r0, r6, lsl ip
    2a28:	04110000 	ldreq	r0, [r1], #-0
    2a2c:	00000871 	andeq	r0, r0, r1, ror r8
    2a30:	08600411 	stmdaeq	r0!, {r0, r4, sl}^
    2a34:	100b0000 	andne	r0, fp, r0
    2a38:	87000006 	strhi	r0, [r0, -r6]
    2a3c:	0c000008 	stceq	0, cr0, [r0], {8}
    2a40:	000000ea 	andeq	r0, r0, sl, ror #1
    2a44:	b51f0002 	ldrlt	r0, [pc, #-2]	; 2a4a <_start-0x55b6>
    2a48:	05000009 	streq	r0, [r0, #-9]
    2a4c:	043302fd 	ldrteq	r0, [r3], #-765	; 0xfffffd03
    2a50:	ae1f0000 	cdpge	0, 1, cr0, cr15, cr0, {0}
    2a54:	05000009 	streq	r0, [r0, #-9]
    2a58:	043902fe 	ldrteq	r0, [r9], #-766	; 0xfffffd02
    2a5c:	4a200000 	bmi	802a64 <__bss_end+0x7ecf34>
    2a60:	06000008 	streq	r0, [r0], -r8
    2a64:	0005705f 	andeq	r7, r5, pc, asr r0
    2a68:	006c0600 	rsbeq	r0, ip, r0, lsl #12
    2a6c:	47070000 	strmi	r0, [r7, -r0]
    2a70:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    2a74:	08bb0411 	ldmeq	fp!, {r0, r4, sl}
    2a78:	c61e0000 	ldrgt	r0, [lr], -r0
    2a7c:	16000008 	strne	r0, [r0], -r8
    2a80:	0000008c 	andeq	r0, r0, ip, lsl #1
    2a84:	000c0600 	andeq	r0, ip, r0, lsl #12
    2a88:	61080000 	mrsvs	r0, (UNDEF: 8)
    2a8c:	00000052 	andeq	r0, r0, r2, asr r0
    2a90:	0008c604 	andeq	ip, r8, r4, lsl #12
    2a94:	10aa0600 	adcne	r0, sl, r0, lsl #12
    2a98:	57090000 	strpl	r0, [r9, -r0]
    2a9c:	000008e1 	andeq	r0, r0, r1, ror #17
    2aa0:	08e70411 	stmiaeq	r7!, {r0, r4, sl}^
    2aa4:	46150000 	ldrmi	r0, [r5], -r0
    2aa8:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    2aac:	16000008 	strne	r0, [r0], -r8
    2ab0:	0000008c 	andeq	r0, r0, ip, lsl #1
    2ab4:	032a0f00 			; <UNDEFINED> instruction: 0x032a0f00
    2ab8:	0a140000 	beq	502ac0 <__bss_end+0x4ecf90>
    2abc:	00093f69 	andeq	r3, r9, r9, ror #30
    2ac0:	02dd0e00 	sbcseq	r0, sp, #0, 28
    2ac4:	6b0a0000 	blvs	282acc <__bss_end+0x26cf9c>
    2ac8:	000008c6 	andeq	r0, r0, r6, asr #17
    2acc:	04b70e00 	ldrteq	r0, [r7], #3584	; 0xe00
    2ad0:	6c0a0000 	stcvs	0, cr0, [sl], {-0}
    2ad4:	00000944 	andeq	r0, r0, r4, asr #18
    2ad8:	03ce0e04 	biceq	r0, lr, #4, 28	; 0x40
    2adc:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    2ae0:	00000944 	andeq	r0, r0, r4, asr #18
    2ae4:	02ff0e08 	rscseq	r0, pc, #8, 28	; 0x80
    2ae8:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    2aec:	0000008c 	andeq	r0, r0, ip, lsl #1
    2af0:	02a80e0c 	adceq	r0, r8, #12, 28	; 0xc0
    2af4:	6f0a0000 	svcvs	0x000a0000
    2af8:	0000008c 	andeq	r0, r0, ip, lsl #1
    2afc:	f6040010 			; <UNDEFINED> instruction: 0xf6040010
    2b00:	11000008 	tstne	r0, r8
    2b04:	00093f04 	andeq	r3, r9, r4, lsl #30
    2b08:	04ca0600 	strbeq	r0, [sl], #1536	; 0x600
    2b0c:	710a0000 	mrsvc	r0, (UNDEF: 10)
    2b10:	000008f6 	strdeq	r0, [r0], -r6
    2b14:	00094a04 	andeq	r4, r9, r4, lsl #20
    2b18:	05260f00 	streq	r0, [r6, #-3840]!	; 0xfffff100
    2b1c:	0a0c0000 	beq	302b24 <__bss_end+0x2ecff4>
    2b20:	00098b73 	andeq	r8, r9, r3, ror fp
    2b24:	02dd0e00 	sbcseq	r0, sp, #0, 28
    2b28:	750a0000 	strvc	r0, [sl, #-0]
    2b2c:	000008c6 	andeq	r0, r0, r6, asr #17
    2b30:	04b70e00 	ldrteq	r0, [r7], #3584	; 0xe00
    2b34:	760a0000 	strvc	r0, [sl], -r0
    2b38:	00000944 	andeq	r0, r0, r4, asr #18
    2b3c:	03ce0e04 	biceq	r0, lr, #4, 28	; 0x40
    2b40:	770a0000 	strvc	r0, [sl, -r0]
    2b44:	00000944 	andeq	r0, r0, r4, asr #18
    2b48:	3e060008 	cdpcc	0, 0, cr0, cr6, cr8, {0}
    2b4c:	0a000004 	beq	2b64 <_start-0x549c>
    2b50:	00095a79 	andeq	r5, r9, r9, ror sl
    2b54:	098b0400 	stmibeq	fp, {sl}
    2b58:	360f0000 	strcc	r0, [pc], -r0
    2b5c:	14000005 	strne	r0, [r0], #-5
    2b60:	09cc7e0a 	stmibeq	ip, {r1, r3, r9, sl, fp, ip, sp, lr}^
    2b64:	5d0e0000 	stcpl	0, cr0, [lr, #-0]
    2b68:	0a000004 	beq	2b80 <_start-0x5480>
    2b6c:	00005980 	andeq	r5, r0, r0, lsl #19
    2b70:	d50e0000 	strle	r0, [lr, #-0]
    2b74:	0a000002 	beq	2b84 <_start-0x547c>
    2b78:	0009cc81 	andeq	ip, r9, r1, lsl #25
    2b7c:	f60e0400 			; <UNDEFINED> instruction: 0xf60e0400
    2b80:	0a000002 	beq	2b90 <_start-0x5470>
    2b84:	00099682 	andeq	r9, r9, r2, lsl #13
    2b88:	11000800 	tstne	r0, r0, lsl #16
    2b8c:	00095504 	andeq	r5, r9, r4, lsl #10
    2b90:	095e0600 	ldmdbeq	lr, {r9, sl}^
    2b94:	830a0000 	movwhi	r0, #40960	; 0xa000
    2b98:	0000099b 	muleq	r0, fp, r9
    2b9c:	0009d203 	andeq	sp, r9, r3, lsl #4
    2ba0:	0ffb0600 	svceq	0x00fb0600
    2ba4:	630b0000 	movwvs	r0, #45056	; 0xb000
    2ba8:	0000008c 	andeq	r0, r0, ip, lsl #1
    2bac:	000b730f 	andeq	r7, fp, pc, lsl #6
    2bb0:	680b0800 	stmdavs	fp, {fp}
    2bb4:	00000a12 	andeq	r0, r0, r2, lsl sl
    2bb8:	000b970e 	andeq	r9, fp, lr, lsl #14
    2bbc:	466a0b00 	strbtmi	r0, [sl], -r0, lsl #22
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	000da30e 	andeq	sl, sp, lr, lsl #6
    2bc8:	c66b0b00 	strbtgt	r0, [fp], -r0, lsl #22
    2bcc:	04000008 	streq	r0, [r0], #-8
    2bd0:	0c080600 	stceq	6, cr0, [r8], {-0}
    2bd4:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
    2bd8:	000009ed 	andeq	r0, r0, sp, ror #19
    2bdc:	00119e0f 	andseq	r9, r1, pc, lsl #28
    2be0:	710b0c00 	tstvc	fp, r0, lsl #24
    2be4:	00000a4e 	andeq	r0, r0, lr, asr #20
    2be8:	00130f0e 	andseq	r0, r3, lr, lsl #30
    2bec:	8c730b00 			; <UNDEFINED> instruction: 0x8c730b00
    2bf0:	00000000 	andeq	r0, r0, r0
    2bf4:	0012980e 	andseq	r9, r2, lr, lsl #16
    2bf8:	52740b00 	rsbspl	r0, r4, #0, 22
    2bfc:	04000000 	streq	r0, [r0], #-0
    2c00:	000e4d0e 	andeq	r4, lr, lr, lsl #26
    2c04:	52750b00 	rsbspl	r0, r5, #0, 22
    2c08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2c0c:	11630600 	cmnne	r3, r0, lsl #12
    2c10:	760b0000 	strvc	r0, [fp], -r0
    2c14:	00000a1d 	andeq	r0, r0, sp, lsl sl
    2c18:	000a4e03 	andeq	r4, sl, r3, lsl #28
    2c1c:	2c041100 	stfcss	f1, [r4], {-0}
    2c20:	03000000 	movweq	r0, #0
    2c24:	00000a5e 	andeq	r0, r0, lr, asr sl
    2c28:	00520411 	subseq	r0, r2, r1, lsl r4
    2c2c:	d90f0000 	stmdble	pc, {}	; <UNPREDICTABLE>
    2c30:	4800000d 	stmdami	r0, {r0, r2, r3}
    2c34:	0ad06601 	beq	ff41c440 <_estack+0xf740c440>
    2c38:	500e0000 	andpl	r0, lr, r0
    2c3c:	01000001 	tsteq	r0, r1
    2c40:	000ad068 	andeq	sp, sl, r8, rrx
    2c44:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    2c48:	01000005 	tsteq	r0, r5
    2c4c:	00094a6e 	andeq	r4, r9, lr, ror #20
    2c50:	990e0400 	stmdbls	lr, {sl}
    2c54:	01000005 	tsteq	r0, r5
    2c58:	00094a6f 	andeq	r4, r9, pc, ror #20
    2c5c:	800e1800 	andhi	r1, lr, r0, lsl #16
    2c60:	01000004 	tsteq	r0, r4
    2c64:	00005270 	andeq	r5, r0, r0, ror r2
    2c68:	160e2c00 	strne	r2, [lr], -r0, lsl #24
    2c6c:	01000012 	tsteq	r0, r2, lsl r0
    2c70:	000a6971 	andeq	r6, sl, r1, ror r9
    2c74:	bc0e3000 	stclt	0, cr3, [lr], {-0}
    2c78:	0100000d 	tsteq	r0, sp
    2c7c:	000ad672 	andeq	sp, sl, r2, ror r6
    2c80:	0c0e3400 	cfstrseq	mvf3, [lr], {-0}
    2c84:	01000012 	tsteq	r0, r2, lsl r0
    2c88:	0008d686 	andeq	sp, r8, r6, lsl #13
    2c8c:	11004400 	tstne	r0, r0, lsl #8
    2c90:	00005904 	andeq	r5, r0, r4, lsl #18
    2c94:	00250b00 	eoreq	r0, r5, r0, lsl #22
    2c98:	0ae60000 	beq	ff982ca0 <_estack+0xf7972ca0>
    2c9c:	ea0c0000 	b	302ca4 <__bss_end+0x2ed174>
    2ca0:	0f000000 	svceq	0x00000000
    2ca4:	10070600 	andne	r0, r7, r0, lsl #12
    2ca8:	93010000 	movwls	r0, #4096	; 0x1000
    2cac:	00000a6f 	andeq	r0, r0, pc, ror #20
    2cb0:	000ae603 	andeq	lr, sl, r3, lsl #12
    2cb4:	02692100 	rsbeq	r2, r9, #0, 2
    2cb8:	9f010000 	svcls	0x00010000
    2cbc:	00000b0d 	andeq	r0, r0, sp, lsl #22
    2cc0:	47d40305 	ldrbmi	r0, [r4, r5, lsl #6]
    2cc4:	04110001 	ldreq	r0, [r1], #-1
    2cc8:	00000ae6 	andeq	r0, r0, r6, ror #21
    2ccc:	000b0704 	andeq	r0, fp, r4, lsl #14
    2cd0:	09d20b00 	ldmibeq	r2, {r8, r9, fp}^
    2cd4:	0b220000 	bleq	882cdc <__bss_end+0x86d1ac>
    2cd8:	ea0c0000 	b	302ce0 <__bss_end+0x2ed1b0>
    2cdc:	04000000 	streq	r0, [r0], #-0
    2ce0:	0e3b2200 	cdpeq	2, 3, cr2, cr11, cr0, {0}
    2ce4:	a3010000 	movwge	r0, #4096	; 0x1000
    2ce8:	00000b12 	andeq	r0, r0, r2, lsl fp
    2cec:	47d80305 	ldrbmi	r0, [r8, r5, lsl #6]
    2cf0:	81220001 			; <UNDEFINED> instruction: 0x81220001
    2cf4:	0100000e 	tsteq	r0, lr
    2cf8:	0009d2a4 	andeq	sp, r9, r4, lsr #5
    2cfc:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    2d00:	22000148 	andcs	r0, r0, #72, 2
    2d04:	00000e93 	muleq	r0, r3, lr
    2d08:	09d2a501 	ldmibeq	r2, {r0, r8, sl, sp, pc}^
    2d0c:	03050000 	movweq	r0, #20480	; 0x5000
    2d10:	00014850 	andeq	r4, r1, r0, asr r8
    2d14:	00122d22 	andseq	r2, r2, r2, lsr #26
    2d18:	6ca60100 	stfvss	f0, [r6]
    2d1c:	0500000b 	streq	r0, [r0, #-11]
    2d20:	01486403 	cmpeq	r8, r3, lsl #8
    2d24:	d2041100 	andle	r1, r4, #0, 2
    2d28:	04000009 	streq	r0, [r0], #-9
    2d2c:	00000b66 	andeq	r0, r0, r6, ror #22
    2d30:	000b6603 	andeq	r6, fp, r3, lsl #12
    2d34:	10362200 	eorsne	r2, r6, r0, lsl #4
    2d38:	a7010000 	strge	r0, [r1, -r0]
    2d3c:	00000b6c 	andeq	r0, r0, ip, ror #22
    2d40:	48680305 	stmdami	r8!, {r0, r2, r8, r9}^
    2d44:	6c220001 	stcvs	0, cr0, [r2], #-4
    2d48:	0100000f 	tsteq	r0, pc
    2d4c:	0009d2a8 	andeq	sp, r9, r8, lsr #5
    2d50:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    2d54:	22000148 	andcs	r0, r0, #72, 2
    2d58:	00000fc5 	andeq	r0, r0, r5, asr #31
    2d5c:	09d2ac01 	ldmibeq	r2, {r0, sl, fp, sp, pc}^
    2d60:	03050000 	movweq	r0, #20480	; 0x5000
    2d64:	00014880 	andeq	r4, r1, r0, lsl #17
    2d68:	00101c22 	andseq	r1, r0, r2, lsr #24
    2d6c:	59ad0100 	stmibpl	sp!, {r8}
    2d70:	05000000 	streq	r0, [r0, #-0]
    2d74:	01489403 	cmpeq	r8, r3, lsl #8
    2d78:	0f402200 	svceq	0x00402200
    2d7c:	b3010000 	movwlt	r0, #4096	; 0x1000
    2d80:	000009d2 	ldrdeq	r0, [r0], -r2
    2d84:	48980305 	ldmmi	r8, {r0, r2, r8, r9}
    2d88:	bc220001 	stclt	0, cr0, [r2], #-4
    2d8c:	01000013 	tsteq	r0, r3, lsl r0
    2d90:	000059be 			; <UNDEFINED> instruction: 0x000059be
    2d94:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    2d98:	22000148 	andcs	r0, r0, #72, 2
    2d9c:	0000102b 	andeq	r1, r0, fp, lsr #32
    2da0:	08d1bf01 	ldmeq	r1, {r0, r8, r9, sl, fp, ip, sp, pc}^
    2da4:	03050000 	movweq	r0, #20480	; 0x5000
    2da8:	000148b0 			; <UNDEFINED> instruction: 0x000148b0
    2dac:	00123f22 	andseq	r3, r2, r2, lsr #30
    2db0:	52c00100 	sbcpl	r0, r0, #0, 2
    2db4:	05000000 	streq	r0, [r0, #-0]
    2db8:	0148b403 	cmpeq	r8, r3, lsl #8
    2dbc:	0e042200 	cdpeq	2, 0, cr2, cr4, cr0, {0}
    2dc0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2dc4:	00000059 	andeq	r0, r0, r9, asr r0
    2dc8:	48b80305 	ldmmi	r8!, {r0, r2, r8, r9}
    2dcc:	29220001 	stmdbcs	r2!, {r0}
    2dd0:	0100000e 	tsteq	r0, lr
    2dd4:	00004dc2 	andeq	r4, r0, r2, asr #27
    2dd8:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    2ddc:	22000148 	andcs	r0, r0, #72, 2
    2de0:	00000f05 	andeq	r0, r0, r5, lsl #30
    2de4:	0059c301 	subseq	ip, r9, r1, lsl #6
    2de8:	03050000 	movweq	r0, #20480	; 0x5000
    2dec:	000148c0 	andeq	r4, r1, r0, asr #17
    2df0:	000ed922 	andeq	sp, lr, r2, lsr #18
    2df4:	59c40100 	stmibpl	r4, {r8}^
    2df8:	05000000 	streq	r0, [r0, #-0]
    2dfc:	0148c403 	cmpeq	r8, r3, lsl #8
    2e00:	0fde2200 	svceq	0x00de2200
    2e04:	c5010000 	strgt	r0, [r1, #-0]
    2e08:	0000004d 	andeq	r0, r0, sp, asr #32
    2e0c:	48c80305 	stmiami	r8, {r0, r2, r8, r9}^
    2e10:	fc220001 	stc2	0, cr0, [r2], #-4
    2e14:	01000011 	tsteq	r0, r1, lsl r0
    2e18:	00004dc6 	andeq	r4, r0, r6, asr #27
    2e1c:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    2e20:	22000148 	andcs	r0, r0, #72, 2
    2e24:	00001145 	andeq	r1, r0, r5, asr #2
    2e28:	0052c701 	subseq	ip, r2, r1, lsl #14
    2e2c:	03050000 	movweq	r0, #20480	; 0x5000
    2e30:	000148d0 	ldrdeq	r4, [r1], -r0
    2e34:	0010fd22 	andseq	pc, r0, r2, lsr #26
    2e38:	c6c80100 	strbgt	r0, [r8], r0, lsl #2
    2e3c:	05000008 	streq	r0, [r0, #-8]
    2e40:	01474803 	cmpeq	r7, r3, lsl #16
    2e44:	132d2300 			; <UNDEFINED> instruction: 0x132d2300
    2e48:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    2e4c:	01348c09 	teqeq	r4, r9, lsl #24
    2e50:	00003400 	andeq	r3, r0, r0, lsl #8
    2e54:	ac9c0100 	ldfges	f0, [ip], {0}
    2e58:	2400000c 	strcs	r0, [r0], #-12
    2e5c:	000013e2 	andeq	r1, r0, r2, ror #7
    2e60:	07092901 	streq	r2, [r9, -r1, lsl #18]
    2e64:	0200000b 	andeq	r0, r0, #11
    2e68:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    2e6c:	00000f29 	andeq	r0, r0, r9, lsr #30
    2e70:	07086a01 	streq	r6, [r8, -r1, lsl #20]
    2e74:	dc00000b 	stcle	0, cr0, [r0], {11}
    2e78:	b0000133 	andlt	r0, r0, r3, lsr r1
    2e7c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e80:	000cf49c 	muleq	ip, ip, r4
    2e84:	11122400 	tstne	r2, r0, lsl #8
    2e88:	6a010000 	bvs	42e90 <__bss_end+0x2d360>
    2e8c:	00003f08 	andeq	r3, r0, r8, lsl #30
    2e90:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    2e94:	0012cc24 	andseq	ip, r2, r4, lsr #24
    2e98:	086a0100 	stmdaeq	sl!, {r8}^
    2e9c:	00000a69 	andeq	r0, r0, r9, ror #20
    2ea0:	26689102 	strbtcs	r9, [r8], -r2, lsl #2
    2ea4:	000010d7 	ldrdeq	r1, [r0], -r7
    2ea8:	07086c01 	streq	r6, [r8, -r1, lsl #24]
    2eac:	0200000b 	andeq	r0, r0, #11
    2eb0:	23007491 	movwcs	r7, #1169	; 0x491
    2eb4:	0000139d 	muleq	r0, sp, r3
    2eb8:	24085001 	strcs	r5, [r8], #-1
    2ebc:	b8000133 	stmdalt	r0, {r0, r1, r4, r5, r8}
    2ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ec4:	000d1a9c 	muleq	sp, ip, sl
    2ec8:	04e72400 	strbteq	r2, [r7], #1024	; 0x400
    2ecc:	50010000 	andpl	r0, r1, r0
    2ed0:	0008c608 	andeq	ip, r8, r8, lsl #12
    2ed4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ed8:	12ef2300 	rscne	r2, pc, #0, 6
    2edc:	2d010000 	stccs	0, cr0, [r1, #-0]
    2ee0:	01326808 	teqeq	r2, r8, lsl #16
    2ee4:	0000bc00 	andeq	fp, r0, r0, lsl #24
    2ee8:	639c0100 	orrsvs	r0, ip, #0, 2
    2eec:	2700000d 	strcs	r0, [r0, -sp]
    2ef0:	00013274 	andeq	r3, r1, r4, ror r2
    2ef4:	00000098 	muleq	r0, r8, r0
    2ef8:	0010bb26 	andseq	fp, r0, r6, lsr #22
    2efc:	08310100 	ldmdaeq	r1!, {r8}
    2f00:	00000046 	andeq	r0, r0, r6, asr #32
    2f04:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    2f08:	000132b4 			; <UNDEFINED> instruction: 0x000132b4
    2f0c:	00000058 	andeq	r0, r0, r8, asr r0
    2f10:	0013e226 	andseq	lr, r3, r6, lsr #4
    2f14:	083d0100 	ldmdaeq	sp!, {r8}
    2f18:	00000b07 	andeq	r0, r0, r7, lsl #22
    2f1c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2f20:	93230000 			; <UNDEFINED> instruction: 0x93230000
    2f24:	0100000f 	tsteq	r0, pc
    2f28:	31a8080d 			; <UNDEFINED> instruction: 0x31a8080d
    2f2c:	00c00001 	sbceq	r0, r0, r1
    2f30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f34:	00000d89 	andeq	r0, r0, r9, lsl #27
    2f38:	00048026 	andeq	r8, r4, r6, lsr #32
    2f3c:	080f0100 	stmdaeq	pc, {r8}	; <UNPREDICTABLE>
    2f40:	00000052 	andeq	r0, r0, r2, asr r0
    2f44:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2f48:	00118423 	andseq	r8, r1, r3, lsr #8
    2f4c:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    2f50:	000130e8 	andeq	r3, r1, r8, ror #1
    2f54:	000000c0 	andeq	r0, r0, r0, asr #1
    2f58:	0deb9c01 	stcleq	12, cr9, [fp, #4]!
    2f5c:	e2240000 	eor	r0, r4, #0
    2f60:	01000013 	tsteq	r0, r3, lsl r0
    2f64:	0b0707b7 	bleq	1c4e48 <__bss_end+0x1af318>
    2f68:	91020000 	mrsls	r0, (UNDEF: 2)
    2f6c:	11342474 	teqne	r4, r4, ror r4
    2f70:	b7010000 	strlt	r0, [r1, -r0]
    2f74:	000a6407 	andeq	r6, sl, r7, lsl #8
    2f78:	70910200 	addsvc	r0, r1, r0, lsl #4
    2f7c:	00048024 	andeq	r8, r4, r4, lsr #32
    2f80:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    2f84:	00000052 	andeq	r0, r0, r2, asr r0
    2f88:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    2f8c:	00001394 	muleq	r0, r4, r3
    2f90:	f107b701 			; <UNDEFINED> instruction: 0xf107b701
    2f94:	0200000d 	andeq	r0, r0, #13
    2f98:	12246891 	eorne	r6, r4, #9502720	; 0x910000
    2f9c:	01000011 	tsteq	r0, r1, lsl r0
    2fa0:	003f07b7 	ldrhteq	r0, [pc], -r7
    2fa4:	91020000 	mrsls	r0, (UNDEF: 2)
    2fa8:	04110000 	ldreq	r0, [r1], #-0
    2fac:	00000a59 	andeq	r0, r0, r9, asr sl
    2fb0:	000deb03 	andeq	lr, sp, r3, lsl #22
    2fb4:	109e2300 	addsne	r2, lr, r0, lsl #6
    2fb8:	76010000 	strvc	r0, [r1], -r0
    2fbc:	0130b807 	teqeq	r0, r7, lsl #16
    2fc0:	00003000 	andeq	r3, r0, r0
    2fc4:	1c9c0100 	ldfnes	f0, [ip], {0}
    2fc8:	2400000e 	strcs	r0, [r0], #-14
    2fcc:	0000013d 	andeq	r0, r0, sp, lsr r1
    2fd0:	8c077601 	stchi	6, cr7, [r7], {1}
    2fd4:	02000000 	andeq	r0, r0, #0
    2fd8:	28007491 	stmdacs	r0, {r0, r4, r7, sl, ip, sp, lr}
    2fdc:	000012bb 			; <UNDEFINED> instruction: 0x000012bb
    2fe0:	90074201 	andls	r4, r7, r1, lsl #4
    2fe4:	28000130 	stmdacs	r0, {r4, r5, r8}
    2fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    2fec:	1251299c 	subsne	r2, r1, #156, 18	; 0x270000
    2ff0:	14010000 	strne	r0, [r1], #-0
    2ff4:	00004607 	andeq	r4, r0, r7, lsl #12
    2ff8:	012f9c00 			; <UNDEFINED> instruction: 0x012f9c00
    2ffc:	0000f400 	andeq	pc, r0, r0, lsl #8
    3000:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    3004:	2400000e 	strcs	r0, [r0], #-14
    3008:	0000113b 	andeq	r1, r0, fp, lsr r1
    300c:	7c071401 	cfstrsvc	mvf1, [r7], {1}
    3010:	0200000e 	andeq	r0, r0, #14
    3014:	0e246c91 	mcreq	12, 1, r6, cr4, cr1, {4}
    3018:	01000010 	tsteq	r0, r0, lsl r0
    301c:	0e870714 	mcreq	7, 4, r0, cr7, cr4, {0}
    3020:	91020000 	mrsls	r0, (UNDEF: 2)
    3024:	0c162668 	ldceq	6, cr2, [r6], {104}	; 0x68
    3028:	16010000 	strne	r0, [r1], -r0
    302c:	00004607 	andeq	r4, r0, r7, lsl #12
    3030:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3034:	12041100 	andne	r1, r4, #0, 2
    3038:	0300000a 	movweq	r0, #10
    303c:	00000e76 	andeq	r0, r0, r6, ror lr
    3040:	08c60411 	stmiaeq	r6, {r0, r4, sl}^
    3044:	81030000 	mrshi	r0, (UNDEF: 3)
    3048:	2a00000e 	bcs	3088 <_start-0x4f78>
    304c:	00000e5a 	andeq	r0, r0, sl, asr lr
    3050:	54070c01 	strpl	r0, [r7], #-3073	; 0xfffff3ff
    3054:	4800012f 	stmdami	r0, {r0, r1, r2, r3, r5, r8}
    3058:	01000000 	mrseq	r0, (UNDEF: 0)
    305c:	000eb29c 	muleq	lr, ip, r2
    3060:	113b2400 	teqne	fp, r0, lsl #8
    3064:	0c010000 	stceq	0, cr0, [r1], {-0}
    3068:	000e7c07 	andeq	r7, lr, r7, lsl #24
    306c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3070:	10782900 	rsbsne	r2, r8, r0, lsl #18
    3074:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    3078:	00004606 	andeq	r4, r0, r6, lsl #12
    307c:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
    3080:	00011800 	andeq	r1, r1, r0, lsl #16
    3084:	fa9c0100 	blx	fe70348c <_estack+0xf66f348c>
    3088:	2400000e 	strcs	r0, [r0], #-14
    308c:	000004be 			; <UNDEFINED> instruction: 0x000004be
    3090:	0006d901 	andeq	sp, r6, r1, lsl #18
    3094:	0200000f 	andeq	r0, r0, #15
    3098:	1a266c91 	bne	99e2e4 <__bss_end+0x9887b4>
    309c:	0100000f 	tsteq	r0, pc
    30a0:	0b0706db 	bleq	1c4c14 <__bss_end+0x1af0e4>
    30a4:	91020000 	mrsls	r0, (UNDEF: 2)
    30a8:	0c162670 	ldceq	6, cr2, [r6], {112}	; 0x70
    30ac:	dc010000 	stcle	0, cr0, [r1], {-0}
    30b0:	00004606 	andeq	r4, r0, r6, lsl #12
    30b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    30b8:	dd041100 	stfles	f1, [r4, #-0]
    30bc:	03000009 	movweq	r0, #9
    30c0:	00000efa 	strdeq	r0, [r0], -sl
    30c4:	0010502b 	andseq	r5, r0, fp, lsr #32
    30c8:	06870100 	streq	r0, [r7], r0, lsl #2
    30cc:	00012da0 	andeq	r2, r1, r0, lsr #27
    30d0:	0000009c 	muleq	r0, ip, r0
    30d4:	0f499c01 	svceq	0x00499c01
    30d8:	be240000 	cdplt	0, 2, cr0, cr4, cr0, {0}
    30dc:	01000004 	tsteq	r0, r4
    30e0:	0f000687 	svceq	0x00000687
    30e4:	91020000 	mrsls	r0, (UNDEF: 2)
    30e8:	100f246c 	andne	r2, pc, ip, ror #8
    30ec:	87010000 	strhi	r0, [r1, -r0]
    30f0:	0008c606 	andeq	ip, r8, r6, lsl #12
    30f4:	68910200 	ldmvs	r1, {r9}
    30f8:	0004e726 	andeq	lr, r4, r6, lsr #14
    30fc:	06890100 	streq	r0, [r9], r0, lsl #2
    3100:	000008c6 	andeq	r0, r0, r6, asr #17
    3104:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3108:	0011e92a 	andseq	lr, r1, sl, lsr #18
    310c:	064b0100 	strbeq	r0, [fp], -r0, lsl #2
    3110:	00012c98 	muleq	r1, r8, ip
    3114:	00000108 	andeq	r0, r0, r8, lsl #2
    3118:	0f799c01 	svceq	0x00799c01
    311c:	04270000 	strteq	r0, [r7], #-0
    3120:	7800012d 	stmdavc	r0, {r0, r2, r3, r5, r8}
    3124:	26000000 	strcs	r0, [r0], -r0
    3128:	00000335 	andeq	r0, r0, r5, lsr r3
    312c:	71067c01 	tstvc	r6, r1, lsl #24
    3130:	0200000b 	andeq	r0, r0, #11
    3134:	00007491 	muleq	r0, r1, r4
    3138:	0011b929 	andseq	fp, r1, r9, lsr #18
    313c:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    3140:	00000046 	andeq	r0, r0, r6, asr #32
    3144:	00012c1c 	andeq	r2, r1, ip, lsl ip
    3148:	0000007c 	andeq	r0, r0, ip, ror r0
    314c:	0fd09c01 	svceq	0x00d09c01
    3150:	72240000 	eorvc	r0, r4, #0
    3154:	01000010 	tsteq	r0, r0, lsl r0
    3158:	09e2062d 	stmibeq	r2!, {r0, r2, r3, r5, r9, sl}^
    315c:	91020000 	mrsls	r0, (UNDEF: 2)
    3160:	1357246c 	cmpne	r7, #108, 8	; 0x6c000000
    3164:	2d010000 	stccs	0, cr0, [r1, #-0]
    3168:	00008c06 	andeq	r8, r0, r6, lsl #24
    316c:	68910200 	ldmvs	r1, {r9}
    3170:	0013e326 	andseq	lr, r3, r6, lsr #6
    3174:	062f0100 	strteq	r0, [pc], -r0, lsl #2
    3178:	00000b07 	andeq	r0, r0, r7, lsl #22
    317c:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    3180:	00000c16 	andeq	r0, r0, r6, lsl ip
    3184:	46063001 	strmi	r3, [r6], -r1
    3188:	02000000 	andeq	r0, r0, #0
    318c:	29007091 	stmdbcs	r0, {r0, r4, r7, ip, sp, lr}
    3190:	00000faa 	andeq	r0, r0, sl, lsr #31
    3194:	d6061001 	strle	r1, [r6], -r1
    3198:	c0000008 	andgt	r0, r0, r8
    319c:	5c00012b 	stfpls	f0, [r0], {43}	; 0x2b
    31a0:	01000000 	mrseq	r0, (UNDEF: 0)
    31a4:	0010189c 	mulseq	r0, ip, r8
    31a8:	10722400 	rsbsne	r2, r2, r0, lsl #8
    31ac:	10010000 	andne	r0, r1, r0
    31b0:	0009e206 	andeq	lr, r9, r6, lsl #4
    31b4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    31b8:	0013e326 	andseq	lr, r3, r6, lsr #6
    31bc:	06120100 	ldreq	r0, [r2], -r0, lsl #2
    31c0:	00000b07 	andeq	r0, r0, r7, lsl #22
    31c4:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    31c8:	00000c16 	andeq	r0, r0, r6, lsl ip
    31cc:	d6061301 	strle	r1, [r6], -r1, lsl #6
    31d0:	02000008 	andeq	r0, r0, #8
    31d4:	2b007091 	blcs	1f420 <__bss_end+0x98f0>
    31d8:	00000ebe 			; <UNDEFINED> instruction: 0x00000ebe
    31dc:	6405f601 	strvs	pc, [r5], #-1537	; 0xfffff9ff
    31e0:	5c00012b 	stfpls	f0, [r0], {43}	; 0x2b
    31e4:	01000000 	mrseq	r0, (UNDEF: 0)
    31e8:	00105c9c 	mulseq	r0, ip, ip
    31ec:	10722400 	rsbsne	r2, r2, r0, lsl #8
    31f0:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    31f4:	0009e205 	andeq	lr, r9, r5, lsl #4
    31f8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    31fc:	0010c824 	andseq	ip, r0, r4, lsr #16
    3200:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    3204:	000008d6 	ldrdeq	r0, [r0], -r6
    3208:	26689102 	strbtcs	r9, [r8], -r2, lsl #2
    320c:	000013e3 	andeq	r1, r0, r3, ror #7
    3210:	0705f801 	streq	pc, [r5, -r1, lsl #16]
    3214:	0200000b 	andeq	r0, r0, #11
    3218:	2b007491 	blcs	20464 <__bss_end+0xa934>
    321c:	00001171 	andeq	r1, r0, r1, ror r1
    3220:	4805a901 	stmdami	r5, {r0, r8, fp, sp, pc}
    3224:	1c000129 	stfnes	f0, [r0], {41}	; 0x29
    3228:	01000002 	tsteq	r0, r2
    322c:	0010b89c 	mulseq	r0, ip, r8
    3230:	13e22600 	mvnne	r2, #0, 12
    3234:	ab010000 	blge	4323c <__bss_end+0x2d70c>
    3238:	000b0705 	andeq	r0, fp, r5, lsl #14
    323c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3240:	0129882c 			; <UNDEFINED> instruction: 0x0129882c
    3244:	00008400 	andeq	r8, r0, r0, lsl #8
    3248:	00109e00 	andseq	r9, r0, r0, lsl #28
    324c:	02862600 	addeq	r2, r6, #0, 12
    3250:	b5010000 	strlt	r0, [r1, #-0]
    3254:	000b6605 	andeq	r6, fp, r5, lsl #12
    3258:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    325c:	2a0c2700 	bcs	30ce64 <__bss_end+0x2f7334>
    3260:	01100001 	tsteq	r0, r1
    3264:	dd260000 	stcle	0, cr0, [r6, #-0]
    3268:	01000002 	tsteq	r0, r2
    326c:	08c605d6 	stmiaeq	r6, {r1, r2, r4, r6, r7, r8, sl}^
    3270:	91020000 	mrsls	r0, (UNDEF: 2)
    3274:	2d00006c 	stccs	0, cr0, [r0, #-432]	; 0xfffffe50
    3278:	00000ded 	andeq	r0, r0, sp, ror #27
    327c:	5204f701 	andpl	pc, r4, #262144	; 0x40000
    3280:	24000000 	strcs	r0, [r0], #-0
    3284:	24000129 	strcs	r0, [r0], #-297	; 0xfffffed7
    3288:	01000000 	mrseq	r0, (UNDEF: 0)
    328c:	0f532e9c 	svceq	0x00532e9c
    3290:	ea010000 	b	43298 <__bss_end+0x2d768>
    3294:	0008c604 	andeq	ip, r8, r4, lsl #12
    3298:	0128ec00 			; <UNDEFINED> instruction: 0x0128ec00
    329c:	00003800 	andeq	r3, r0, r0, lsl #16
    32a0:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    32a4:	26000011 			; <UNDEFINED> instruction: 0x26000011
    32a8:	00000c16 	andeq	r0, r0, r6, lsl ip
    32ac:	c604ec01 	strgt	lr, [r4], -r1, lsl #24
    32b0:	02000008 	andeq	r0, r0, #8
    32b4:	bb267091 	bllt	99f500 <__bss_end+0x9899d0>
    32b8:	0100000b 	tsteq	r0, fp
    32bc:	005204ed 	subseq	r0, r2, sp, ror #9
    32c0:	91020000 	mrsls	r0, (UNDEF: 2)
    32c4:	eb290074 	bl	a4349c <__bss_end+0xa2d96c>
    32c8:	01000010 	tsteq	r0, r0, lsl r0
    32cc:	08c604db 	stmiaeq	r6, {r0, r1, r3, r4, r6, r7, sl}^
    32d0:	28b80000 	ldmcs	r8!, {}	; <UNPREDICTABLE>
    32d4:	00340001 	eorseq	r0, r4, r1
    32d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    32dc:	00001131 	andeq	r1, r0, r1, lsr r1
    32e0:	00111f26 	andseq	r1, r1, r6, lsr #30
    32e4:	04dd0100 	ldrbeq	r0, [sp], #256	; 0x100
    32e8:	000008c6 	andeq	r0, r0, r6, asr #17
    32ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
    32f0:	00121e29 	andseq	r1, r2, r9, lsr #28
    32f4:	04840100 	streq	r0, [r4], #256	; 0x100
    32f8:	00000046 	andeq	r0, r0, r6, asr #32
    32fc:	00012714 	andeq	r2, r1, r4, lsl r7
    3300:	000001a4 	andeq	r0, r0, r4, lsr #3
    3304:	11829c01 	orrne	r9, r2, r1, lsl #24
    3308:	e2260000 	eor	r0, r6, #0
    330c:	01000013 	tsteq	r0, r3, lsl r0
    3310:	0b070486 	bleq	1c4530 <__bss_end+0x1aea00>
    3314:	54010000 	strpl	r0, [r1], #-0
    3318:	00134726 	andseq	r4, r3, r6, lsr #14
    331c:	04870100 	streq	r0, [r7], #256	; 0x100
    3320:	00000046 	andeq	r0, r0, r6, asr #32
    3324:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    3328:	00012760 	andeq	r2, r1, r0, ror #14
    332c:	00000124 	andeq	r0, r0, r4, lsr #2
    3330:	000ef626 	andeq	pc, lr, r6, lsr #12
    3334:	049a0100 	ldreq	r0, [sl], #256	; 0x100
    3338:	00000046 	andeq	r0, r0, r6, asr #32
    333c:	00689102 	rsbeq	r9, r8, r2, lsl #2
    3340:	0feb2800 	svceq	0x00eb2800
    3344:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3348:	0126e404 			; <UNDEFINED> instruction: 0x0126e404
    334c:	00003000 	andeq	r3, r0, r0
    3350:	2f9c0100 	svccs	0x009c0100
    3354:	00000dc7 	andeq	r0, r0, r7, asr #27
    3358:	ac047101 	stfges	f7, [r4], {1}
    335c:	38000126 	stmdacc	r0, {r1, r2, r5, r8}
    3360:	01000000 	mrseq	r0, (UNDEF: 0)
    3364:	12db2b9c 	sbcsne	r2, fp, #156, 22	; 0x27000
    3368:	30010000 	andcc	r0, r1, r0
    336c:	01261004 			; <UNDEFINED> instruction: 0x01261004
    3370:	00009c00 	andeq	r9, r0, r0, lsl #24
    3374:	cc9c0100 	ldfgts	f0, [ip], {0}
    3378:	26000011 			; <UNDEFINED> instruction: 0x26000011
    337c:	00000c16 	andeq	r0, r0, r6, lsl ip
    3380:	46043201 	strmi	r3, [r4], -r1, lsl #4
    3384:	02000000 	andeq	r0, r0, #0
    3388:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    338c:	000012a8 	andeq	r1, r0, r8, lsr #5
    3390:	46040201 	strmi	r0, [r4], -r1, lsl #4
    3394:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    3398:	1c000124 	stfnes	f0, [r0], {36}	; 0x24
    339c:	01000001 	tsteq	r0, r1
    33a0:	0012239c 	mulseq	r2, ip, r3
    33a4:	0ee72400 	cdpeq	4, 14, cr2, cr7, cr0, {0}
    33a8:	02010000 	andeq	r0, r1, #0
    33ac:	0009e204 	andeq	lr, r9, r4, lsl #4
    33b0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    33b4:	000ef626 	andeq	pc, lr, r6, lsr #12
    33b8:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    33bc:	00000046 	andeq	r0, r0, r6, asr #32
    33c0:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    33c4:	000013e2 	andeq	r1, r0, r2, ror #7
    33c8:	07040501 	streq	r0, [r4, -r1, lsl #10]
    33cc:	0200000b 	andeq	r0, r0, #11
    33d0:	bb267091 	bllt	99f61c <__bss_end+0x989aec>
    33d4:	0100000b 	tsteq	r0, fp
    33d8:	00520406 	subseq	r0, r2, r6, lsl #8
    33dc:	91020000 	mrsls	r0, (UNDEF: 2)
    33e0:	e82b006c 	stmda	fp!, {r2, r3, r5, r6}
    33e4:	01000013 	tsteq	r0, r3, lsl r0
    33e8:	23fc03d5 	mvnscs	r0, #1409286147	; 0x54000003
    33ec:	00f80001 	rscseq	r0, r8, r1
    33f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    33f4:	00001258 	andeq	r1, r0, r8, asr r2
    33f8:	000ee724 	andeq	lr, lr, r4, lsr #14
    33fc:	03d50100 	bicseq	r0, r5, #0, 2
    3400:	000009e2 	andeq	r0, r0, r2, ror #19
    3404:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    3408:	000013e2 	andeq	r1, r0, r2, ror #7
    340c:	0703d701 	streq	sp, [r3, -r1, lsl #14]
    3410:	0200000b 	andeq	r0, r0, #11
    3414:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    3418:	00000f7e 	andeq	r0, r0, lr, ror pc
    341c:	4603b301 	strmi	fp, [r3], -r1, lsl #6
    3420:	80000000 	andhi	r0, r0, r0
    3424:	7c000123 	stfvcs	f0, [r0], {35}	; 0x23
    3428:	01000000 	mrseq	r0, (UNDEF: 0)
    342c:	0012a09c 	mulseq	r2, ip, r0
    3430:	10722400 	rsbsne	r2, r2, r0, lsl #8
    3434:	b3010000 	movwlt	r0, #4096	; 0x1000
    3438:	0009e203 	andeq	lr, r9, r3, lsl #4
    343c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3440:	000c1626 	andeq	r1, ip, r6, lsr #12
    3444:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    3448:	00000046 	andeq	r0, r0, r6, asr #32
    344c:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    3450:	000013e2 	andeq	r1, r0, r2, ror #7
    3454:	a603b601 	strge	fp, [r3], -r1, lsl #12
    3458:	02000012 	andeq	r0, r0, #18
    345c:	11007091 	swpne	r7, r1, [r0]
    3460:	000af104 	andeq	pc, sl, r4, lsl #2
    3464:	12a00300 	adcne	r0, r0, #0, 6
    3468:	3a2b0000 	bcc	ac3470 <__bss_end+0xaad940>
    346c:	01000013 	tsteq	r0, r3, lsl r0
    3470:	227c0373 	rsbscs	r0, ip, #-872415231	; 0xcc000001
    3474:	01040001 	tsteq	r4, r1
    3478:	9c010000 	stcls	0, cr0, [r1], {-0}
    347c:	000012e0 	andeq	r1, r0, r0, ror #5
    3480:	00126624 	andseq	r6, r2, r4, lsr #12
    3484:	03730100 	cmneq	r3, #0, 2
    3488:	000009e2 	andeq	r0, r0, r2, ror #19
    348c:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    3490:	000013e2 	andeq	r1, r0, r2, ror #7
    3494:	07037501 	streq	r7, [r3, -r1, lsl #10]
    3498:	0200000b 	andeq	r0, r0, #11
    349c:	2b007491 	blcs	206e8 <__bss_end+0xabb8>
    34a0:	00001152 	andeq	r1, r0, r2, asr r1
    34a4:	d4030701 	strle	r0, [r3], #-1793	; 0xfffff8ff
    34a8:	a8000120 	stmdage	r0, {r5, r8}
    34ac:	01000001 	tsteq	r0, r1
    34b0:	0013429c 	mulseq	r3, ip, r2
    34b4:	10712400 	rsbsne	r2, r1, r0, lsl #8
    34b8:	07010000 	streq	r0, [r1, -r0]
    34bc:	0009e203 	andeq	lr, r9, r3, lsl #4
    34c0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    34c4:	00112624 	andseq	r2, r1, r4, lsr #12
    34c8:	03070100 	movweq	r0, #28928	; 0x7100
    34cc:	00000052 	andeq	r0, r0, r2, asr r0
    34d0:	26609102 	strbtcs	r9, [r0], -r2, lsl #2
    34d4:	000013e2 	andeq	r1, r0, r2, ror #7
    34d8:	07030901 	streq	r0, [r3, -r1, lsl #18]
    34dc:	0200000b 	andeq	r0, r0, #11
    34e0:	6f267091 	svcvs	0x00267091
    34e4:	0100000e 	tsteq	r0, lr
    34e8:	0052030a 	subseq	r0, r2, sl, lsl #6
    34ec:	91020000 	mrsls	r0, (UNDEF: 2)
    34f0:	0ef6266c 	cdpeq	6, 15, cr2, cr6, cr12, {3}
    34f4:	0b010000 	bleq	434fc <__bss_end+0x2d9cc>
    34f8:	00004603 	andeq	r4, r0, r3, lsl #12
    34fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3500:	0e172900 	vnmlseq.f16	s4, s14, s0	; <UNPREDICTABLE>
    3504:	f1010000 	setend	le
    3508:	00005202 	andeq	r5, r0, r2, lsl #4
    350c:	01207c00 			; <UNDEFINED> instruction: 0x01207c00
    3510:	00005800 	andeq	r5, r0, r0, lsl #16
    3514:	8a9c0100 	bhi	fe70391c <_estack+0xf66f391c>
    3518:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    351c:	00001071 	andeq	r1, r0, r1, ror r0
    3520:	e202f101 	and	pc, r2, #1073741824	; 0x40000000
    3524:	02000009 	andeq	r0, r0, #9
    3528:	e2266c91 	eor	r6, r6, #37120	; 0x9100
    352c:	01000013 	tsteq	r0, r3, lsl r0
    3530:	0b0702f3 	bleq	1c4104 <__bss_end+0x1ae5d4>
    3534:	91020000 	mrsls	r0, (UNDEF: 2)
    3538:	0c152674 	ldceq	6, cr2, [r5], {116}	; 0x74
    353c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    3540:	00005202 	andeq	r5, r0, r2, lsl #4
    3544:	70910200 	addsvc	r0, r1, r0, lsl #4
    3548:	10662b00 	rsbne	r2, r6, r0, lsl #22
    354c:	c3010000 	movwgt	r0, #4096	; 0x1000
    3550:	011ff802 	tsteq	pc, r2, lsl #16	; <UNPREDICTABLE>
    3554:	00008400 	andeq	r8, r0, r0, lsl #8
    3558:	ce9c0100 	fmlgte	f0, f4, f0
    355c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3560:	000002e8 	andeq	r0, r0, r8, ror #5
    3564:	c602c301 	strgt	ip, [r2], -r1, lsl #6
    3568:	02000008 	andeq	r0, r0, #8
    356c:	e7266c91 			; <UNDEFINED> instruction: 0xe7266c91
    3570:	01000004 	tsteq	r0, r4
    3574:	08c602c5 	stmiaeq	r6, {r0, r2, r6, r7, r9}^
    3578:	91020000 	mrsls	r0, (UNDEF: 2)
    357c:	13472670 	movtne	r2, #30320	; 0x7670
    3580:	c6010000 	strgt	r0, [r1], -r0
    3584:	00004602 	andeq	r4, r0, r2, lsl #12
    3588:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    358c:	131d2b00 	tstne	sp, #0, 22
    3590:	82010000 	andhi	r0, r1, #0
    3594:	011ee802 	tsteq	lr, r2, lsl #16
    3598:	00011000 	andeq	r1, r1, r0
    359c:	309c0100 	addscc	r0, ip, r0, lsl #2
    35a0:	24000014 	strcs	r0, [r0], #-20	; 0xffffffec
    35a4:	00001276 	andeq	r1, r0, r6, ror r2
    35a8:	87028201 	strhi	r8, [r2, -r1, lsl #4]
    35ac:	0200000e 	andeq	r0, r0, #14
    35b0:	d3246491 			; <UNDEFINED> instruction: 0xd3246491
    35b4:	01000013 	tsteq	r0, r3, lsl r0
    35b8:	08c60282 	stmiaeq	r6, {r1, r7, r9}^
    35bc:	91020000 	mrsls	r0, (UNDEF: 2)
    35c0:	04e72660 	strbteq	r2, [r7], #1632	; 0x660
    35c4:	84010000 	strhi	r0, [r1], #-0
    35c8:	0008c602 	andeq	ip, r8, r2, lsl #12
    35cc:	70910200 	addsvc	r0, r1, r0, lsl #4
    35d0:	00134726 	andseq	r4, r3, r6, lsr #14
    35d4:	02850100 	addeq	r0, r5, #0, 2
    35d8:	00000046 	andeq	r0, r0, r6, asr #32
    35dc:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    35e0:	00001091 	muleq	r0, r1, r0
    35e4:	46028501 	strmi	r8, [r2], -r1, lsl #10
    35e8:	02000000 	andeq	r0, r0, #0
    35ec:	2b007491 	blcs	20838 <__bss_end+0xad08>
    35f0:	000011ad 	andeq	r1, r0, sp, lsr #3
    35f4:	e8024001 	stmda	r2, {r0, lr}
    35f8:	0000011d 	andeq	r0, r0, sp, lsl r1
    35fc:	01000001 	tsteq	r0, r1
    3600:	0014659c 	mulseq	r4, ip, r5
    3604:	12892400 	addne	r2, r9, #0, 8
    3608:	40010000 	andmi	r0, r1, r0
    360c:	0009e202 	andeq	lr, r9, r2, lsl #4
    3610:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3614:	0013e226 	andseq	lr, r3, r6, lsr #4
    3618:	02420100 	subeq	r0, r2, #0, 2
    361c:	00000b07 	andeq	r0, r0, r7, lsl #22
    3620:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3624:	0011d629 	andseq	sp, r1, r9, lsr #12
    3628:	019b0100 	orrseq	r0, fp, r0, lsl #2
    362c:	00000046 	andeq	r0, r0, r6, asr #32
    3630:	00011ba0 	andeq	r1, r1, r0, lsr #23
    3634:	00000248 	andeq	r0, r0, r8, asr #4
    3638:	152f9c01 	strne	r9, [pc, #-3073]!	; 2a3f <_start-0x55c1>
    363c:	e0240000 	eor	r0, r4, r0
    3640:	01000010 	tsteq	r0, r0, lsl r0
    3644:	08aa019b 	stmiaeq	sl!, {r0, r1, r3, r4, r7, r8}
    3648:	91020000 	mrsls	r0, (UNDEF: 2)
    364c:	11342464 	teqne	r4, r4, ror #8
    3650:	9b010000 	blls	43658 <__bss_end+0x2db28>
    3654:	000a6401 	andeq	r6, sl, r1, lsl #8
    3658:	60910200 	addsvs	r0, r1, r0, lsl #4
    365c:	00111224 	andseq	r1, r1, r4, lsr #4
    3660:	019b0100 	orrseq	r0, fp, r0, lsl #2
    3664:	0000003f 	andeq	r0, r0, pc, lsr r0
    3668:	245e9102 	ldrbcs	r9, [lr], #-258	; 0xfffffefe
    366c:	0000013d 	andeq	r0, r0, sp, lsr r1
    3670:	8c019b01 			; <UNDEFINED> instruction: 0x8c019b01
    3674:	02000000 	andeq	r0, r0, #0
    3678:	80245891 	mlahi	r4, r1, r8, r5
    367c:	01000004 	tsteq	r0, r4
    3680:	0052019b 			; <UNDEFINED> instruction: 0x0052019b
    3684:	91020000 	mrsls	r0, (UNDEF: 2)
    3688:	13f42400 	mvnsne	r2, #0, 8
    368c:	9b010000 	blls	43694 <__bss_end+0x2db64>
    3690:	00152f01 	andseq	r2, r5, r1, lsl #30
    3694:	04910200 	ldreq	r0, [r1], #512	; 0x200
    3698:	0012cc24 	andseq	ip, r2, r4, lsr #24
    369c:	019b0100 	orrseq	r0, fp, r0, lsl #2
    36a0:	00000a69 	andeq	r0, r0, r9, ror #20
    36a4:	24089102 	strcs	r9, [r8], #-258	; 0xfffffefe
    36a8:	00001394 	muleq	r0, r4, r3
    36ac:	f1019b01 			; <UNDEFINED> instruction: 0xf1019b01
    36b0:	0200000d 	andeq	r0, r0, #13
    36b4:	16260c91 			; <UNDEFINED> instruction: 0x16260c91
    36b8:	0100000c 	tsteq	r0, ip
    36bc:	0046019d 	umaaleq	r0, r6, sp, r1
    36c0:	91020000 	mrsls	r0, (UNDEF: 2)
    36c4:	10d72674 	sbcsne	r2, r7, r4, ror r6
    36c8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    36cc:	000b0701 	andeq	r0, fp, r1, lsl #14
    36d0:	70910200 	addsvc	r0, r1, r0, lsl #4
    36d4:	011bdc27 	tsteq	fp, r7, lsr #24
    36d8:	00019c00 	andeq	r9, r1, r0, lsl #24
    36dc:	01502600 	cmpeq	r0, r0, lsl #12
    36e0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    36e4:	000a6901 	andeq	r6, sl, r1, lsl #18
    36e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    36ec:	04110000 	ldreq	r0, [r1], #-0
    36f0:	000009e2 	andeq	r0, r0, r2, ror #19
    36f4:	0002b300 	andeq	fp, r2, r0, lsl #6
    36f8:	65000400 	strvs	r0, [r0, #-1024]	; 0xfffffc00
    36fc:	0400000a 	streq	r0, [r0], #-10
    3700:	0000e501 	andeq	lr, r0, r1, lsl #10
    3704:	14b40c00 	ldrtne	r0, [r4], #3072	; 0xc00
    3708:	34c00000 	strbcc	r0, [r0], #0
    370c:	03a00001 	moveq	r0, #1
    3710:	0cb30000 	ldceq	0, cr0, [r3]
    3714:	0a020000 	beq	8371c <__bss_end+0x6dbec>
    3718:	02000015 	andeq	r0, r0, #21
    371c:	00002c0b 	andeq	r2, r0, fp, lsl #24
    3720:	32040300 	andcc	r0, r4, #0, 6
    3724:	04000000 	streq	r0, [r0], #-0
    3728:	00000042 	andeq	r0, r0, r2, asr #32
    372c:	00004205 	andeq	r4, r0, r5, lsl #4
    3730:	004e0500 	subeq	r0, lr, r0, lsl #10
    3734:	06000000 	streq	r0, [r0], -r0
    3738:	06220704 	strteq	r0, [r2], -r4, lsl #14
    373c:	42070000 	andmi	r0, r7, #0
    3740:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3744:	02080904 	andeq	r0, r8, #4, 18	; 0x10000
    3748:	0000710d 	andeq	r7, r0, sp, lsl #2
    374c:	149e0a00 	ldrne	r0, [lr], #2560	; 0xa00
    3750:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    3754:	00000021 	andeq	r0, r0, r1, lsr #32
    3758:	00300a00 	eorseq	r0, r0, r0, lsl #20
    375c:	0f020000 	svceq	0x00020000
    3760:	0000004e 	andeq	r0, r0, lr, asr #32
    3764:	1f020004 	svcne	0x00020004
    3768:	02000015 	andeq	r0, r0, #21
    376c:	00005010 	andeq	r5, r0, r0, lsl r0
    3770:	00710b00 	rsbseq	r0, r1, r0, lsl #22
    3774:	008c0000 	addeq	r0, ip, r0
    3778:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    377c:	47000000 	strmi	r0, [r0, -r0]
    3780:	07040600 	streq	r0, [r4, -r0, lsl #12]
    3784:	000000dc 	ldrdeq	r0, [r0], -ip
    3788:	0014f20d 	andseq	pc, r4, sp, lsl #4
    378c:	7c090100 	stfvcs	f0, [r9], {-0}
    3790:	05000000 	streq	r0, [r0, #-0]
    3794:	0148d403 	cmpeq	r8, r3, lsl #8
    3798:	01280900 			; <UNDEFINED> instruction: 0x01280900
    379c:	0001250c 	andeq	r2, r1, ip, lsl #10
    37a0:	15300a00 	ldrne	r0, [r0, #-2560]!	; 0xfffff600
    37a4:	0d010000 	stceq	0, cr0, [r1, #-0]
    37a8:	00000125 	andeq	r0, r0, r5, lsr #2
    37ac:	14020a00 	strne	r0, [r2], #-2560	; 0xfffff600
    37b0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    37b4:	00000125 	andeq	r0, r0, r5, lsr #2
    37b8:	140b0a04 	strne	r0, [fp], #-2564	; 0xfffff5fc
    37bc:	0f010000 	svceq	0x00010000
    37c0:	00000125 	andeq	r0, r0, r5, lsr #2
    37c4:	14330a08 	ldrtne	r0, [r3], #-2568	; 0xfffff5f8
    37c8:	10010000 	andne	r0, r1, r0
    37cc:	00000125 	andeq	r0, r0, r5, lsr #2
    37d0:	15450a0c 	strbne	r0, [r5, #-2572]	; 0xfffff5f4
    37d4:	11010000 	mrsne	r0, (UNDEF: 1)
    37d8:	00000125 	andeq	r0, r0, r5, lsr #2
    37dc:	14860a10 	strne	r0, [r6], #2576	; 0xa10
    37e0:	12010000 	andne	r0, r1, #0
    37e4:	00000125 	andeq	r0, r0, r5, lsr #2
    37e8:	15390a14 	ldrne	r0, [r9, #-2580]!	; 0xfffff5ec
    37ec:	13010000 	movwne	r0, #4096	; 0x1000
    37f0:	00000125 	andeq	r0, r0, r5, lsr #2
    37f4:	14e00a18 	strbtne	r0, [r0], #2584	; 0xa18
    37f8:	14010000 	strne	r0, [r1], #-0
    37fc:	00000125 	andeq	r0, r0, r5, lsr #2
    3800:	14e90a1c 	strbtne	r0, [r9], #2588	; 0xa1c
    3804:	15010000 	strne	r0, [r1, #-0]
    3808:	00000125 	andeq	r0, r0, r5, lsr #2
    380c:	14140a20 	ldrne	r0, [r4], #-2592	; 0xfffff5e0
    3810:	16010000 	strne	r0, [r1], -r0
    3814:	00000125 	andeq	r0, r0, r5, lsr #2
    3818:	04060024 	streq	r0, [r6], #-36	; 0xffffffdc
    381c:	00061d07 	andeq	r1, r6, r7, lsl #26
    3820:	14210200 	strtne	r0, [r1], #-512	; 0xfffffe00
    3824:	17010000 	strne	r0, [r1, -r0]
    3828:	000000a4 	andeq	r0, r0, r4, lsr #1
    382c:	00012c0e 	andeq	r2, r1, lr, lsl #24
    3830:	014a0d00 	cmpeq	sl, r0, lsl #26
    3834:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    3838:	00000153 	andeq	r0, r0, r3, asr r1
    383c:	47240305 	strmi	r0, [r4, -r5, lsl #6]!
    3840:	04030001 	streq	r0, [r3], #-1
    3844:	00000137 	andeq	r0, r0, r7, lsr r1
    3848:	00014d07 	andeq	r4, r1, r7, lsl #26
    384c:	01250b00 			; <UNDEFINED> instruction: 0x01250b00
    3850:	01680000 	cmneq	r8, r0
    3854:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    3858:	02000000 	andeq	r0, r0, #0
    385c:	145f0d00 	ldrbne	r0, [pc], #-3328	; 3864 <_start-0x479c>
    3860:	1c010000 	stcne	0, cr0, [r1], {-0}
    3864:	00000158 	andeq	r0, r0, r8, asr r1
    3868:	4b140305 	blmi	504484 <__bss_end+0x4ee954>
    386c:	930f0001 	movwls	r0, #61441	; 0xf001
    3870:	01000014 	tsteq	r0, r4, lsl r0
    3874:	0137806d 	teqeq	r7, sp, rrx
    3878:	0000e000 	andeq	lr, r0, r0
    387c:	ab9c0100 	blge	fe703c84 <_estack+0xf66f3c84>
    3880:	10000001 	andne	r0, r0, r1
    3884:	00717269 	rsbseq	r7, r1, r9, ror #4
    3888:	00496d01 	subeq	r6, r9, r1, lsl #26
    388c:	91020000 	mrsls	r0, (UNDEF: 2)
    3890:	148e0d6c 	strne	r0, [lr], #3436	; 0xd6c
    3894:	6f010000 	svcvs	0x00010000
    3898:	00000125 	andeq	r0, r0, r5, lsr #2
    389c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    38a0:	0015000f 	andseq	r0, r5, pc
    38a4:	ac5b0100 	ldfgee	f0, [fp], {-0}
    38a8:	d4000136 	strle	r0, [r0], #-310	; 0xfffffeca
    38ac:	01000000 	mrseq	r0, (UNDEF: 0)
    38b0:	0001dd9c 	muleq	r1, ip, sp
    38b4:	72691000 	rsbvc	r1, r9, #0
    38b8:	5b010071 	blpl	43a84 <__bss_end+0x2df54>
    38bc:	00000049 	andeq	r0, r0, r9, asr #32
    38c0:	0d6c9102 	stfeqp	f1, [ip, #-8]!
    38c4:	0000148e 	andeq	r1, r0, lr, lsl #9
    38c8:	01255d01 			; <UNDEFINED> instruction: 0x01255d01
    38cc:	91020000 	mrsls	r0, (UNDEF: 2)
    38d0:	3b110074 	blcc	443aa8 <__bss_end+0x42df78>
    38d4:	01000014 	tsteq	r0, r4, lsl r0
    38d8:	01364851 	teqeq	r6, r1, asr r8
    38dc:	00006400 	andeq	r6, r0, r0, lsl #8
    38e0:	1d9c0100 	ldfnes	f0, [ip]
    38e4:	10000002 	andne	r0, r0, r2
    38e8:	00717269 	rsbseq	r7, r1, r9, ror #4
    38ec:	00495101 	subeq	r5, r9, r1, lsl #2
    38f0:	91020000 	mrsls	r0, (UNDEF: 2)
    38f4:	149e1274 	ldrne	r1, [lr], #628	; 0x274
    38f8:	51010000 	mrspl	r0, (UNDEF: 1)
    38fc:	00000021 	andeq	r0, r0, r1, lsr #32
    3900:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
    3904:	00000030 	andeq	r0, r0, r0, lsr r0
    3908:	004e5101 	subeq	r5, lr, r1, lsl #2
    390c:	91020000 	mrsls	r0, (UNDEF: 2)
    3910:	4713006c 	ldrmi	r0, [r3, -ip, rrx]
    3914:	01000014 	tsteq	r0, r4, lsl r0
    3918:	01362c4c 	teqeq	r6, ip, asr #24
    391c:	00001c00 	andeq	r1, r0, r0, lsl #24
    3920:	139c0100 	orrsne	r0, ip, #0, 2
    3924:	0000147b 	andeq	r1, r0, fp, ror r4
    3928:	36104701 	ldrcc	r4, [r0], -r1, lsl #14
    392c:	001c0001 	andseq	r0, ip, r1
    3930:	9c010000 	stcls	0, cr0, [r1], {-0}
    3934:	0014a911 	andseq	sl, r4, r1, lsl r9
    3938:	70360100 	eorsvc	r0, r6, r0, lsl #2
    393c:	a0000135 	andge	r0, r0, r5, lsr r1
    3940:	01000000 	mrseq	r0, (UNDEF: 0)
    3944:	0002629c 	muleq	r2, ip, r2
    3948:	14500d00 	ldrbne	r0, [r0], #-3328	; 0xfffff300
    394c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    3950:	00000125 	andeq	r0, r0, r5, lsr #2
    3954:	14005401 	strne	r5, [r0], #-1025	; 0xfffffbff
    3958:	0000146f 	andeq	r1, r0, pc, ror #8
    395c:	34c01e01 	strbcc	r1, [r0], #3585	; 0xe01
    3960:	00b00001 	adcseq	r0, r0, r1
    3964:	9c010000 	stcls	0, cr0, [r1], {-0}
    3968:	00146712 	andseq	r6, r4, r2, lsl r7
    396c:	251e0100 	ldrcs	r0, [lr, #-256]	; 0xffffff00
    3970:	02000001 	andeq	r0, r0, #1
    3974:	73126c91 	tstvc	r2, #37120	; 0x9100
    3978:	01000006 	tsteq	r0, r6
    397c:	0000491e 	andeq	r4, r0, lr, lsl r9
    3980:	68910200 	ldmvs	r1, {r9}
    3984:	0134d815 	teqeq	r4, r5, lsl r8
    3988:	00007c00 	andeq	r7, r0, r0, lsl #24
    398c:	69621600 	stmdbvs	r2!, {r9, sl, ip}^
    3990:	23010074 	movwcs	r0, #4212	; 0x1074
    3994:	00000042 	andeq	r0, r0, r2, asr #32
    3998:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    399c:	00717269 	rsbseq	r7, r1, r9, ror #4
    39a0:	00422601 	subeq	r2, r2, r1, lsl #12
    39a4:	91020000 	mrsls	r0, (UNDEF: 2)
    39a8:	00000070 	andeq	r0, r0, r0, ror r0
    39ac:	000003fa 	strdeq	r0, [r0], -sl
    39b0:	0b920004 	bleq	fe4839c8 <_estack+0xf64739c8>
    39b4:	01040000 	mrseq	r0, (UNDEF: 4)
    39b8:	000000e5 	andeq	r0, r0, r5, ror #1
    39bc:	0016670c 	andseq	r6, r6, ip, lsl #14
    39c0:	01386000 	teqeq	r8, r0
    39c4:	0005d800 	andeq	sp, r5, r0, lsl #16
    39c8:	000d5e00 	andeq	r5, sp, r0, lsl #28
    39cc:	15f10200 	ldrbne	r0, [r1, #512]!	; 0x200
    39d0:	5c010000 	stcpl	0, cr0, [r1], {-0}
    39d4:	02000000 	andeq	r0, r0, #0
    39d8:	00005c47 	andeq	r5, r0, r7, asr #24
    39dc:	163e0300 	ldrtne	r0, [lr], -r0, lsl #6
    39e0:	03000000 	movweq	r0, #0
    39e4:	00001659 	andeq	r1, r0, r9, asr r6
    39e8:	17350301 	ldrne	r0, [r5, -r1, lsl #6]!
    39ec:	03020000 	movweq	r0, #8192	; 0x2000
    39f0:	00001632 	andeq	r1, r0, r2, lsr r6
    39f4:	16940303 	ldrne	r0, [r4], r3, lsl #6
    39f8:	03040000 	movweq	r0, #16384	; 0x4000
    39fc:	00001597 	muleq	r0, r7, r5
    3a00:	15ab0305 	strne	r0, [fp, #773]!	; 0x305
    3a04:	00060000 	andeq	r0, r6, r0
    3a08:	82080104 	andhi	r0, r8, #4, 2
    3a0c:	02000008 	andeq	r0, r0, #8
    3a10:	0000161b 	andeq	r1, r0, fp, lsl r6
    3a14:	00005c01 	andeq	r5, r0, r1, lsl #24
    3a18:	805a0200 	subshi	r0, sl, r0, lsl #4
    3a1c:	03000000 	movweq	r0, #0
    3a20:	0000162a 	andeq	r1, r0, sl, lsr #12
    3a24:	17620300 	strbne	r0, [r2, -r0, lsl #6]!
    3a28:	00010000 	andeq	r0, r1, r0
    3a2c:	4a01a005 	bmi	6ba48 <__bss_end+0x55f18>
    3a30:	000001a9 	andeq	r0, r0, r9, lsr #3
    3a34:	0016cb06 	andseq	ip, r6, r6, lsl #22
    3a38:	a94b0100 	stmdbge	fp, {r8}^
    3a3c:	00000001 	andeq	r0, r0, r1
    3a40:	0016d206 	andseq	sp, r6, r6, lsl #4
    3a44:	c04c0100 	subgt	r0, ip, r0, lsl #2
    3a48:	18000001 	stmdane	r0, {r0}
    3a4c:	00154d06 	andseq	r4, r5, r6, lsl #26
    3a50:	c74d0100 	strbgt	r0, [sp, -r0, lsl #2]
    3a54:	1c000001 	stcne	0, cr0, [r0], {1}
    3a58:	0016dd06 	andseq	sp, r6, r6, lsl #26
    3a5c:	c04e0100 	subgt	r0, lr, r0, lsl #2
    3a60:	24000001 	strcs	r0, [r0], #-1
    3a64:	00158b06 	andseq	r8, r5, r6, lsl #22
    3a68:	c74f0100 	strbgt	r0, [pc, -r0, lsl #2]
    3a6c:	28000001 	stmdacs	r0, {r0}
    3a70:	0016e806 	andseq	lr, r6, r6, lsl #16
    3a74:	c0500100 	subsgt	r0, r0, r0, lsl #2
    3a78:	30000001 	andcc	r0, r0, r1
    3a7c:	00169f06 	andseq	r9, r6, r6, lsl #30
    3a80:	c7510100 	ldrbgt	r0, [r1, -r0, lsl #2]
    3a84:	34000001 	strcc	r0, [r0], #-1
    3a88:	0016f306 	andseq	pc, r6, r6, lsl #6
    3a8c:	c0520100 	subsgt	r0, r2, r0, lsl #2
    3a90:	3c000001 	stccc	0, cr0, [r0], {1}
    3a94:	0016b306 	andseq	fp, r6, r6, lsl #6
    3a98:	c7530100 	ldrbgt	r0, [r3, -r0, lsl #2]
    3a9c:	40000001 	andmi	r0, r0, r1
    3aa0:	0016fe06 	andseq	pc, r6, r6, lsl #28
    3aa4:	c0540100 	subsgt	r0, r4, r0, lsl #2
    3aa8:	48000001 	stmdami	r0, {r0}
    3aac:	0016ad06 	andseq	sl, r6, r6, lsl #26
    3ab0:	c7550100 	ldrbgt	r0, [r5, -r0, lsl #2]
    3ab4:	4c000001 	stcmi	0, cr0, [r0], {1}
    3ab8:	00170906 	andseq	r0, r7, r6, lsl #18
    3abc:	c0560100 	subsgt	r0, r6, r0, lsl #2
    3ac0:	54000001 	strpl	r0, [r0], #-1
    3ac4:	00162406 	andseq	r2, r6, r6, lsl #8
    3ac8:	c7570100 	ldrbgt	r0, [r7, -r0, lsl #2]
    3acc:	58000001 	stmdapl	r0, {r0}
    3ad0:	00171406 	andseq	r1, r7, r6, lsl #8
    3ad4:	c0580100 	subsgt	r0, r8, r0, lsl #2
    3ad8:	60000001 	andvs	r0, r0, r1
    3adc:	00159106 	andseq	r9, r5, r6, lsl #2
    3ae0:	c7590100 	ldrbgt	r0, [r9, -r0, lsl #2]
    3ae4:	64000001 	strvs	r0, [r0], #-1
    3ae8:	00171f06 	andseq	r1, r7, r6, lsl #30
    3aec:	c05a0100 	subsgt	r0, sl, r0, lsl #2
    3af0:	6c000001 	stcvs	0, cr0, [r0], {1}
    3af4:	00164a06 	andseq	r4, r6, r6, lsl #20
    3af8:	c75b0100 	ldrbgt	r0, [fp, -r0, lsl #2]
    3afc:	70000001 	andvc	r0, r0, r1
    3b00:	00172a06 	andseq	r2, r7, r6, lsl #20
    3b04:	c05c0100 	subsgt	r0, ip, r0, lsl #2
    3b08:	78000001 	stmdavc	r0, {r0}
    3b0c:	00160406 	andseq	r0, r6, r6, lsl #8
    3b10:	c75d0100 	ldrbgt	r0, [sp, -r0, lsl #2]
    3b14:	7c000001 	stcvc	0, cr0, [r0], {1}
    3b18:	00174c06 	andseq	r4, r7, r6, lsl #24
    3b1c:	c05e0100 	subsgt	r0, lr, r0, lsl #2
    3b20:	84000001 	strhi	r0, [r0], #-1
    3b24:	0015d306 	andseq	sp, r5, r6, lsl #6
    3b28:	c75f0100 	ldrbgt	r0, [pc, -r0, lsl #2]
    3b2c:	88000001 	stmdahi	r0, {r0}
    3b30:	00175706 	andseq	r5, r7, r6, lsl #14
    3b34:	c0600100 	rsbgt	r0, r0, r0, lsl #2
    3b38:	90000001 	andls	r0, r0, r1
    3b3c:	0015eb06 	andseq	lr, r5, r6, lsl #22
    3b40:	d7610100 	strble	r0, [r1, -r0, lsl #2]!
    3b44:	94000001 	strls	r0, [r0], #-1
    3b48:	00165006 	andseq	r5, r6, r6
    3b4c:	c7620100 	strbgt	r0, [r2, -r0, lsl #2]!
    3b50:	98000001 	stmdals	r0, {r0}
    3b54:	01c00700 	biceq	r0, r0, r0, lsl #14
    3b58:	01b90000 			; <UNDEFINED> instruction: 0x01b90000
    3b5c:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
    3b60:	05000001 	streq	r0, [r0, #-1]
    3b64:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3b68:	000000dc 	ldrdeq	r0, [r0], -ip
    3b6c:	1d070404 	cfstrsne	mvf0, [r7, #-16]
    3b70:	07000006 	streq	r0, [r0, -r6]
    3b74:	000001c0 	andeq	r0, r0, r0, asr #3
    3b78:	000001d7 	ldrdeq	r0, [r0], -r7
    3b7c:	0001b908 	andeq	fp, r1, r8, lsl #18
    3b80:	07000100 	streq	r0, [r0, -r0, lsl #2]
    3b84:	000001c0 	andeq	r0, r0, r0, asr #3
    3b88:	000001e7 	andeq	r0, r0, r7, ror #3
    3b8c:	0001b908 	andeq	fp, r1, r8, lsl #18
    3b90:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3b94:	00001553 	andeq	r1, r0, r3, asr r5
    3b98:	00806401 	addeq	r6, r0, r1, lsl #8
    3b9c:	e70a0000 	str	r0, [sl, -r0]
    3ba0:	0b000001 	bleq	3bac <_start-0x4454>
    3ba4:	0000014a 	andeq	r0, r0, sl, asr #2
    3ba8:	020e6601 	andeq	r6, lr, #1048576	; 0x100000
    3bac:	03050000 	movweq	r0, #20480	; 0x5000
    3bb0:	00014728 	andeq	r4, r1, r8, lsr #14
    3bb4:	01f2040c 	mvnseq	r0, ip, lsl #8
    3bb8:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    3bbc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3bc0:	000015c0 	andeq	r1, r0, r0, asr #11
    3bc4:	3de0c201 	sfmcc	f4, 3, [r0, #4]!
    3bc8:	00580001 	subseq	r0, r8, r1
    3bcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bd0:	00000253 	andeq	r0, r0, r3, asr r2
    3bd4:	00156a0f 	andseq	r6, r5, pc, lsl #20
    3bd8:	53c20100 	bicpl	r0, r2, #0, 2
    3bdc:	02000002 	andeq	r0, r0, #2
    3be0:	8e106c91 	mrchi	12, 0, r6, cr0, cr1, {4}
    3be4:	01000014 	tsteq	r0, r4, lsl r0
    3be8:	0001c0c4 	andeq	ip, r1, r4, asr #1
    3bec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3bf0:	0006cd10 	andeq	ip, r6, r0, lsl sp
    3bf4:	c0c50100 	sbcgt	r0, r5, r0, lsl #2
    3bf8:	02000001 	andeq	r0, r0, #1
    3bfc:	04007091 	streq	r7, [r0], #-145	; 0xffffff6f
    3c00:	06220704 	strteq	r0, [r2], -r4, lsl #14
    3c04:	b90e0000 	stmdblt	lr, {}	; <UNPREDICTABLE>
    3c08:	01000016 	tsteq	r0, r6, lsl r0
    3c0c:	013c28a5 	teqeq	ip, r5, lsr #17
    3c10:	0001b800 	andeq	fp, r1, r0, lsl #16
    3c14:	a89c0100 	ldmge	ip, {r8}
    3c18:	0f000002 	svceq	0x00000002
    3c1c:	0000156a 	andeq	r1, r0, sl, ror #10
    3c20:	0253a501 	subseq	sl, r3, #4194304	; 0x400000
    3c24:	91020000 	mrsls	r0, (UNDEF: 2)
    3c28:	00e00f6c 	rsceq	r0, r0, ip, ror #30
    3c2c:	a5010000 	strge	r0, [r1, #-0]
    3c30:	00000021 	andeq	r0, r0, r1, lsr #32
    3c34:	106b9102 	rsbne	r9, fp, r2, lsl #2
    3c38:	0000148e 	andeq	r1, r0, lr, lsl #9
    3c3c:	01c0a701 	biceq	sl, r0, r1, lsl #14
    3c40:	91020000 	mrsls	r0, (UNDEF: 2)
    3c44:	06cd1074 	uxtab16eq	r1, sp, r4
    3c48:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    3c4c:	000001c0 	andeq	r0, r0, r0, asr #3
    3c50:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3c54:	0015da0e 	andseq	sp, r5, lr, lsl #20
    3c58:	78880100 	stmvc	r8, {r8}
    3c5c:	b000013a 	andlt	r0, r0, sl, lsr r1
    3c60:	01000001 	tsteq	r0, r1
    3c64:	0002f69c 	muleq	r2, ip, r6
    3c68:	156a0f00 	strbne	r0, [sl, #-3840]!	; 0xfffff100
    3c6c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    3c70:	00000253 	andeq	r0, r0, r3, asr r2
    3c74:	0f6c9102 	svceq	0x006c9102
    3c78:	000000e0 	andeq	r0, r0, r0, ror #1
    3c7c:	00218801 	eoreq	r8, r1, r1, lsl #16
    3c80:	91020000 	mrsls	r0, (UNDEF: 2)
    3c84:	148e106b 	strne	r1, [lr], #107	; 0x6b
    3c88:	8a010000 	bhi	43c90 <__bss_end+0x2e160>
    3c8c:	000001c0 	andeq	r0, r0, r0, asr #3
    3c90:	10749102 	rsbsne	r9, r4, r2, lsl #2
    3c94:	000006cd 	andeq	r0, r0, sp, asr #13
    3c98:	01c08b01 	biceq	r8, r0, r1, lsl #22
    3c9c:	91020000 	mrsls	r0, (UNDEF: 2)
    3ca0:	71110070 	tstvc	r1, r0, ror r0
    3ca4:	01000015 	tsteq	r0, r5, lsl r0
    3ca8:	00031e84 	andeq	r1, r3, r4, lsl #29
    3cac:	013a2800 	teqeq	sl, r0, lsl #16
    3cb0:	00005000 	andeq	r5, r0, r0
    3cb4:	1e9c0100 	fmlnee	f0, f4, f0
    3cb8:	0f000003 	svceq	0x00000003
    3cbc:	0000156a 	andeq	r1, r0, sl, ror #10
    3cc0:	02538401 	subseq	r8, r3, #16777216	; 0x1000000
    3cc4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cc8:	04120074 	ldreq	r0, [r2], #-116	; 0xffffff8c
    3ccc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3cd0:	17440e00 	strbne	r0, [r4, -r0, lsl #28]
    3cd4:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    3cd8:	00013970 	andeq	r3, r1, r0, ror r9
    3cdc:	000000b8 	strheq	r0, [r0], -r8
    3ce0:	03739c01 	cmneq	r3, #256	; 0x100
    3ce4:	6a0f0000 	bvs	3c3cec <__bss_end+0x3ae1bc>
    3ce8:	01000015 	tsteq	r0, r5, lsl r0
    3cec:	00025379 	andeq	r5, r2, r9, ror r3
    3cf0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3cf4:	0015fd0f 	andseq	pc, r5, pc, lsl #26
    3cf8:	53790100 	cmnpl	r9, #0, 2
    3cfc:	02000002 	andeq	r0, r0, #2
    3d00:	cd106891 	ldcgt	8, cr6, [r0, #-580]	; 0xfffffdbc
    3d04:	01000006 	tsteq	r0, r6
    3d08:	0001c07a 	andeq	ip, r1, sl, ror r0
    3d0c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3d10:	00148e10 	andseq	r8, r4, r0, lsl lr
    3d14:	c07b0100 	rsbsgt	r0, fp, r0, lsl #2
    3d18:	02000001 	andeq	r0, r0, #1
    3d1c:	13007091 	movwne	r7, #145	; 0x91
    3d20:	0000157a 	andeq	r1, r0, sl, ror r5
    3d24:	393c7501 	ldmdbcc	ip!, {r0, r8, sl, ip, sp, lr}
    3d28:	00340001 	eorseq	r0, r4, r1
    3d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d30:	000003a5 	andeq	r0, r0, r5, lsr #7
    3d34:	00156a0f 	andseq	r6, r5, pc, lsl #20
    3d38:	53750100 	cmnpl	r5, #0, 2
    3d3c:	02000002 	andeq	r0, r0, #2
    3d40:	64147491 	ldrvs	r7, [r4], #-1169	; 0xfffffb6f
    3d44:	01007269 	tsteq	r0, r9, ror #4
    3d48:	00006375 	andeq	r6, r0, r5, ror r3
    3d4c:	73910200 	orrsvc	r0, r1, #0, 4
    3d50:	160b1500 	strne	r1, [fp], -r0, lsl #10
    3d54:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3d58:	00013860 	andeq	r3, r1, r0, ror #16
    3d5c:	000000dc 	ldrdeq	r0, [r0], -ip
    3d60:	6a0f9c01 	bvs	3ead6c <__bss_end+0x3d523c>
    3d64:	01000015 	tsteq	r0, r5, lsl r0
    3d68:	00025369 	andeq	r5, r2, r9, ror #6
    3d6c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3d70:	0016a50f 	andseq	sl, r6, pc, lsl #10
    3d74:	53690100 	cmnpl	r9, #0, 2
    3d78:	02000002 	andeq	r0, r0, #2
    3d7c:	cd106091 	ldcgt	0, cr6, [r0, #-580]	; 0xfffffdbc
    3d80:	01000006 	tsteq	r0, r6
    3d84:	00031e6b 	andeq	r1, r3, fp, ror #28
    3d88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3d8c:	6c617616 	stclvs	6, cr7, [r1], #-88	; 0xffffffa8
    3d90:	c06d0100 	rsbgt	r0, sp, r0, lsl #2
    3d94:	02000001 	andeq	r0, r0, #1
    3d98:	65107091 	ldrvs	r7, [r0, #-145]	; 0xffffff6f
    3d9c:	01000015 	tsteq	r0, r5, lsl r0
    3da0:	00031e6f 	andeq	r1, r3, pc, ror #28
    3da4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3da8:	0ace0000 	beq	ff383db0 <_estack+0xf7373db0>
    3dac:	00040000 	andeq	r0, r4, r0
    3db0:	00000cdb 	ldrdeq	r0, [r0], -fp
    3db4:	00e50104 	rsceq	r0, r5, r4, lsl #2
    3db8:	c90c0000 	stmdbgt	ip, {}	; <UNPREDICTABLE>
    3dbc:	38000018 	stmdacc	r0, {r3, r4}
    3dc0:	ac00013e 	stfges	f0, [r0], {62}	; 0x3e
    3dc4:	17000004 	strne	r0, [r0, -r4]
    3dc8:	0200000e 	andeq	r0, r0, #14
    3dcc:	00000ae2 	andeq	r0, r0, r2, ror #21
    3dd0:	0031d802 	eorseq	sp, r1, r2, lsl #16
    3dd4:	21030000 	mrscs	r0, (UNDEF: 3)
    3dd8:	04000000 	streq	r0, [r0], #-0
    3ddc:	06220704 	strteq	r0, [r2], -r4, lsl #14
    3de0:	04050000 	streq	r0, [r5], #-0
    3de4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3de8:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    3dec:	0000012f 	andeq	r0, r0, pc, lsr #2
    3df0:	5d040804 	stcpl	8, cr0, [r4, #-16]
    3df4:	04000001 	streq	r0, [r0], #-1
    3df8:	08840601 	stmeq	r4, {r0, r9, sl}
    3dfc:	01040000 	mrseq	r0, (UNDEF: 4)
    3e00:	00088208 	andeq	r8, r8, r8, lsl #4
    3e04:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    3e08:	0000089e 	muleq	r0, lr, r8
    3e0c:	59070204 	stmdbpl	r7, {r2, r9}
    3e10:	03000000 	movweq	r0, #0
    3e14:	00000062 	andeq	r0, r0, r2, rrx
    3e18:	34050404 	strcc	r0, [r5], #-1028	; 0xfffffbfc
    3e1c:	04000001 	streq	r0, [r0], #-1
    3e20:	061d0704 	ldreq	r0, [sp], -r4, lsl #14
    3e24:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    3e28:	00061807 	andeq	r1, r6, r7, lsl #16
    3e2c:	08700200 	ldmdaeq	r0!, {r9}^
    3e30:	07030000 	streq	r0, [r3, -r0]
    3e34:	00000038 	andeq	r0, r0, r8, lsr r0
    3e38:	00085f02 	andeq	r5, r8, r2, lsl #30
    3e3c:	6e2c0400 	cdpvs	4, 2, cr0, cr12, cr0, {0}
    3e40:	02000000 	andeq	r0, r0, #0
    3e44:	00000955 	andeq	r0, r0, r5, asr r9
    3e48:	006e7204 	rsbeq	r7, lr, r4, lsl #4
    3e4c:	c1060000 	mrsgt	r0, (UNDEF: 6)
    3e50:	02000007 	andeq	r0, r0, #7
    3e54:	00310165 	eorseq	r0, r1, r5, ror #2
    3e58:	04070000 	streq	r0, [r7], #-0
    3e5c:	00cfa604 	sbceq	sl, pc, r4, lsl #12
    3e60:	bb080000 	bllt	203e68 <__bss_end+0x1ee338>
    3e64:	04000007 	streq	r0, [r0], #-7
    3e68:	0000a4a8 	andeq	sl, r0, r8, lsr #9
    3e6c:	076d0800 	strbeq	r0, [sp, -r0, lsl #16]!
    3e70:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    3e74:	000000cf 	andeq	r0, r0, pc, asr #1
    3e78:	00540900 	subseq	r0, r4, r0, lsl #18
    3e7c:	00df0000 	sbcseq	r0, pc, r0
    3e80:	df0a0000 	svcle	0x000a0000
    3e84:	03000000 	movweq	r0, #0
    3e88:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3e8c:	000000dc 	ldrdeq	r0, [r0], -ip
    3e90:	a304080b 	movwge	r0, #18443	; 0x480b
    3e94:	00000107 	andeq	r0, r0, r7, lsl #2
    3e98:	0009330c 	andeq	r3, r9, ip, lsl #6
    3e9c:	38a50400 	stmiacc	r5!, {sl}
    3ea0:	00000000 	andeq	r0, r0, r0
    3ea4:	00093b0c 	andeq	r3, r9, ip, lsl #22
    3ea8:	b0aa0400 	adclt	r0, sl, r0, lsl #8
    3eac:	04000000 	streq	r0, [r0], #-0
    3eb0:	08c60200 	stmiaeq	r6, {r9}^
    3eb4:	ab040000 	blge	103ebc <__bss_end+0xee38c>
    3eb8:	000000e6 	andeq	r0, r0, r6, ror #1
    3ebc:	00073002 	andeq	r3, r7, r2
    3ec0:	83af0400 			; <UNDEFINED> instruction: 0x83af0400
    3ec4:	0d000000 	stceq	0, cr0, [r0, #-0]
    3ec8:	25040e04 	strcs	r0, [r4, #-3588]	; 0xfffff1fc
    3ecc:	04000001 	streq	r0, [r0], #-1
    3ed0:	088b0801 	stmeq	fp, {r0, fp}
    3ed4:	25030000 	strcs	r0, [r3, #-0]
    3ed8:	02000001 	andeq	r0, r0, #1
    3edc:	00000999 	muleq	r0, r9, r9
    3ee0:	00751605 	rsbseq	r1, r5, r5, lsl #12
    3ee4:	410f0000 	mrsmi	r0, CPSR
    3ee8:	18000007 	stmdane	r0, {r0, r1, r2}
    3eec:	018f2d05 	orreq	r2, pc, r5, lsl #26
    3ef0:	e70c0000 	str	r0, [ip, -r0]
    3ef4:	05000008 	streq	r0, [r0, #-8]
    3ef8:	00018f2f 	andeq	r8, r1, pc, lsr #30
    3efc:	5f100000 	svcpl	0x00100000
    3f00:	3005006b 	andcc	r0, r5, fp, rrx
    3f04:	00000038 	andeq	r0, r0, r8, lsr r0
    3f08:	091e0c04 	ldmdbeq	lr, {r2, sl, fp}
    3f0c:	30050000 	andcc	r0, r5, r0
    3f10:	00000038 	andeq	r0, r0, r8, lsr r0
    3f14:	072a0c08 	streq	r0, [sl, -r8, lsl #24]!
    3f18:	30050000 	andcc	r0, r5, r0
    3f1c:	00000038 	andeq	r0, r0, r8, lsr r0
    3f20:	09f00c0c 	ldmibeq	r0!, {r2, r3, sl, fp}^
    3f24:	30050000 	andcc	r0, r5, r0
    3f28:	00000038 	andeq	r0, r0, r8, lsr r0
    3f2c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    3f30:	95310500 	ldrls	r0, [r1, #-1280]!	; 0xfffffb00
    3f34:	14000001 	strne	r0, [r0], #-1
    3f38:	3c040e00 	stccc	14, cr0, [r4], {-0}
    3f3c:	09000001 	stmdbeq	r0, {r0}
    3f40:	00000131 	andeq	r0, r0, r1, lsr r1
    3f44:	000001a5 	andeq	r0, r0, r5, lsr #3
    3f48:	0000df0a 	andeq	sp, r0, sl, lsl #30
    3f4c:	0f000000 	svceq	0x00000000
    3f50:	00000768 	andeq	r0, r0, r8, ror #14
    3f54:	1e350524 	cdpne	5, 3, cr0, cr5, cr4, {1}
    3f58:	0c000002 	stceq	0, cr0, [r0], {2}
    3f5c:	00000663 	andeq	r0, r0, r3, ror #12
    3f60:	00383705 	eorseq	r3, r8, r5, lsl #14
    3f64:	0c000000 	stceq	0, cr0, [r0], {-0}
    3f68:	00000964 	andeq	r0, r0, r4, ror #18
    3f6c:	00383805 	eorseq	r3, r8, r5, lsl #16
    3f70:	0c040000 	stceq	0, cr0, [r4], {-0}
    3f74:	00000678 	andeq	r0, r0, r8, ror r6
    3f78:	00383905 	eorseq	r3, r8, r5, lsl #18
    3f7c:	0c080000 	stceq	0, cr0, [r8], {-0}
    3f80:	00000a7b 	andeq	r0, r0, fp, ror sl
    3f84:	00383a05 	eorseq	r3, r8, r5, lsl #20
    3f88:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3f8c:	00000839 	andeq	r0, r0, r9, lsr r8
    3f90:	00383b05 	eorseq	r3, r8, r5, lsl #22
    3f94:	0c100000 	ldceq	0, cr0, [r0], {-0}
    3f98:	000007e9 	andeq	r0, r0, r9, ror #15
    3f9c:	00383c05 	eorseq	r3, r8, r5, lsl #24
    3fa0:	0c140000 	ldceq	0, cr0, [r4], {-0}
    3fa4:	000009f5 	strdeq	r0, [r0], -r5
    3fa8:	00383d05 	eorseq	r3, r8, r5, lsl #26
    3fac:	0c180000 	ldceq	0, cr0, [r8], {-0}
    3fb0:	000008a8 	andeq	r0, r0, r8, lsr #17
    3fb4:	00383e05 	eorseq	r3, r8, r5, lsl #28
    3fb8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    3fbc:	00000a42 	andeq	r0, r0, r2, asr #20
    3fc0:	00383f05 	eorseq	r3, r8, r5, lsl #30
    3fc4:	00200000 	eoreq	r0, r0, r0
    3fc8:	00068711 	andeq	r8, r6, r1, lsl r7
    3fcc:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    3fd0:	00025e48 	andeq	r5, r2, r8, asr #28
    3fd4:	07090c00 	streq	r0, [r9, -r0, lsl #24]
    3fd8:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    3fdc:	0000025e 	andeq	r0, r0, lr, asr r2
    3fe0:	05cd0c00 	strbeq	r0, [sp, #3072]	; 0xc00
    3fe4:	4a050000 	bmi	143fec <__bss_end+0x12e4bc>
    3fe8:	0000025e 	andeq	r0, r0, lr, asr r2
    3fec:	09801280 	stmibeq	r0, {r7, r9, ip}
    3ff0:	4c050000 	stcmi	0, cr0, [r5], {-0}
    3ff4:	00000131 	andeq	r0, r0, r1, lsr r1
    3ff8:	ac120100 	ldfges	f0, [r2], {-0}
    3ffc:	05000006 	streq	r0, [r0, #-6]
    4000:	0001314f 	andeq	r3, r1, pc, asr #2
    4004:	00010400 	andeq	r0, r1, r0, lsl #8
    4008:	00011d09 	andeq	r1, r1, r9, lsl #26
    400c:	00026e00 	andeq	r6, r2, r0, lsl #28
    4010:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    4014:	001f0000 	andseq	r0, pc, r0
    4018:	00084211 	andeq	r4, r8, r1, lsl r2
    401c:	05019000 	streq	r9, [r1, #-0]
    4020:	0002ac5b 	andeq	sl, r2, fp, asr ip
    4024:	08e70c00 	stmiaeq	r7!, {sl, fp}^
    4028:	5c050000 	stcpl	0, cr0, [r5], {-0}
    402c:	000002ac 	andeq	r0, r0, ip, lsr #5
    4030:	08ff0c00 	ldmeq	pc!, {sl, fp}^	; <UNPREDICTABLE>
    4034:	5d050000 	stcpl	0, cr0, [r5, #-0]
    4038:	00000038 	andeq	r0, r0, r8, lsr r0
    403c:	07110c04 	ldreq	r0, [r1, -r4, lsl #24]
    4040:	5f050000 	svcpl	0x00050000
    4044:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    4048:	06870c08 	streq	r0, [r7], r8, lsl #24
    404c:	60050000 	andvs	r0, r5, r0
    4050:	0000021e 	andeq	r0, r0, lr, lsl r2
    4054:	040e0088 	streq	r0, [lr], #-136	; 0xffffff78
    4058:	0000026e 	andeq	r0, r0, lr, ror #4
    405c:	0002c209 	andeq	ip, r2, r9, lsl #4
    4060:	0002c200 	andeq	ip, r2, r0, lsl #4
    4064:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    4068:	001f0000 	andseq	r0, pc, r0
    406c:	02c8040e 	sbceq	r0, r8, #234881024	; 0xe000000
    4070:	0f130000 	svceq	0x00130000
    4074:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
    4078:	ee730508 	cdp	5, 7, cr0, cr3, cr8, {0}
    407c:	0c000002 	stceq	0, cr0, [r0], {2}
    4080:	00000672 	andeq	r0, r0, r2, ror r6
    4084:	02ee7405 	rsceq	r7, lr, #83886080	; 0x5000000
    4088:	0c000000 	stceq	0, cr0, [r0], {-0}
    408c:	000005d9 	ldrdeq	r0, [r0], -r9
    4090:	00387505 	eorseq	r7, r8, r5, lsl #10
    4094:	00040000 	andeq	r0, r4, r0
    4098:	0054040e 	subseq	r0, r4, lr, lsl #8
    409c:	d10f0000 	mrsle	r0, CPSR
    40a0:	68000008 	stmdavs	r0, {r3}
    40a4:	041eb305 	ldreq	fp, [lr], #-773	; 0xfffffcfb
    40a8:	5f100000 	svcpl	0x00100000
    40ac:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    40b0:	000002ee 	andeq	r0, r0, lr, ror #5
    40b4:	725f1000 	subsvc	r1, pc, #0
    40b8:	38b50500 	ldmcc	r5!, {r8, sl}
    40bc:	04000000 	streq	r0, [r0], #-0
    40c0:	00775f10 	rsbseq	r5, r7, r0, lsl pc
    40c4:	0038b605 	eorseq	fp, r8, r5, lsl #12
    40c8:	0c080000 	stceq	0, cr0, [r8], {-0}
    40cc:	000006a5 	andeq	r0, r0, r5, lsr #13
    40d0:	005bb705 	subseq	fp, fp, r5, lsl #14
    40d4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    40d8:	00000784 	andeq	r0, r0, r4, lsl #15
    40dc:	005bb805 	subseq	fp, fp, r5, lsl #16
    40e0:	100e0000 	andne	r0, lr, r0
    40e4:	0066625f 	rsbeq	r6, r6, pc, asr r2
    40e8:	02c9b905 	sbceq	fp, r9, #81920	; 0x14000
    40ec:	0c100000 	ldceq	0, cr0, [r0], {-0}
    40f0:	0000062f 	andeq	r0, r0, pc, lsr #12
    40f4:	0038ba05 	eorseq	fp, r8, r5, lsl #20
    40f8:	0c180000 	ldceq	0, cr0, [r8], {-0}
    40fc:	00000695 	muleq	r0, r5, r6
    4100:	011dc105 	tsteq	sp, r5, lsl #2
    4104:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    4108:	00000758 	andeq	r0, r0, r8, asr r7
    410c:	0579c305 	ldrbeq	ip, [r9, #-773]!	; 0xfffffcfb
    4110:	0c200000 	stceq	0, cr0, [r0], #-0
    4114:	000007e2 	andeq	r0, r0, r2, ror #15
    4118:	05a3c505 	streq	ip, [r3, #1285]!	; 0x505
    411c:	0c240000 	stceq	0, cr0, [r4], #-0
    4120:	00000943 	andeq	r0, r0, r3, asr #18
    4124:	05c7c805 	strbeq	ip, [r7, #2053]	; 0x805
    4128:	0c280000 	stceq	0, cr0, [r8], #-0
    412c:	00000a5c 	andeq	r0, r0, ip, asr sl
    4130:	05e1c905 	strbeq	ip, [r1, #2309]!	; 0x905
    4134:	102c0000 	eorne	r0, ip, r0
    4138:	0062755f 	rsbeq	r7, r2, pc, asr r5
    413c:	02c9cc05 	sbceq	ip, r9, #1280	; 0x500
    4140:	10300000 	eorsne	r0, r0, r0
    4144:	0070755f 	rsbseq	r7, r0, pc, asr r5
    4148:	02eecd05 	rsceq	ip, lr, #320	; 0x140
    414c:	10380000 	eorsne	r0, r8, r0
    4150:	0072755f 	rsbseq	r7, r2, pc, asr r5
    4154:	0038ce05 	eorseq	ip, r8, r5, lsl #28
    4158:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    415c:	0000066c 	andeq	r0, r0, ip, ror #12
    4160:	05e7d105 	strbeq	sp, [r7, #261]!	; 0x105
    4164:	0c400000 	mareq	acc0, r0, r0
    4168:	00000a34 	andeq	r0, r0, r4, lsr sl
    416c:	05f7d205 	ldrbeq	sp, [r7, #517]!	; 0x205
    4170:	10430000 	subne	r0, r3, r0
    4174:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    4178:	02c9d505 	sbceq	sp, r9, #20971520	; 0x1400000
    417c:	0c440000 	mareq	acc0, r0, r4
    4180:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
    4184:	0038d805 	eorseq	sp, r8, r5, lsl #16
    4188:	0c4c0000 	mareq	acc0, r0, ip
    418c:	000006cc 	andeq	r0, r0, ip, asr #13
    4190:	008ed905 	addeq	sp, lr, r5, lsl #18
    4194:	0c500000 	mraeq	r0, r0, acc0
    4198:	000005f2 	strdeq	r0, [r0], -r2
    419c:	043cdc05 	ldrteq	sp, [ip], #-3077	; 0xfffff3fb
    41a0:	0c540000 	mraeq	r0, r4, acc0
    41a4:	000007c8 	andeq	r0, r0, r8, asr #15
    41a8:	0112e005 	tsteq	r2, r5
    41ac:	0c580000 	mraeq	r0, r8, acc0
    41b0:	000008d9 	ldrdeq	r0, [r0], -r9
    41b4:	0107e205 	tsteq	r7, r5, lsl #4
    41b8:	0c5c0000 	mraeq	r0, ip, acc0
    41bc:	000007da 	ldrdeq	r0, [r0], -sl
    41c0:	0038e305 	eorseq	lr, r8, r5, lsl #6
    41c4:	00640000 	rsbeq	r0, r4, r0
    41c8:	00003814 	andeq	r3, r0, r4, lsl r8
    41cc:	00043c00 	andeq	r3, r4, r0, lsl #24
    41d0:	043c1500 	ldrteq	r1, [ip], #-1280	; 0xfffffb00
    41d4:	1d150000 	ldcne	0, cr0, [r5, #-0]
    41d8:	15000001 	strne	r0, [r0, #-1]
    41dc:	0000011f 	andeq	r0, r0, pc, lsl r1
    41e0:	00003815 	andeq	r3, r0, r5, lsl r8
    41e4:	040e0000 	streq	r0, [lr], #-0
    41e8:	00000447 	andeq	r0, r0, r7, asr #8
    41ec:	00043c03 	andeq	r3, r4, r3, lsl #24
    41f0:	09261600 	stmdbeq	r6!, {r9, sl, ip}
    41f4:	04280000 	strteq	r0, [r8], #-0
    41f8:	79023805 	stmdbvc	r2, {r0, r2, fp, ip, sp}
    41fc:	17000005 	strne	r0, [r0, -r5]
    4200:	00000897 	muleq	r0, r7, r8
    4204:	38023a05 	stmdacc	r2, {r0, r2, r9, fp, ip, sp}
    4208:	00000000 	andeq	r0, r0, r0
    420c:	0006b417 	andeq	fp, r6, r7, lsl r4
    4210:	023f0500 	eorseq	r0, pc, #0, 10
    4214:	0000064e 	andeq	r0, r0, lr, asr #12
    4218:	07741704 	ldrbeq	r1, [r4, -r4, lsl #14]!
    421c:	3f050000 	svccc	0x00050000
    4220:	00064e02 	andeq	r4, r6, r2, lsl #28
    4224:	39170800 	ldmdbcc	r7, {fp}
    4228:	05000007 	streq	r0, [r0, #-7]
    422c:	064e023f 			; <UNDEFINED> instruction: 0x064e023f
    4230:	170c0000 	strne	r0, [ip, -r0]
    4234:	000008fa 	strdeq	r0, [r0], -sl
    4238:	38024105 	stmdacc	r2, {r0, r2, r8, lr}
    423c:	10000000 	andne	r0, r0, r0
    4240:	0005e717 	andeq	lr, r5, r7, lsl r7
    4244:	02420500 	subeq	r0, r2, #0, 10
    4248:	00000830 	andeq	r0, r0, r0, lsr r8
    424c:	09c11714 	stmibeq	r1, {r2, r4, r8, r9, sl, ip}^
    4250:	44050000 	strmi	r0, [r5], #-0
    4254:	00003802 	andeq	r3, r0, r2, lsl #16
    4258:	04173000 	ldreq	r3, [r7], #-0
    425c:	05000009 	streq	r0, [r0, #-9]
    4260:	059d0245 	ldreq	r0, [sp, #581]	; 0x245
    4264:	17340000 	ldrne	r0, [r4, -r0]!
    4268:	00000854 	andeq	r0, r0, r4, asr r8
    426c:	38024705 	stmdacc	r2, {r0, r2, r8, r9, sl, lr}
    4270:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4274:	00091417 	andeq	r1, r9, r7, lsl r4
    4278:	02490500 	subeq	r0, r9, #0, 10
    427c:	0000084b 	andeq	r0, r0, fp, asr #16
    4280:	07b3173c 			; <UNDEFINED> instruction: 0x07b3173c
    4284:	4c050000 	stcmi	0, cr0, [r5], {-0}
    4288:	00018f02 	andeq	r8, r1, r2, lsl #30
    428c:	5e174000 	cdppl	0, 1, cr4, cr7, cr0, {0}
    4290:	05000007 	streq	r0, [r0, #-7]
    4294:	0038024d 	eorseq	r0, r8, sp, asr #4
    4298:	17440000 	strbne	r0, [r4, -r0]
    429c:	00000a76 	andeq	r0, r0, r6, ror sl
    42a0:	8f024e05 	svchi	0x00024e05
    42a4:	48000001 	stmdami	r0, {r0}
    42a8:	00086617 	andeq	r6, r8, r7, lsl r6
    42ac:	024f0500 	subeq	r0, pc, #0, 10
    42b0:	00000851 	andeq	r0, r0, r1, asr r8
    42b4:	077c174c 	ldrbeq	r1, [ip, -ip, asr #14]!
    42b8:	52050000 	andpl	r0, r5, #0
    42bc:	00003802 	andeq	r3, r0, r2, lsl #16
    42c0:	c4175000 	ldrgt	r5, [r7], #-0
    42c4:	05000006 	streq	r0, [r0, #-6]
    42c8:	011f0253 	tsteq	pc, r3, asr r2	; <UNPREDICTABLE>
    42cc:	17540000 	ldrbne	r0, [r4, -r0]
    42d0:	00000890 	muleq	r0, r0, r8
    42d4:	0e027605 	cfmadd32eq	mvax0, mvfx7, mvfx2, mvfx5
    42d8:	58000008 	stmdapl	r0, {r3}
    42dc:	00084218 	andeq	r4, r8, r8, lsl r2
    42e0:	027a0500 	rsbseq	r0, sl, #0, 10
    42e4:	000002ac 	andeq	r0, r0, ip, lsr #5
    42e8:	91180148 	tstls	r8, r8, asr #2
    42ec:	05000007 	streq	r0, [r0, #-7]
    42f0:	026e027b 	rsbeq	r0, lr, #-1342177273	; 0xb0000007
    42f4:	014c0000 	mrseq	r0, (UNDEF: 76)
    42f8:	000a1818 	andeq	r1, sl, r8, lsl r8
    42fc:	027f0500 	rsbseq	r0, pc, #0, 10
    4300:	00000862 	andeq	r0, r0, r2, ror #16
    4304:	9d1802dc 	lfmls	f0, 4, [r8, #-880]	; 0xfffffc90
    4308:	05000006 	streq	r0, [r0, #-6]
    430c:	06130284 	ldreq	r0, [r3], -r4, lsl #5
    4310:	02e00000 	rsceq	r0, r0, #0
    4314:	00068218 	andeq	r8, r6, r8, lsl r2
    4318:	02850500 	addeq	r0, r5, #0, 10
    431c:	0000086e 	andeq	r0, r0, lr, ror #16
    4320:	0e0002ec 	cdpeq	2, 0, cr0, cr0, cr12, {7}
    4324:	00041e04 	andeq	r1, r4, r4, lsl #28
    4328:	00381400 	eorseq	r1, r8, r0, lsl #8
    432c:	059d0000 	ldreq	r0, [sp]
    4330:	3c150000 	ldccc	0, cr0, [r5], {-0}
    4334:	15000004 	strne	r0, [r0, #-4]
    4338:	0000011d 	andeq	r0, r0, sp, lsl r1
    433c:	00059d15 	andeq	r9, r5, r5, lsl sp
    4340:	00381500 	eorseq	r1, r8, r0, lsl #10
    4344:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4348:	00012c04 	andeq	r2, r1, r4, lsl #24
    434c:	7f040e00 	svcvc	0x00040e00
    4350:	14000005 	strne	r0, [r0], #-5
    4354:	00000099 	muleq	r0, r9, r0
    4358:	000005c7 	andeq	r0, r0, r7, asr #11
    435c:	00043c15 	andeq	r3, r4, r5, lsl ip
    4360:	011d1500 	tsteq	sp, r0, lsl #10
    4364:	99150000 	ldmdbls	r5, {}	; <UNPREDICTABLE>
    4368:	15000000 	strne	r0, [r0, #-0]
    436c:	00000038 	andeq	r0, r0, r8, lsr r0
    4370:	a9040e00 	stmdbge	r4, {r9, sl, fp}
    4374:	14000005 	strne	r0, [r0], #-5
    4378:	00000038 	andeq	r0, r0, r8, lsr r0
    437c:	000005e1 	andeq	r0, r0, r1, ror #11
    4380:	00043c15 	andeq	r3, r4, r5, lsl ip
    4384:	011d1500 	tsteq	sp, r0, lsl #10
    4388:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    438c:	0005cd04 	andeq	ip, r5, r4, lsl #26
    4390:	00540900 	subseq	r0, r4, r0, lsl #18
    4394:	05f70000 	ldrbeq	r0, [r7, #0]!
    4398:	df0a0000 	svcle	0x000a0000
    439c:	02000000 	andeq	r0, r0, #0
    43a0:	00540900 	subseq	r0, r4, r0, lsl #18
    43a4:	06070000 	streq	r0, [r7], -r0
    43a8:	df0a0000 	svcle	0x000a0000
    43ac:	00000000 	andeq	r0, r0, r0
    43b0:	08bf0600 	ldmeq	pc!, {r9, sl}	; <UNPREDICTABLE>
    43b4:	1d050000 	stcne	0, cr0, [r5, #-0]
    43b8:	0002f401 	andeq	pc, r2, r1, lsl #8
    43bc:	09ff1900 	ldmibeq	pc!, {r8, fp, ip}^	; <UNPREDICTABLE>
    43c0:	050c0000 	streq	r0, [ip, #-0]
    43c4:	06480121 	strbeq	r0, [r8], -r1, lsr #2
    43c8:	e7170000 	ldr	r0, [r7, -r0]
    43cc:	05000008 	streq	r0, [r0, #-8]
    43d0:	06480123 	strbeq	r0, [r8], -r3, lsr #2
    43d4:	17000000 	strne	r0, [r0, -r0]
    43d8:	0000078a 	andeq	r0, r0, sl, lsl #15
    43dc:	38012405 	stmdacc	r1, {r0, r2, sl, sp}
    43e0:	04000000 	streq	r0, [r0], #-0
    43e4:	0008b917 	andeq	fp, r8, r7, lsl r9
    43e8:	01250500 			; <UNDEFINED> instruction: 0x01250500
    43ec:	0000064e 	andeq	r0, r0, lr, asr #12
    43f0:	040e0008 	streq	r0, [lr], #-8
    43f4:	00000613 	andeq	r0, r0, r3, lsl r6
    43f8:	0607040e 	streq	r0, [r7], -lr, lsl #8
    43fc:	df190000 	svcle	0x00190000
    4400:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    4404:	89013d05 	stmdbhi	r1, {r0, r2, r8, sl, fp, ip, sp}
    4408:	17000006 	strne	r0, [r0, -r6]
    440c:	0000092d 	andeq	r0, r0, sp, lsr #18
    4410:	89013e05 	stmdbhi	r1, {r0, r2, r9, sl, fp, ip, sp}
    4414:	00000006 	andeq	r0, r0, r6
    4418:	00096d17 	andeq	r6, r9, r7, lsl sp
    441c:	013f0500 	teqeq	pc, r0, lsl #10
    4420:	00000689 	andeq	r0, r0, r9, lsl #13
    4424:	09891706 	stmibeq	r9, {r1, r2, r8, r9, sl, ip}
    4428:	40050000 	andmi	r0, r5, r0
    442c:	00006201 	andeq	r6, r0, r1, lsl #4
    4430:	09000c00 	stmdbeq	r0, {sl, fp}
    4434:	00000062 	andeq	r0, r0, r2, rrx
    4438:	00000699 	muleq	r0, r9, r6
    443c:	0000df0a 	andeq	sp, r0, sl, lsl #30
    4440:	1a000200 	bne	4c48 <_start-0x33b8>
    4444:	025705d0 	subseq	r0, r7, #208, 10	; 0x34000000
    4448:	0000079a 	muleq	r0, sl, r7
    444c:	0009d317 	andeq	sp, r9, r7, lsl r3
    4450:	02590500 	subseq	r0, r9, #0, 10
    4454:	00000031 	andeq	r0, r0, r1, lsr r0
    4458:	09731700 	ldmdbeq	r3!, {r8, r9, sl, ip}^
    445c:	5a050000 	bpl	144464 <__bss_end+0x12e934>
    4460:	00011f02 	andeq	r1, r1, r2, lsl #30
    4464:	a6170400 	ldrge	r0, [r7], -r0, lsl #8
    4468:	05000007 	streq	r0, [r0, #-7]
    446c:	079a025b 			; <UNDEFINED> instruction: 0x079a025b
    4470:	17080000 	strne	r0, [r8, -r0]
    4474:	00000a4d 	andeq	r0, r0, sp, asr #20
    4478:	a5025c05 	strge	r5, [r2, #-3077]	; 0xfffff3fb
    447c:	24000001 	strcs	r0, [r0], #-1
    4480:	00074917 	andeq	r4, r7, r7, lsl r9
    4484:	025d0500 	subseq	r0, sp, #0, 10
    4488:	00000038 	andeq	r0, r0, r8, lsr r0
    448c:	08e21748 	stmiaeq	r2!, {r3, r6, r8, r9, sl, ip}^
    4490:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    4494:	00007c02 	andeq	r7, r0, r2, lsl #24
    4498:	63175000 	tstvs	r7, #0
    449c:	0500000a 	streq	r0, [r0, #-10]
    44a0:	0654025f 			; <UNDEFINED> instruction: 0x0654025f
    44a4:	17580000 	ldrbne	r0, [r8, -r0]
    44a8:	000008ed 	andeq	r0, r0, sp, ror #17
    44ac:	07026005 	streq	r6, [r2, -r5]
    44b0:	68000001 	stmdavs	r0, {r0}
    44b4:	000a6817 	andeq	r6, sl, r7, lsl r8
    44b8:	02610500 	rsbeq	r0, r1, #0, 10
    44bc:	00000107 	andeq	r0, r0, r7, lsl #2
    44c0:	06551770 			; <UNDEFINED> instruction: 0x06551770
    44c4:	62050000 	andvs	r0, r5, #0
    44c8:	00010702 	andeq	r0, r1, r2, lsl #14
    44cc:	0e177800 	cdpeq	8, 1, cr7, cr7, cr0, {0}
    44d0:	0500000a 	streq	r0, [r0, #-10]
    44d4:	07aa0263 	streq	r0, [sl, r3, ror #4]!
    44d8:	17800000 	strne	r0, [r0, r0]
    44dc:	0000079a 	muleq	r0, sl, r7
    44e0:	ba026405 	blt	9d4fc <__bss_end+0x879cc>
    44e4:	88000007 	stmdahi	r0, {r0, r1, r2}
    44e8:	0009a117 	andeq	sl, r9, r7, lsl r1
    44ec:	02650500 	rsbeq	r0, r5, #0, 10
    44f0:	00000038 	andeq	r0, r0, r8, lsr r0
    44f4:	06fb17a0 	ldrbteq	r1, [fp], r0, lsr #15
    44f8:	66050000 	strvs	r0, [r5], -r0
    44fc:	00010702 	andeq	r0, r1, r2, lsl #14
    4500:	4617a400 	ldrmi	sl, [r7], -r0, lsl #8
    4504:	05000006 	streq	r0, [r0, #-6]
    4508:	01070267 	tsteq	r7, r7, ror #4
    450c:	17ac0000 	strne	r0, [ip, r0]!
    4510:	000006ea 	andeq	r0, r0, sl, ror #13
    4514:	07026805 	streq	r6, [r2, -r5, lsl #16]
    4518:	b4000001 	strlt	r0, [r0], #-1
    451c:	0005f817 	andeq	pc, r5, r7, lsl r8	; <UNPREDICTABLE>
    4520:	02690500 	rsbeq	r0, r9, #0, 10
    4524:	00000107 	andeq	r0, r0, r7, lsl #2
    4528:	060717bc 			; <UNDEFINED> instruction: 0x060717bc
    452c:	6a050000 	bvs	144534 <__bss_end+0x12ea04>
    4530:	00010702 	andeq	r0, r1, r2, lsl #14
    4534:	9517c400 	ldrls	ip, [r7, #-1024]	; 0xfffffc00
    4538:	05000008 	streq	r0, [r0, #-8]
    453c:	0038026b 	eorseq	r0, r8, fp, ror #4
    4540:	00cc0000 	sbceq	r0, ip, r0
    4544:	00012509 	andeq	r2, r1, r9, lsl #10
    4548:	0007aa00 	andeq	sl, r7, r0, lsl #20
    454c:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    4550:	00190000 	andseq	r0, r9, r0
    4554:	00012509 	andeq	r2, r1, r9, lsl #10
    4558:	0007ba00 	andeq	fp, r7, r0, lsl #20
    455c:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    4560:	00070000 	andeq	r0, r7, r0
    4564:	00012509 	andeq	r2, r1, r9, lsl #10
    4568:	0007ca00 	andeq	ip, r7, r0, lsl #20
    456c:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    4570:	00170000 	andseq	r0, r7, r0
    4574:	7005f01a 	andvc	pc, r5, sl, lsl r0	; <UNPREDICTABLE>
    4578:	0007ee02 	andeq	lr, r7, r2, lsl #28
    457c:	08321700 	ldmdaeq	r2!, {r8, r9, sl, ip}
    4580:	73050000 	movwvc	r0, #20480	; 0x5000
    4584:	0007ee02 	andeq	lr, r7, r2, lsl #28
    4588:	05170000 	ldreq	r0, [r7, #-0]
    458c:	0500000a 	streq	r0, [r0, #-10]
    4590:	07fe0274 			; <UNDEFINED> instruction: 0x07fe0274
    4594:	00780000 	rsbseq	r0, r8, r0
    4598:	0002ee09 	andeq	lr, r2, r9, lsl #28
    459c:	0007fe00 	andeq	pc, r7, r0, lsl #28
    45a0:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    45a4:	001d0000 	andseq	r0, sp, r0
    45a8:	00003109 	andeq	r3, r0, r9, lsl #2
    45ac:	00080e00 	andeq	r0, r8, r0, lsl #28
    45b0:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    45b4:	001d0000 	andseq	r0, sp, r0
    45b8:	5505f01b 	strpl	pc, [r5, #-27]	; 0xffffffe5
    45bc:	00083002 	andeq	r3, r8, r2
    45c0:	09261c00 	stmdbeq	r6!, {sl, fp, ip}
    45c4:	6c050000 	stcvs	0, cr0, [r5], {-0}
    45c8:	00069902 	andeq	r9, r6, r2, lsl #18
    45cc:	0a3a1c00 	beq	e8b5d4 <__bss_end+0xe75aa4>
    45d0:	75050000 	strvc	r0, [r5, #-0]
    45d4:	0007ca02 	andeq	ip, r7, r2, lsl #20
    45d8:	25090000 	strcs	r0, [r9, #-0]
    45dc:	40000001 	andmi	r0, r0, r1
    45e0:	0a000008 	beq	4608 <_start-0x39f8>
    45e4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    45e8:	4b1d0018 	blmi	744650 <__bss_end+0x72eb20>
    45ec:	15000008 	strne	r0, [r0, #-8]
    45f0:	0000043c 	andeq	r0, r0, ip, lsr r4
    45f4:	40040e00 	andmi	r0, r4, r0, lsl #28
    45f8:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    45fc:	00018f04 	andeq	r8, r1, r4, lsl #30
    4600:	08621d00 	stmdaeq	r2!, {r8, sl, fp, ip}^
    4604:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    4608:	00000000 	andeq	r0, r0, r0
    460c:	0868040e 	stmdaeq	r8!, {r1, r2, r3, sl}^
    4610:	040e0000 	streq	r0, [lr], #-0
    4614:	00000857 	andeq	r0, r0, r7, asr r8
    4618:	00060709 	andeq	r0, r6, r9, lsl #14
    461c:	00087e00 	andeq	r7, r8, r0, lsl #28
    4620:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    4624:	00020000 	andeq	r0, r2, r0
    4628:	0009b51e 	andeq	fp, r9, lr, lsl r5
    462c:	02fd0500 	rscseq	r0, sp, #0, 10
    4630:	0000043c 	andeq	r0, r0, ip, lsr r4
    4634:	0009ae1e 	andeq	sl, r9, lr, lsl lr
    4638:	02fe0500 	rscseq	r0, lr, #0, 10
    463c:	00000442 	andeq	r0, r0, r2, asr #8
    4640:	00084a1f 	andeq	r4, r8, pc, lsl sl
    4644:	1f5f0600 	svcne	0x005f0600
    4648:	20000001 	andcs	r0, r0, r1
    464c:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    4650:	5c011000 	stcpl	0, cr1, [r1], {-0}
    4654:	000008c5 	andeq	r0, r0, r5, asr #17
    4658:	0017fb08 	andseq	pc, r7, r8, lsl #22
    465c:	cc5f0100 	ldfgte	f0, [pc], {-0}
    4660:	08000008 	stmdaeq	r0, {r3}
    4664:	00001821 	andeq	r1, r0, r1, lsr #16
    4668:	08d16301 	ldmeq	r1, {r0, r8, r9, sp, lr}^
    466c:	04000000 	streq	r0, [r0], #-0
    4670:	01620408 	cmneq	r2, r8, lsl #8
    4674:	c5210000 	strgt	r0, [r1, #-0]!
    4678:	09000008 	stmdbeq	r0, {r3}
    467c:	00000054 	andeq	r0, r0, r4, asr r0
    4680:	000008e2 	andeq	r0, r0, r2, ror #17
    4684:	0000df22 	andeq	sp, r0, r2, lsr #30
    4688:	000fff00 	andeq	pc, pc, r0, lsl #30
    468c:	00191d23 	andseq	r1, r9, r3, lsr #26
    4690:	a1640100 	cmnge	r4, r0, lsl #2
    4694:	05000008 	streq	r0, [r0, #-8]
    4698:	014b2003 	cmpeq	fp, r3
    469c:	18510f00 	ldmdane	r1, {r8, r9, sl, fp}^
    46a0:	01080000 	mrseq	r0, (UNDEF: 8)
    46a4:	00091868 	andeq	r1, r9, r8, ror #16
    46a8:	179c0c00 	ldrne	r0, [ip, r0, lsl #24]
    46ac:	6a010000 	bvs	446b4 <__bss_end+0x2eb84>
    46b0:	00000918 	andeq	r0, r0, r8, lsl r9
    46b4:	17910c00 	ldrne	r0, [r1, r0, lsl #24]
    46b8:	6b010000 	blvs	446c0 <__bss_end+0x2eb90>
    46bc:	00000021 	andeq	r0, r0, r1, lsr #32
    46c0:	040e0004 	streq	r0, [lr], #-4
    46c4:	000008f3 	strdeq	r0, [r0], -r3
    46c8:	0018b802 	andseq	fp, r8, r2, lsl #16
    46cc:	f36c0100 	vrhadd.u32	d16, d12, d0
    46d0:	23000008 	movwcs	r0, #8
    46d4:	000017c6 	andeq	r1, r0, r6, asr #15
    46d8:	00698201 	rsbeq	r8, r9, r1, lsl #4
    46dc:	03050000 	movweq	r0, #20480	; 0x5000
    46e0:	0001472c 	andeq	r4, r1, ip, lsr #14
    46e4:	00177b23 	andseq	r7, r7, r3, lsr #22
    46e8:	2c850100 	stfcss	f0, [r5], {0}
    46ec:	05000000 	streq	r0, [r0, #-0]
    46f0:	01473003 	cmpeq	r7, r3
    46f4:	17bf2300 	ldrne	r2, [pc, r0, lsl #6]!
    46f8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    46fc:	0000091e 	andeq	r0, r0, lr, lsl r9
    4700:	5b200305 	blpl	80531c <__bss_end+0x7ef7ec>
    4704:	c3230001 			; <UNDEFINED> instruction: 0xc3230001
    4708:	01000018 	tsteq	r0, r8, lsl r0
    470c:	00096d88 	andeq	r6, r9, r8, lsl #27
    4710:	28030500 	stmdacs	r3, {r8, sl}
    4714:	0e00015b 	mcreq	1, 0, r0, cr0, cr11, {2}
    4718:	00091e04 	andeq	r1, r9, r4, lsl #28
    471c:	180d2300 	stmdane	sp, {r8, r9, sp}
    4720:	8c010000 	stchi	0, cr0, [r1], {-0}
    4724:	00000021 	andeq	r0, r0, r1, lsr #32
    4728:	474c0305 	strbmi	r0, [ip, -r5, lsl #6]
    472c:	ae240001 	cdpge	0, 2, cr0, cr4, cr1, {0}
    4730:	01000018 	tsteq	r0, r8, lsl r0
    4734:	00002191 	muleq	r0, r1, r1
    4738:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    473c:	2500015b 	strcs	r0, [r0, #-347]	; 0xfffffea5
    4740:	00001873 	andeq	r1, r0, r3, ror r8
    4744:	90013401 	andls	r3, r1, r1, lsl #8
    4748:	54000141 	strpl	r0, [r0], #-321	; 0xfffffebf
    474c:	01000001 	tsteq	r0, r1
    4750:	0009d99c 	muleq	r9, ip, r9
    4754:	190d2600 	stmdbne	sp, {r9, sl, sp}
    4758:	34010000 	strcc	r0, [r1], #-0
    475c:	00096d01 	andeq	r6, r9, r1, lsl #26
    4760:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4764:	00098e27 	andeq	r8, r9, r7, lsr #28
    4768:	01360100 	teqeq	r6, r0, lsl #2
    476c:	0000096d 	andeq	r0, r0, sp, ror #18
    4770:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    4774:	00637570 	rsbeq	r7, r3, r0, ror r5
    4778:	ee013701 	cdp	7, 0, cr3, cr1, cr1, {0}
    477c:	02000002 	andeq	r0, r0, #2
    4780:	25007091 	strcs	r7, [r0, #-145]	; 0xffffff6f
    4784:	000017e3 	andeq	r1, r0, r3, ror #15
    4788:	b8011301 	stmdalt	r1, {r0, r8, r9, ip}
    478c:	d8000140 	stmdale	r0, {r6, r8}
    4790:	01000000 	mrseq	r0, (UNDEF: 0)
    4794:	000a0e9c 	muleq	sl, ip, lr
    4798:	18282700 	stmdane	r8!, {r8, r9, sl, sp}
    479c:	15010000 	strne	r0, [r1, #-0]
    47a0:	00096d01 	andeq	r6, r9, r1, lsl #26
    47a4:	70910200 	addsvc	r0, r1, r0, lsl #4
    47a8:	00180227 	andseq	r0, r8, r7, lsr #4
    47ac:	01160100 	tsteq	r6, r0, lsl #2
    47b0:	000002ee 	andeq	r0, r0, lr, ror #5
    47b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    47b8:	00188e29 	andseq	r8, r8, r9, lsr #28
    47bc:	010d0100 	mrseq	r0, (UNDEF: 29)
    47c0:	000140a0 	andeq	r4, r1, r0, lsr #1
    47c4:	00000018 	andeq	r0, r0, r8, lsl r0
    47c8:	5e2a9c01 	cdppl	12, 2, cr9, cr10, cr1, {0}
    47cc:	01000018 	tsteq	r0, r8, lsl r0
    47d0:	00210107 	eoreq	r0, r1, r7, lsl #2
    47d4:	407c0000 	rsbsmi	r0, ip, r0
    47d8:	00240001 	eoreq	r0, r4, r1
    47dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    47e0:	0018a42b 	andseq	sl, r8, fp, lsr #8
    47e4:	00ee0100 	rsceq	r0, lr, r0, lsl #2
    47e8:	7c000140 	stfvcs	f0, [r0], {64}	; 0x40
    47ec:	01000000 	mrseq	r0, (UNDEF: 0)
    47f0:	000a759c 	muleq	sl, ip, r5
    47f4:	76702c00 	ldrbtvc	r2, [r0], -r0, lsl #24
    47f8:	1dee0100 	stfnee	f0, [lr]
    47fc:	02000001 	andeq	r0, r0, #1
    4800:	702d6c91 	mlavc	sp, r1, ip, r6
    4804:	01006375 	tsteq	r0, r5, ror r3
    4808:	0002eef0 	strdeq	lr, [r2], -r0
    480c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4810:	00178a23 	andseq	r8, r7, r3, lsr #20
    4814:	6df10100 	ldfvse	f0, [r1]
    4818:	02000009 	andeq	r0, r0, #9
    481c:	2e007091 	mcrcs	0, 0, r7, cr0, cr1, {4}
    4820:	000017d6 	ldrdeq	r1, [r0], -r6
    4824:	011d9201 	tsteq	sp, r1, lsl #4
    4828:	3e380000 	cdpcc	0, 3, cr0, cr8, cr0, {0}
    482c:	01c80001 	biceq	r0, r8, r1
    4830:	9c010000 	stcls	0, cr0, [r1], {-0}
    4834:	0017ef2f 	andseq	lr, r7, pc, lsr #30
    4838:	21920100 	orrscs	r0, r2, r0, lsl #2
    483c:	02000000 	andeq	r0, r0, #0
    4840:	ac236491 	cfstrsge	mvf6, [r3], #-580	; 0xfffffdbc
    4844:	01000017 	tsteq	r0, r7, lsl r0
    4848:	00096d94 	muleq	r9, r4, sp
    484c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4850:	00176b23 	andseq	r6, r7, r3, lsr #22
    4854:	6d940100 	ldfvss	f0, [r4]
    4858:	02000009 	andeq	r0, r0, #9
    485c:	39237091 	stmdbcc	r3!, {r0, r4, r7, ip, sp, lr}
    4860:	01000018 	tsteq	r0, r8, lsl r0
    4864:	00096d94 	muleq	r9, r4, sp
    4868:	68910200 	ldmvs	r1, {r9}
    486c:	00184823 	andseq	r4, r8, r3, lsr #16
    4870:	1d950100 	ldfnes	f0, [r5]
    4874:	02000001 	andeq	r0, r0, #1
    4878:	00006c91 	muleq	r0, r1, ip
    487c:	000000d3 	ldrdeq	r0, [r0], -r3
    4880:	0f760004 	svceq	0x00760004
    4884:	01040000 	mrseq	r0, (UNDEF: 4)
    4888:	000000e5 	andeq	r0, r0, r5, ror #1
    488c:	0019290c 	andseq	r2, r9, ip, lsl #18
    4890:	0142fc00 	cmpeq	r2, r0, lsl #24	; <UNPREDICTABLE>
    4894:	00011800 	andeq	r1, r1, r0, lsl #16
    4898:	000f7f00 	andeq	r7, pc, r0, lsl #30
    489c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    48a0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    48a4:	22070403 	andcs	r0, r7, #50331648	; 0x3000000
    48a8:	03000006 	movweq	r0, #6
    48ac:	012f0508 			; <UNDEFINED> instruction: 0x012f0508
    48b0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    48b4:	00015d04 	andeq	r5, r1, r4, lsl #26
    48b8:	03040400 	movweq	r0, #17408	; 0x4400
    48bc:	061d0704 	ldreq	r0, [sp], -r4, lsl #14
    48c0:	04030000 	streq	r0, [r3], #-0
    48c4:	00013405 	andeq	r3, r1, r5, lsl #8
    48c8:	06010300 	streq	r0, [r1], -r0, lsl #6
    48cc:	00000884 	andeq	r0, r0, r4, lsl #17
    48d0:	59070203 	stmdbpl	r7, {r0, r1, r9}
    48d4:	03000000 	movweq	r0, #0
    48d8:	00dc0704 	sbcseq	r0, ip, r4, lsl #14
    48dc:	01030000 	mrseq	r0, (UNDEF: 3)
    48e0:	00088208 	andeq	r8, r8, r8, lsl #4
    48e4:	19540500 	ldmdbne	r4, {r8, sl}^
    48e8:	66010000 	strvs	r0, [r1], -r0
    48ec:	0001437c 	andeq	r4, r1, ip, ror r3
    48f0:	00000098 	muleq	r0, r8, r0
    48f4:	4e069c01 	cdpmi	12, 0, cr9, cr6, cr1, {0}
    48f8:	01000019 	tsteq	r0, r9, lsl r0
    48fc:	01433854 	cmpeq	r3, r4, asr r8
    4900:	00004400 	andeq	r4, r0, r0, lsl #8
    4904:	aa9c0100 	bge	fe704d0c <_estack+0xf66f4d0c>
    4908:	07000000 	streq	r0, [r0, -r0]
    490c:	00000030 	andeq	r0, r0, r0, lsr r0
    4910:	003d5401 	eorseq	r5, sp, r1, lsl #8
    4914:	91020000 	mrsls	r0, (UNDEF: 2)
    4918:	0069086c 	rsbeq	r0, r9, ip, ror #16
    491c:	00215601 	eoreq	r5, r1, r1, lsl #12
    4920:	91020000 	mrsls	r0, (UNDEF: 2)
    4924:	23090074 	movwcs	r0, #36980	; 0x9074
    4928:	01000019 	tsteq	r0, r9, lsl r0
    492c:	0142fc4a 	cmpeq	r2, sl, asr #24	; <UNPREDICTABLE>
    4930:	00003c00 	andeq	r3, r0, r0, lsl #24
    4934:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    4938:	00000030 	andeq	r0, r0, r0, lsr r0
    493c:	003d4a01 	eorseq	r4, sp, r1, lsl #20
    4940:	91020000 	mrsls	r0, (UNDEF: 2)
    4944:	0069086c 	rsbeq	r0, r9, ip, ror #16
    4948:	00214c01 	eoreq	r4, r1, r1, lsl #24
    494c:	91020000 	mrsls	r0, (UNDEF: 2)
    4950:	30000074 	andcc	r0, r0, r4, ror r0
    4954:	04000009 	streq	r0, [r0], #-9
    4958:	00100d00 	andseq	r0, r0, r0, lsl #26
    495c:	00010400 	andeq	r0, r1, r0, lsl #8
    4960:	0c00001a 	stceq	0, cr0, [r0], {26}
    4964:	0000196a 	andeq	r1, r0, sl, ror #18
    4968:	000019a9 	andeq	r1, r0, r9, lsr #19
    496c:	00014414 	andeq	r4, r1, r4, lsl r4
    4970:	00000114 	andeq	r0, r0, r4, lsl r1
    4974:	00001012 	andeq	r1, r0, r2, lsl r0
    4978:	69050402 	stmdbvs	r5, {r1, sl}
    497c:	0300746e 	movweq	r7, #1134	; 0x46e
    4980:	00000ae2 	andeq	r0, r0, r2, ror #21
    4984:	0037d802 	eorseq	sp, r7, r2, lsl #16
    4988:	04040000 	streq	r0, [r4], #-0
    498c:	00062207 	andeq	r2, r6, r7, lsl #4
    4990:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    4994:	0000012f 	andeq	r0, r0, pc, lsr #2
    4998:	5d040804 	stcpl	8, cr0, [r4, #-16]
    499c:	04000001 	streq	r0, [r0], #-1
    49a0:	08840601 	stmeq	r4, {r0, r9, sl}
    49a4:	01040000 	mrseq	r0, (UNDEF: 4)
    49a8:	00088208 	andeq	r8, r8, r8, lsl #4
    49ac:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    49b0:	0000089e 	muleq	r0, lr, r8
    49b4:	59070204 	stmdbpl	r7, {r2, r9}
    49b8:	04000000 	streq	r0, [r0], #-0
    49bc:	01340504 	teqeq	r4, r4, lsl #10
    49c0:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    49c4:	04000000 	streq	r0, [r0], #-0
    49c8:	061d0704 	ldreq	r0, [sp], -r4, lsl #14
    49cc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    49d0:	00061807 	andeq	r1, r6, r7, lsl #16
    49d4:	08700300 	ldmdaeq	r0!, {r8, r9}^
    49d8:	07030000 	streq	r0, [r3, -r0]
    49dc:	00000025 	andeq	r0, r0, r5, lsr #32
    49e0:	00085f03 	andeq	r5, r8, r3, lsl #30
    49e4:	682c0400 	stmdavs	ip!, {sl}
    49e8:	03000000 	movweq	r0, #0
    49ec:	00000955 	andeq	r0, r0, r5, asr r9
    49f0:	00687204 	rsbeq	r7, r8, r4, lsl #4
    49f4:	c1060000 	mrsgt	r0, (UNDEF: 6)
    49f8:	02000007 	andeq	r0, r0, #7
    49fc:	00370165 	eorseq	r0, r7, r5, ror #2
    4a00:	04070000 	streq	r0, [r7], #-0
    4a04:	00cea604 	sbceq	sl, lr, r4, lsl #12
    4a08:	bb080000 	bllt	204a10 <__bss_end+0x1eeee0>
    4a0c:	04000007 	streq	r0, [r0], #-7
    4a10:	0000a3a8 	andeq	sl, r0, r8, lsr #7
    4a14:	076d0800 	strbeq	r0, [sp, -r0, lsl #16]!
    4a18:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    4a1c:	000000ce 	andeq	r0, r0, lr, asr #1
    4a20:	00530900 	subseq	r0, r3, r0, lsl #18
    4a24:	00de0000 	sbcseq	r0, lr, r0
    4a28:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    4a2c:	03000000 	movweq	r0, #0
    4a30:	07040400 	streq	r0, [r4, -r0, lsl #8]
    4a34:	000000dc 	ldrdeq	r0, [r0], -ip
    4a38:	a304080b 	movwge	r0, #18443	; 0x480b
    4a3c:	00000106 	andeq	r0, r0, r6, lsl #2
    4a40:	0009330c 	andeq	r3, r9, ip, lsl #6
    4a44:	25a50400 	strcs	r0, [r5, #1024]!	; 0x400
    4a48:	00000000 	andeq	r0, r0, r0
    4a4c:	00093b0c 	andeq	r3, r9, ip, lsl #22
    4a50:	afaa0400 	svcge	0x00aa0400
    4a54:	04000000 	streq	r0, [r0], #-0
    4a58:	08c60300 	stmiaeq	r6, {r8, r9}^
    4a5c:	ab040000 	blge	104a64 <__bss_end+0xeef34>
    4a60:	000000e5 	andeq	r0, r0, r5, ror #1
    4a64:	00073003 	andeq	r3, r7, r3
    4a68:	82af0400 	adchi	r0, pc, #0, 8
    4a6c:	0d000000 	stceq	0, cr0, [r0, #-0]
    4a70:	011c0e04 	tsteq	ip, r4, lsl #28
    4a74:	040f0000 	streq	r0, [pc], #-0	; 4a7c <_start-0x3584>
    4a78:	00000129 	andeq	r0, r0, r9, lsr #2
    4a7c:	8b080104 	blhi	204e94 <__bss_end+0x1ef364>
    4a80:	05000008 	streq	r0, [r0, #-8]
    4a84:	00000129 	andeq	r0, r0, r9, lsr #2
    4a88:	00099903 	andeq	r9, r9, r3, lsl #18
    4a8c:	74160500 	ldrvc	r0, [r6], #-1280	; 0xfffffb00
    4a90:	10000000 	andne	r0, r0, r0
    4a94:	00000741 	andeq	r0, r0, r1, asr #14
    4a98:	932d0518 			; <UNDEFINED> instruction: 0x932d0518
    4a9c:	0c000001 	stceq	0, cr0, [r0], {1}
    4aa0:	000008e7 	andeq	r0, r0, r7, ror #17
    4aa4:	01932f05 	orrseq	r2, r3, r5, lsl #30
    4aa8:	11000000 	mrsne	r0, (UNDEF: 0)
    4aac:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    4ab0:	00002530 	andeq	r2, r0, r0, lsr r5
    4ab4:	1e0c0400 	cfcpysne	mvf0, mvf12
    4ab8:	05000009 	streq	r0, [r0, #-9]
    4abc:	00002530 	andeq	r2, r0, r0, lsr r5
    4ac0:	2a0c0800 	bcs	306ac8 <__bss_end+0x2f0f98>
    4ac4:	05000007 	streq	r0, [r0, #-7]
    4ac8:	00002530 	andeq	r2, r0, r0, lsr r5
    4acc:	f00c0c00 			; <UNDEFINED> instruction: 0xf00c0c00
    4ad0:	05000009 	streq	r0, [r0, #-9]
    4ad4:	00002530 	andeq	r2, r0, r0, lsr r5
    4ad8:	5f111000 	svcpl	0x00111000
    4adc:	31050078 	tstcc	r5, r8, ror r0
    4ae0:	00000199 	muleq	r0, r9, r1
    4ae4:	040f0014 	streq	r0, [pc], #-20	; 4aec <_start-0x3514>
    4ae8:	00000140 	andeq	r0, r0, r0, asr #2
    4aec:	00013509 	andeq	r3, r1, r9, lsl #10
    4af0:	0001a900 	andeq	sl, r1, r0, lsl #18
    4af4:	00de0a00 	sbcseq	r0, lr, r0, lsl #20
    4af8:	00000000 	andeq	r0, r0, r0
    4afc:	00076810 	andeq	r6, r7, r0, lsl r8
    4b00:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
    4b04:	00000222 	andeq	r0, r0, r2, lsr #4
    4b08:	0006630c 	andeq	r6, r6, ip, lsl #6
    4b0c:	25370500 	ldrcs	r0, [r7, #-1280]!	; 0xfffffb00
    4b10:	00000000 	andeq	r0, r0, r0
    4b14:	0009640c 	andeq	r6, r9, ip, lsl #8
    4b18:	25380500 	ldrcs	r0, [r8, #-1280]!	; 0xfffffb00
    4b1c:	04000000 	streq	r0, [r0], #-0
    4b20:	0006780c 	andeq	r7, r6, ip, lsl #16
    4b24:	25390500 	ldrcs	r0, [r9, #-1280]!	; 0xfffffb00
    4b28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4b2c:	000a7b0c 	andeq	r7, sl, ip, lsl #22
    4b30:	253a0500 	ldrcs	r0, [sl, #-1280]!	; 0xfffffb00
    4b34:	0c000000 	stceq	0, cr0, [r0], {-0}
    4b38:	0008390c 	andeq	r3, r8, ip, lsl #18
    4b3c:	253b0500 	ldrcs	r0, [fp, #-1280]!	; 0xfffffb00
    4b40:	10000000 	andne	r0, r0, r0
    4b44:	0007e90c 	andeq	lr, r7, ip, lsl #18
    4b48:	253c0500 	ldrcs	r0, [ip, #-1280]!	; 0xfffffb00
    4b4c:	14000000 	strne	r0, [r0], #-0
    4b50:	0009f50c 	andeq	pc, r9, ip, lsl #10
    4b54:	253d0500 	ldrcs	r0, [sp, #-1280]!	; 0xfffffb00
    4b58:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4b5c:	0008a80c 	andeq	sl, r8, ip, lsl #16
    4b60:	253e0500 	ldrcs	r0, [lr, #-1280]!	; 0xfffffb00
    4b64:	1c000000 	stcne	0, cr0, [r0], {-0}
    4b68:	000a420c 	andeq	r4, sl, ip, lsl #4
    4b6c:	253f0500 	ldrcs	r0, [pc, #-1280]!	; 4674 <_start-0x398c>
    4b70:	20000000 	andcs	r0, r0, r0
    4b74:	06871200 	streq	r1, [r7], r0, lsl #4
    4b78:	01080000 	mrseq	r0, (UNDEF: 8)
    4b7c:	02624805 	rsbeq	r4, r2, #327680	; 0x50000
    4b80:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    4b84:	05000007 	streq	r0, [r0, #-7]
    4b88:	00026249 	andeq	r6, r2, r9, asr #4
    4b8c:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
    4b90:	05000005 	streq	r0, [r0, #-5]
    4b94:	0002624a 	andeq	r6, r2, sl, asr #4
    4b98:	80138000 	andshi	r8, r3, r0
    4b9c:	05000009 	streq	r0, [r0, #-9]
    4ba0:	0001354c 	andeq	r3, r1, ip, asr #10
    4ba4:	13010000 	movwne	r0, #4096	; 0x1000
    4ba8:	000006ac 	andeq	r0, r0, ip, lsr #13
    4bac:	01354f05 	teqeq	r5, r5, lsl #30
    4bb0:	01040000 	mrseq	r0, (UNDEF: 4)
    4bb4:	011c0900 	tsteq	ip, r0, lsl #18
    4bb8:	02720000 	rsbseq	r0, r2, #0
    4bbc:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    4bc0:	1f000000 	svcne	0x00000000
    4bc4:	08421200 	stmdaeq	r2, {r9, ip}^
    4bc8:	01900000 	orrseq	r0, r0, r0
    4bcc:	02b05b05 	adcseq	r5, r0, #5120	; 0x1400
    4bd0:	e70c0000 	str	r0, [ip, -r0]
    4bd4:	05000008 	streq	r0, [r0, #-8]
    4bd8:	0002b05c 	andeq	fp, r2, ip, asr r0
    4bdc:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
    4be0:	05000008 	streq	r0, [r0, #-8]
    4be4:	0000255d 	andeq	r2, r0, sp, asr r5
    4be8:	110c0400 	tstne	ip, r0, lsl #8
    4bec:	05000007 	streq	r0, [r0, #-7]
    4bf0:	0002b65f 	andeq	fp, r2, pc, asr r6
    4bf4:	870c0800 	strhi	r0, [ip, -r0, lsl #16]
    4bf8:	05000006 	streq	r0, [r0, #-6]
    4bfc:	00022260 	andeq	r2, r2, r0, ror #4
    4c00:	0f008800 	svceq	0x00008800
    4c04:	00027204 	andeq	r7, r2, r4, lsl #4
    4c08:	02c60900 	sbceq	r0, r6, #0, 18
    4c0c:	02c60000 	sbceq	r0, r6, #0
    4c10:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    4c14:	1f000000 	svcne	0x00000000
    4c18:	cc040f00 	stcgt	15, cr0, [r4], {-0}
    4c1c:	14000002 	strne	r0, [r0], #-2
    4c20:	0008b210 	andeq	fp, r8, r0, lsl r2
    4c24:	73050800 	movwvc	r0, #22528	; 0x5800
    4c28:	000002f2 	strdeq	r0, [r0], -r2
    4c2c:	0006720c 	andeq	r7, r6, ip, lsl #4
    4c30:	f2740500 	vrshl.s64	d16, d0, d4
    4c34:	00000002 	andeq	r0, r0, r2
    4c38:	0005d90c 	andeq	sp, r5, ip, lsl #18
    4c3c:	25750500 	ldrbcs	r0, [r5, #-1280]!	; 0xfffffb00
    4c40:	04000000 	streq	r0, [r0], #-0
    4c44:	53040f00 	movwpl	r0, #20224	; 0x4f00
    4c48:	10000000 	andne	r0, r0, r0
    4c4c:	000008d1 	ldrdeq	r0, [r0], -r1
    4c50:	22b30568 	adcscs	r0, r3, #104, 10	; 0x1a000000
    4c54:	11000004 	tstne	r0, r4
    4c58:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    4c5c:	0002f2b4 			; <UNDEFINED> instruction: 0x0002f2b4
    4c60:	5f110000 	svcpl	0x00110000
    4c64:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    4c68:	00000025 	andeq	r0, r0, r5, lsr #32
    4c6c:	775f1104 	ldrbvc	r1, [pc, -r4, lsl #2]
    4c70:	25b60500 	ldrcs	r0, [r6, #1280]!	; 0x500
    4c74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4c78:	0006a50c 	andeq	sl, r6, ip, lsl #10
    4c7c:	5ab70500 	bpl	fedc6084 <_estack+0xf6db6084>
    4c80:	0c000000 	stceq	0, cr0, [r0], {-0}
    4c84:	0007840c 	andeq	r8, r7, ip, lsl #8
    4c88:	5ab80500 	bpl	fee06090 <_estack+0xf6df6090>
    4c8c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4c90:	66625f11 	uqadd16vs	r5, r2, r1
    4c94:	cdb90500 	cfldr32gt	mvfx0, [r9]
    4c98:	10000002 	andne	r0, r0, r2
    4c9c:	00062f0c 	andeq	r2, r6, ip, lsl #30
    4ca0:	25ba0500 	ldrcs	r0, [sl, #1280]!	; 0x500
    4ca4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4ca8:	0006950c 	andeq	r9, r6, ip, lsl #10
    4cac:	1cc10500 	cfstr64ne	mvdx0, [r1], {0}
    4cb0:	1c000001 	stcne	0, cr0, [r0], {1}
    4cb4:	0007580c 	andeq	r5, r7, ip, lsl #16
    4cb8:	7dc30500 	cfstr64vc	mvdx0, [r3]
    4cbc:	20000005 	andcs	r0, r0, r5
    4cc0:	0007e20c 	andeq	lr, r7, ip, lsl #4
    4cc4:	a7c50500 	strbge	r0, [r5, r0, lsl #10]
    4cc8:	24000005 	strcs	r0, [r0], #-5
    4ccc:	0009430c 	andeq	r4, r9, ip, lsl #6
    4cd0:	cbc80500 	blgt	ff2060d8 <_estack+0xf71f60d8>
    4cd4:	28000005 	stmdacs	r0, {r0, r2}
    4cd8:	000a5c0c 	andeq	r5, sl, ip, lsl #24
    4cdc:	e5c90500 	strb	r0, [r9, #1280]	; 0x500
    4ce0:	2c000005 	stccs	0, cr0, [r0], {5}
    4ce4:	62755f11 	rsbsvs	r5, r5, #17, 30	; 0x44
    4ce8:	cdcc0500 	cfstr64gt	mvdx0, [ip]
    4cec:	30000002 	andcc	r0, r0, r2
    4cf0:	70755f11 	rsbsvc	r5, r5, r1, lsl pc
    4cf4:	f2cd0500 	vabal.s8	q8, d13, d0
    4cf8:	38000002 	stmdacc	r0, {r1}
    4cfc:	72755f11 	rsbsvc	r5, r5, #17, 30	; 0x44
    4d00:	25ce0500 	strbcs	r0, [lr, #1280]	; 0x500
    4d04:	3c000000 	stccc	0, cr0, [r0], {-0}
    4d08:	00066c0c 	andeq	r6, r6, ip, lsl #24
    4d0c:	ebd10500 	bl	ff446114 <_estack+0xf7436114>
    4d10:	40000005 	andmi	r0, r0, r5
    4d14:	000a340c 	andeq	r3, sl, ip, lsl #8
    4d18:	fbd20500 	blx	ff486122 <_estack+0xf7476122>
    4d1c:	43000005 	movwmi	r0, #5
    4d20:	626c5f11 	rsbvs	r5, ip, #17, 30	; 0x44
    4d24:	cdd50500 	cfldr64gt	mvdx0, [r5]
    4d28:	44000002 	strmi	r0, [r0], #-2
    4d2c:	0006bb0c 	andeq	fp, r6, ip, lsl #22
    4d30:	25d80500 	ldrbcs	r0, [r8, #1280]	; 0x500
    4d34:	4c000000 	stcmi	0, cr0, [r0], {-0}
    4d38:	0006cc0c 	andeq	ip, r6, ip, lsl #24
    4d3c:	8dd90500 	cfldr64hi	mvdx0, [r9]
    4d40:	50000000 	andpl	r0, r0, r0
    4d44:	0005f20c 	andeq	pc, r5, ip, lsl #4
    4d48:	40dc0500 	sbcsmi	r0, ip, r0, lsl #10
    4d4c:	54000004 	strpl	r0, [r0], #-4
    4d50:	0007c80c 	andeq	ip, r7, ip, lsl #16
    4d54:	11e00500 	mvnne	r0, r0, lsl #10
    4d58:	58000001 	stmdapl	r0, {r0}
    4d5c:	0008d90c 	andeq	sp, r8, ip, lsl #18
    4d60:	06e20500 	strbteq	r0, [r2], r0, lsl #10
    4d64:	5c000001 	stcpl	0, cr0, [r0], {1}
    4d68:	0007da0c 	andeq	sp, r7, ip, lsl #20
    4d6c:	25e30500 	strbcs	r0, [r3, #1280]!	; 0x500
    4d70:	64000000 	strvs	r0, [r0], #-0
    4d74:	00251500 	eoreq	r1, r5, r0, lsl #10
    4d78:	04400000 	strbeq	r0, [r0], #-0
    4d7c:	40160000 	andsmi	r0, r6, r0
    4d80:	16000004 	strne	r0, [r0], -r4
    4d84:	0000011c 	andeq	r0, r0, ip, lsl r1
    4d88:	00012316 	andeq	r2, r1, r6, lsl r3
    4d8c:	00251600 	eoreq	r1, r5, r0, lsl #12
    4d90:	0f000000 	svceq	0x00000000
    4d94:	00044b04 	andeq	r4, r4, r4, lsl #22
    4d98:	04400500 	strbeq	r0, [r0], #-1280	; 0xfffffb00
    4d9c:	26170000 	ldrcs	r0, [r7], -r0
    4da0:	28000009 	stmdacs	r0, {r0, r3}
    4da4:	02380504 	eorseq	r0, r8, #4, 10	; 0x1000000
    4da8:	0000057d 	andeq	r0, r0, sp, ror r5
    4dac:	00089718 	andeq	r9, r8, r8, lsl r7
    4db0:	023a0500 	eorseq	r0, sl, #0, 10
    4db4:	00000025 	andeq	r0, r0, r5, lsr #32
    4db8:	06b41800 	ldrteq	r1, [r4], r0, lsl #16
    4dbc:	3f050000 	svccc	0x00050000
    4dc0:	00065202 	andeq	r5, r6, r2, lsl #4
    4dc4:	74180400 	ldrvc	r0, [r8], #-1024	; 0xfffffc00
    4dc8:	05000007 	streq	r0, [r0, #-7]
    4dcc:	0652023f 			; <UNDEFINED> instruction: 0x0652023f
    4dd0:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    4dd4:	00000739 	andeq	r0, r0, r9, lsr r7
    4dd8:	52023f05 	andpl	r3, r2, #5, 30
    4ddc:	0c000006 	stceq	0, cr0, [r0], {6}
    4de0:	0008fa18 	andeq	pc, r8, r8, lsl sl	; <UNPREDICTABLE>
    4de4:	02410500 	subeq	r0, r1, #0, 10
    4de8:	00000025 	andeq	r0, r0, r5, lsr #32
    4dec:	05e71810 	strbeq	r1, [r7, #2064]!	; 0x810
    4df0:	42050000 	andmi	r0, r5, #0
    4df4:	00083402 	andeq	r3, r8, r2, lsl #8
    4df8:	c1181400 	tstgt	r8, r0, lsl #8
    4dfc:	05000009 	streq	r0, [r0, #-9]
    4e00:	00250244 	eoreq	r0, r5, r4, asr #4
    4e04:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    4e08:	00000904 	andeq	r0, r0, r4, lsl #18
    4e0c:	a1024505 	tstge	r2, r5, lsl #10
    4e10:	34000005 	strcc	r0, [r0], #-5
    4e14:	00085418 	andeq	r5, r8, r8, lsl r4
    4e18:	02470500 	subeq	r0, r7, #0, 10
    4e1c:	00000025 	andeq	r0, r0, r5, lsr #32
    4e20:	09141838 	ldmdbeq	r4, {r3, r4, r5, fp, ip}
    4e24:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    4e28:	00084f02 	andeq	r4, r8, r2, lsl #30
    4e2c:	b3183c00 	tstlt	r8, #0, 24
    4e30:	05000007 	streq	r0, [r0, #-7]
    4e34:	0193024c 	orrseq	r0, r3, ip, asr #4
    4e38:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    4e3c:	0000075e 	andeq	r0, r0, lr, asr r7
    4e40:	25024d05 	strcs	r4, [r2, #-3333]	; 0xfffff2fb
    4e44:	44000000 	strmi	r0, [r0], #-0
    4e48:	000a7618 	andeq	r7, sl, r8, lsl r6
    4e4c:	024e0500 	subeq	r0, lr, #0, 10
    4e50:	00000193 	muleq	r0, r3, r1
    4e54:	08661848 	stmdaeq	r6!, {r3, r6, fp, ip}^
    4e58:	4f050000 	svcmi	0x00050000
    4e5c:	00085502 	andeq	r5, r8, r2, lsl #10
    4e60:	7c184c00 	ldcvc	12, cr4, [r8], {-0}
    4e64:	05000007 	streq	r0, [r0, #-7]
    4e68:	00250252 	eoreq	r0, r5, r2, asr r2
    4e6c:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    4e70:	000006c4 	andeq	r0, r0, r4, asr #13
    4e74:	23025305 	movwcs	r5, #8965	; 0x2305
    4e78:	54000001 	strpl	r0, [r0], #-1
    4e7c:	00089018 	andeq	r9, r8, r8, lsl r0
    4e80:	02760500 	rsbseq	r0, r6, #0, 10
    4e84:	00000812 	andeq	r0, r0, r2, lsl r8
    4e88:	08421958 	stmdaeq	r2, {r3, r4, r6, r8, fp, ip}^
    4e8c:	7a050000 	bvc	144e94 <__bss_end+0x12f364>
    4e90:	0002b002 	andeq	fp, r2, r2
    4e94:	19014800 	stmdbne	r1, {fp, lr}
    4e98:	00000791 	muleq	r0, r1, r7
    4e9c:	72027b05 	andvc	r7, r2, #5120	; 0x1400
    4ea0:	4c000002 	stcmi	0, cr0, [r0], {2}
    4ea4:	0a181901 	beq	60b2b0 <__bss_end+0x5f5780>
    4ea8:	7f050000 	svcvc	0x00050000
    4eac:	00086602 	andeq	r6, r8, r2, lsl #12
    4eb0:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    4eb4:	0000069d 	muleq	r0, sp, r6
    4eb8:	17028405 	strne	r8, [r2, -r5, lsl #8]
    4ebc:	e0000006 	and	r0, r0, r6
    4ec0:	06821902 	streq	r1, [r2], r2, lsl #18
    4ec4:	85050000 	strhi	r0, [r5, #-0]
    4ec8:	00087202 	andeq	r7, r8, r2, lsl #4
    4ecc:	0002ec00 	andeq	lr, r2, r0, lsl #24
    4ed0:	0422040f 	strteq	r0, [r2], #-1039	; 0xfffffbf1
    4ed4:	25150000 	ldrcs	r0, [r5, #-0]
    4ed8:	a1000000 	mrsge	r0, (UNDEF: 0)
    4edc:	16000005 	strne	r0, [r0], -r5
    4ee0:	00000440 	andeq	r0, r0, r0, asr #8
    4ee4:	00011c16 	andeq	r1, r1, r6, lsl ip
    4ee8:	05a11600 	streq	r1, [r1, #1536]!	; 0x600
    4eec:	25160000 	ldrcs	r0, [r6, #-0]
    4ef0:	00000000 	andeq	r0, r0, r0
    4ef4:	0130040f 	teqeq	r0, pc, lsl #8
    4ef8:	040f0000 	streq	r0, [pc], #-0	; 4f00 <_start-0x3100>
    4efc:	00000583 	andeq	r0, r0, r3, lsl #11
    4f00:	00009815 	andeq	r9, r0, r5, lsl r8
    4f04:	0005cb00 	andeq	ip, r5, r0, lsl #22
    4f08:	04401600 	strbeq	r1, [r0], #-1536	; 0xfffffa00
    4f0c:	1c160000 	ldcne	0, cr0, [r6], {-0}
    4f10:	16000001 	strne	r0, [r0], -r1
    4f14:	00000098 	muleq	r0, r8, r0
    4f18:	00002516 	andeq	r2, r0, r6, lsl r5
    4f1c:	040f0000 	streq	r0, [pc], #-0	; 4f24 <_start-0x30dc>
    4f20:	000005ad 	andeq	r0, r0, sp, lsr #11
    4f24:	00002515 	andeq	r2, r0, r5, lsl r5
    4f28:	0005e500 	andeq	lr, r5, r0, lsl #10
    4f2c:	04401600 	strbeq	r1, [r0], #-1536	; 0xfffffa00
    4f30:	1c160000 	ldcne	0, cr0, [r6], {-0}
    4f34:	00000001 	andeq	r0, r0, r1
    4f38:	05d1040f 	ldrbeq	r0, [r1, #1039]	; 0x40f
    4f3c:	53090000 	movwpl	r0, #36864	; 0x9000
    4f40:	fb000000 	blx	4f4a <_start-0x30b6>
    4f44:	0a000005 	beq	4f60 <_start-0x30a0>
    4f48:	000000de 	ldrdeq	r0, [r0], -lr
    4f4c:	53090002 	movwpl	r0, #36866	; 0x9002
    4f50:	0b000000 	bleq	4f58 <_start-0x30a8>
    4f54:	0a000006 	beq	4f74 <_start-0x308c>
    4f58:	000000de 	ldrdeq	r0, [r0], -lr
    4f5c:	bf060000 	svclt	0x00060000
    4f60:	05000008 	streq	r0, [r0, #-8]
    4f64:	02f8011d 	rscseq	r0, r8, #1073741831	; 0x40000007
    4f68:	ff1a0000 			; <UNDEFINED> instruction: 0xff1a0000
    4f6c:	0c000009 	stceq	0, cr0, [r0], {9}
    4f70:	4c012105 	stfmis	f2, [r1], {5}
    4f74:	18000006 	stmdane	r0, {r1, r2}
    4f78:	000008e7 	andeq	r0, r0, r7, ror #17
    4f7c:	4c012305 	stcmi	3, cr2, [r1], {5}
    4f80:	00000006 	andeq	r0, r0, r6
    4f84:	00078a18 	andeq	r8, r7, r8, lsl sl
    4f88:	01240500 			; <UNDEFINED> instruction: 0x01240500
    4f8c:	00000025 	andeq	r0, r0, r5, lsr #32
    4f90:	08b91804 	ldmeq	r9!, {r2, fp, ip}
    4f94:	25050000 	strcs	r0, [r5, #-0]
    4f98:	00065201 	andeq	r5, r6, r1, lsl #4
    4f9c:	0f000800 	svceq	0x00000800
    4fa0:	00061704 	andeq	r1, r6, r4, lsl #14
    4fa4:	0b040f00 	bleq	108bac <__bss_end+0xf307c>
    4fa8:	1a000006 	bne	4fc8 <_start-0x3038>
    4fac:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4fb0:	013d050e 	teqeq	sp, lr, lsl #10
    4fb4:	0000068d 	andeq	r0, r0, sp, lsl #13
    4fb8:	00092d18 	andeq	r2, r9, r8, lsl sp
    4fbc:	013e0500 	teqeq	lr, r0, lsl #10
    4fc0:	0000068d 	andeq	r0, r0, sp, lsl #13
    4fc4:	096d1800 	stmdbeq	sp!, {fp, ip}^
    4fc8:	3f050000 	svccc	0x00050000
    4fcc:	00068d01 	andeq	r8, r6, r1, lsl #26
    4fd0:	89180600 	ldmdbhi	r8, {r9, sl}
    4fd4:	05000009 	streq	r0, [r0, #-9]
    4fd8:	00610140 	rsbeq	r0, r1, r0, asr #2
    4fdc:	000c0000 	andeq	r0, ip, r0
    4fe0:	00006109 	andeq	r6, r0, r9, lsl #2
    4fe4:	00069d00 	andeq	r9, r6, r0, lsl #26
    4fe8:	00de0a00 	sbcseq	r0, lr, r0, lsl #20
    4fec:	00020000 	andeq	r0, r2, r0
    4ff0:	5705d01b 	smladpl	r5, fp, r0, sp
    4ff4:	00079e02 	andeq	r9, r7, r2, lsl #28
    4ff8:	09d31800 	ldmibeq	r3, {fp, ip}^
    4ffc:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    5000:	00003702 	andeq	r3, r0, r2, lsl #14
    5004:	73180000 	tstvc	r8, #0
    5008:	05000009 	streq	r0, [r0, #-9]
    500c:	0123025a 			; <UNDEFINED> instruction: 0x0123025a
    5010:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    5014:	000007a6 	andeq	r0, r0, r6, lsr #15
    5018:	9e025b05 	vmlals.f64	d5, d2, d5
    501c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    5020:	000a4d18 	andeq	r4, sl, r8, lsl sp
    5024:	025c0500 	subseq	r0, ip, #0, 10
    5028:	000001a9 	andeq	r0, r0, r9, lsr #3
    502c:	07491824 	strbeq	r1, [r9, -r4, lsr #16]
    5030:	5d050000 	stcpl	0, cr0, [r5, #-0]
    5034:	00002502 	andeq	r2, r0, r2, lsl #10
    5038:	e2184800 	ands	r4, r8, #0, 16
    503c:	05000008 	streq	r0, [r0, #-8]
    5040:	007b025e 	rsbseq	r0, fp, lr, asr r2
    5044:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    5048:	00000a63 	andeq	r0, r0, r3, ror #20
    504c:	58025f05 	stmdapl	r2, {r0, r2, r8, r9, sl, fp, ip, lr}
    5050:	58000006 	stmdapl	r0, {r1, r2}
    5054:	0008ed18 	andeq	lr, r8, r8, lsl sp
    5058:	02600500 	rsbeq	r0, r0, #0, 10
    505c:	00000106 	andeq	r0, r0, r6, lsl #2
    5060:	0a681868 	beq	1a0b208 <__bss_end+0x19f56d8>
    5064:	61050000 	mrsvs	r0, (UNDEF: 5)
    5068:	00010602 	andeq	r0, r1, r2, lsl #12
    506c:	55187000 	ldrpl	r7, [r8, #-0]
    5070:	05000006 	streq	r0, [r0, #-6]
    5074:	01060262 	tsteq	r6, r2, ror #4
    5078:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    507c:	00000a0e 	andeq	r0, r0, lr, lsl #20
    5080:	ae026305 	cdpge	3, 0, cr6, cr2, cr5, {0}
    5084:	80000007 	andhi	r0, r0, r7
    5088:	00079a18 	andeq	r9, r7, r8, lsl sl
    508c:	02640500 	rsbeq	r0, r4, #0, 10
    5090:	000007be 			; <UNDEFINED> instruction: 0x000007be
    5094:	09a11888 	stmibeq	r1!, {r3, r7, fp, ip}
    5098:	65050000 	strvs	r0, [r5, #-0]
    509c:	00002502 	andeq	r2, r0, r2, lsl #10
    50a0:	fb18a000 	blx	62d0aa <__bss_end+0x61757a>
    50a4:	05000006 	streq	r0, [r0, #-6]
    50a8:	01060266 	tsteq	r6, r6, ror #4
    50ac:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    50b0:	00000646 	andeq	r0, r0, r6, asr #12
    50b4:	06026705 	streq	r6, [r2], -r5, lsl #14
    50b8:	ac000001 	stcge	0, cr0, [r0], {1}
    50bc:	0006ea18 	andeq	lr, r6, r8, lsl sl
    50c0:	02680500 	rsbeq	r0, r8, #0, 10
    50c4:	00000106 	andeq	r0, r0, r6, lsl #2
    50c8:	05f818b4 	ldrbeq	r1, [r8, #2228]!	; 0x8b4
    50cc:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    50d0:	00010602 	andeq	r0, r1, r2, lsl #12
    50d4:	0718bc00 	ldreq	fp, [r8, -r0, lsl #24]
    50d8:	05000006 	streq	r0, [r0, #-6]
    50dc:	0106026a 	tsteq	r6, sl, ror #4
    50e0:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    50e4:	00000895 	muleq	r0, r5, r8
    50e8:	25026b05 	strcs	r6, [r2, #-2821]	; 0xfffff4fb
    50ec:	cc000000 	stcgt	0, cr0, [r0], {-0}
    50f0:	01290900 			; <UNDEFINED> instruction: 0x01290900
    50f4:	07ae0000 	streq	r0, [lr, r0]!
    50f8:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    50fc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5100:	01290900 			; <UNDEFINED> instruction: 0x01290900
    5104:	07be0000 	ldreq	r0, [lr, r0]!
    5108:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    510c:	07000000 	streq	r0, [r0, -r0]
    5110:	01290900 			; <UNDEFINED> instruction: 0x01290900
    5114:	07ce0000 	strbeq	r0, [lr, r0]
    5118:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    511c:	17000000 	strne	r0, [r0, -r0]
    5120:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
    5124:	07f20270 			; <UNDEFINED> instruction: 0x07f20270
    5128:	32180000 	andscc	r0, r8, #0
    512c:	05000008 	streq	r0, [r0, #-8]
    5130:	07f20273 			; <UNDEFINED> instruction: 0x07f20273
    5134:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5138:	00000a05 	andeq	r0, r0, r5, lsl #20
    513c:	02027405 	andeq	r7, r2, #83886080	; 0x5000000
    5140:	78000008 	stmdavc	r0, {r3}
    5144:	02f20900 	rscseq	r0, r2, #0, 18
    5148:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    514c:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    5150:	1d000000 	stcne	0, cr0, [r0, #-0]
    5154:	00370900 	eorseq	r0, r7, r0, lsl #18
    5158:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    515c:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    5160:	1d000000 	stcne	0, cr0, [r0, #-0]
    5164:	05f01c00 	ldrbeq	r1, [r0, #3072]!	; 0xc00
    5168:	08340255 	ldmdaeq	r4!, {r0, r2, r4, r6, r9}
    516c:	261d0000 	ldrcs	r0, [sp], -r0
    5170:	05000009 	streq	r0, [r0, #-9]
    5174:	069d026c 	ldreq	r0, [sp], ip, ror #4
    5178:	3a1d0000 	bcc	745180 <__bss_end+0x72f650>
    517c:	0500000a 	streq	r0, [r0, #-10]
    5180:	07ce0275 			; <UNDEFINED> instruction: 0x07ce0275
    5184:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5188:	00000129 	andeq	r0, r0, r9, lsr #2
    518c:	00000844 	andeq	r0, r0, r4, asr #16
    5190:	0000de0a 	andeq	sp, r0, sl, lsl #28
    5194:	1e001800 	cdpne	8, 0, cr1, cr0, cr0, {0}
    5198:	0000084f 	andeq	r0, r0, pc, asr #16
    519c:	00044016 	andeq	r4, r4, r6, lsl r0
    51a0:	040f0000 	streq	r0, [pc], #-0	; 51a8 <_start-0x2e58>
    51a4:	00000844 	andeq	r0, r0, r4, asr #16
    51a8:	0193040f 	orrseq	r0, r3, pc, lsl #8
    51ac:	661e0000 	ldrvs	r0, [lr], -r0
    51b0:	16000008 	strne	r0, [r0], -r8
    51b4:	00000025 	andeq	r0, r0, r5, lsr #32
    51b8:	6c040f00 	stcvs	15, cr0, [r4], {-0}
    51bc:	0f000008 	svceq	0x00000008
    51c0:	00085b04 	andeq	r5, r8, r4, lsl #22
    51c4:	060b0900 	streq	r0, [fp], -r0, lsl #18
    51c8:	08820000 	stmeq	r2, {}	; <UNPREDICTABLE>
    51cc:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    51d0:	02000000 	andeq	r0, r0, #0
    51d4:	09b51f00 	ldmibeq	r5!, {r8, r9, sl, fp, ip}
    51d8:	fd050000 	stc2	0, cr0, [r5, #-0]
    51dc:	00044002 	andeq	r4, r4, r2
    51e0:	09ae1f00 	stmibeq	lr!, {r8, r9, sl, fp, ip}
    51e4:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
    51e8:	00044602 	andeq	r4, r4, r2, lsl #12
    51ec:	19a22000 	stmibne	r2!, {sp}
    51f0:	17060000 	strne	r0, [r6, -r0]
    51f4:	0000011c 	andeq	r0, r0, ip, lsl r1
    51f8:	00014414 	andeq	r4, r1, r4, lsl r4
    51fc:	00000114 	andeq	r0, r0, r4, lsl r1
    5200:	091b9c01 	ldmdbeq	fp, {r0, sl, fp, ip, pc}
    5204:	59210000 	stmdbpl	r1!, {}	; <UNPREDICTABLE>
    5208:	01000019 	tsteq	r0, r9, lsl r0
    520c:	00011e36 	andeq	r1, r1, r6, lsr lr
    5210:	22500100 	subscs	r0, r0, #0, 2
    5214:	00001a37 	andeq	r1, r0, r7, lsr sl
    5218:	09213601 	stmdbeq	r1!, {r0, r9, sl, ip, sp}
    521c:	00000000 	andeq	r0, r0, r0
    5220:	3c220000 	stccc	0, cr0, [r2], #-0
    5224:	0100001a 	tsteq	r0, sl, lsl r0
    5228:	00002c36 	andeq	r2, r0, r6, lsr ip
    522c:	00005300 	andeq	r5, r0, r0, lsl #6
    5230:	73642300 	cmnvc	r4, #0, 6
    5234:	48010074 	stmdami	r1, {r2, r4, r5, r6}
    5238:	00000123 	andeq	r0, r0, r3, lsr #2
    523c:	00000129 	andeq	r0, r0, r9, lsr #2
    5240:	63727323 	cmnvs	r2, #-1946157056	; 0x8c000000
    5244:	a1490100 	mrsge	r0, (UNDEF: 89)
    5248:	6a000005 	bvs	5264 <_start-0x2d9c>
    524c:	24000001 	strcs	r0, [r0], #-1
    5250:	0000195e 	andeq	r1, r0, lr, asr r9
    5254:	09274a01 	stmdbeq	r7!, {r0, r9, fp, lr}
    5258:	01d40000 	bicseq	r0, r4, r0
    525c:	2b240000 	blcs	905264 <__bss_end+0x8ef734>
    5260:	0100001a 	tsteq	r0, sl, lsl r0
    5264:	00092d4b 	andeq	r2, r9, fp, asr #26
    5268:	0001f200 	andeq	pc, r1, r0, lsl #4
    526c:	040f0000 	streq	r0, [pc], #-0	; 5274 <_start-0x2d8c>
    5270:	00000926 	andeq	r0, r0, r6, lsr #18
    5274:	00091b0e 	andeq	r1, r9, lr, lsl #22
    5278:	040f2500 	streq	r2, [pc], #-1280	; 5280 <_start-0x2d80>
    527c:	00000068 	andeq	r0, r0, r8, rrx
    5280:	006f040f 	rsbeq	r0, pc, pc, lsl #8
    5284:	17000000 	strne	r0, [r0, -r0]
    5288:	04000009 	streq	r0, [r0], #-9
    528c:	0011e600 	andseq	lr, r1, r0, lsl #12
    5290:	00010400 	andeq	r0, r1, r0, lsl #8
    5294:	0c00001a 	stceq	0, cr0, [r0], {26}
    5298:	00001a41 	andeq	r1, r0, r1, asr #20
    529c:	00001a79 	andeq	r1, r0, r9, ror sl
    52a0:	00014528 	andeq	r4, r1, r8, lsr #10
    52a4:	00000114 	andeq	r0, r0, r4, lsl r1
    52a8:	000011a8 	andeq	r1, r0, r8, lsr #3
    52ac:	69050402 	stmdbvs	r5, {r1, sl}
    52b0:	0300746e 	movweq	r7, #1134	; 0x46e
    52b4:	00000ae2 	andeq	r0, r0, r2, ror #21
    52b8:	0037d802 	eorseq	sp, r7, r2, lsl #16
    52bc:	04040000 	streq	r0, [r4], #-0
    52c0:	00062207 	andeq	r2, r6, r7, lsl #4
    52c4:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    52c8:	0000012f 	andeq	r0, r0, pc, lsr #2
    52cc:	5d040804 	stcpl	8, cr0, [r4, #-16]
    52d0:	04000001 	streq	r0, [r0], #-1
    52d4:	08840601 	stmeq	r4, {r0, r9, sl}
    52d8:	01040000 	mrseq	r0, (UNDEF: 4)
    52dc:	00088208 	andeq	r8, r8, r8, lsl #4
    52e0:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    52e4:	0000089e 	muleq	r0, lr, r8
    52e8:	59070204 	stmdbpl	r7, {r2, r9}
    52ec:	04000000 	streq	r0, [r0], #-0
    52f0:	01340504 	teqeq	r4, r4, lsl #10
    52f4:	04040000 	streq	r0, [r4], #-0
    52f8:	00061d07 	andeq	r1, r6, r7, lsl #26
    52fc:	07080400 	streq	r0, [r8, -r0, lsl #8]
    5300:	00000618 	andeq	r0, r0, r8, lsl r6
    5304:	00087003 	andeq	r7, r8, r3
    5308:	25070300 	strcs	r0, [r7, #-768]	; 0xfffffd00
    530c:	03000000 	movweq	r0, #0
    5310:	0000085f 	andeq	r0, r0, pc, asr r8
    5314:	00682c04 	rsbeq	r2, r8, r4, lsl #24
    5318:	55030000 	strpl	r0, [r3, #-0]
    531c:	04000009 	streq	r0, [r0], #-9
    5320:	00006872 	andeq	r6, r0, r2, ror r8
    5324:	07c10500 	strbeq	r0, [r1, r0, lsl #10]
    5328:	65020000 	strvs	r0, [r2, #-0]
    532c:	00003701 	andeq	r3, r0, r1, lsl #14
    5330:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
    5334:	0000c9a6 	andeq	ip, r0, r6, lsr #19
    5338:	07bb0700 	ldreq	r0, [fp, r0, lsl #14]!
    533c:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    5340:	0000009e 	muleq	r0, lr, r0
    5344:	00076d07 	andeq	r6, r7, r7, lsl #26
    5348:	c9a90400 	stmibgt	r9!, {sl}
    534c:	00000000 	andeq	r0, r0, r0
    5350:	00005308 	andeq	r5, r0, r8, lsl #6
    5354:	0000d900 	andeq	sp, r0, r0, lsl #18
    5358:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    535c:	00030000 	andeq	r0, r3, r0
    5360:	dc070404 	cfstrsle	mvf0, [r7], {4}
    5364:	0a000000 	beq	536c <_start-0x2c94>
    5368:	01a30408 			; <UNDEFINED> instruction: 0x01a30408
    536c:	0b000001 	bleq	5378 <_start-0x2c88>
    5370:	00000933 	andeq	r0, r0, r3, lsr r9
    5374:	0025a504 	eoreq	sl, r5, r4, lsl #10
    5378:	0b000000 	bleq	5380 <_start-0x2c80>
    537c:	0000093b 	andeq	r0, r0, fp, lsr r9
    5380:	00aaaa04 	adceq	sl, sl, r4, lsl #20
    5384:	00040000 	andeq	r0, r4, r0
    5388:	0008c603 	andeq	ip, r8, r3, lsl #12
    538c:	e0ab0400 	adc	r0, fp, r0, lsl #8
    5390:	03000000 	movweq	r0, #0
    5394:	00000730 	andeq	r0, r0, r0, lsr r7
    5398:	007daf04 	rsbseq	sl, sp, r4, lsl #30
    539c:	040c0000 	streq	r0, [ip], #-0
    53a0:	011f040d 	tsteq	pc, sp, lsl #8
    53a4:	01040000 	mrseq	r0, (UNDEF: 4)
    53a8:	00088b08 	andeq	r8, r8, r8, lsl #22
    53ac:	011f0e00 	tsteq	pc, r0, lsl #28
    53b0:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    53b4:	05000009 	streq	r0, [r0, #-9]
    53b8:	00006f16 	andeq	r6, r0, r6, lsl pc
    53bc:	07410f00 	strbeq	r0, [r1, -r0, lsl #30]
    53c0:	05180000 	ldreq	r0, [r8, #-0]
    53c4:	0001892d 	andeq	r8, r1, sp, lsr #18
    53c8:	08e70b00 	stmiaeq	r7!, {r8, r9, fp}^
    53cc:	2f050000 	svccs	0x00050000
    53d0:	00000189 	andeq	r0, r0, r9, lsl #3
    53d4:	6b5f1000 	blvs	17c93dc <__bss_end+0x17b38ac>
    53d8:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
    53dc:	04000000 	streq	r0, [r0], #-0
    53e0:	00091e0b 	andeq	r1, r9, fp, lsl #28
    53e4:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
    53e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    53ec:	00072a0b 	andeq	r2, r7, fp, lsl #20
    53f0:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
    53f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    53f8:	0009f00b 	andeq	pc, r9, fp
    53fc:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
    5400:	10000000 	andne	r0, r0, r0
    5404:	00785f10 	rsbseq	r5, r8, r0, lsl pc
    5408:	018f3105 	orreq	r3, pc, r5, lsl #2
    540c:	00140000 	andseq	r0, r4, r0
    5410:	0136040d 	teqeq	r6, sp, lsl #8
    5414:	2b080000 	blcs	20541c <__bss_end+0x1ef8ec>
    5418:	9f000001 	svcls	0x00000001
    541c:	09000001 	stmdbeq	r0, {r0}
    5420:	000000d9 	ldrdeq	r0, [r0], -r9
    5424:	680f0000 	stmdavs	pc, {}	; <UNPREDICTABLE>
    5428:	24000007 	strcs	r0, [r0], #-7
    542c:	02183505 	andseq	r3, r8, #20971520	; 0x1400000
    5430:	630b0000 	movwvs	r0, #45056	; 0xb000
    5434:	05000006 	streq	r0, [r0, #-6]
    5438:	00002537 	andeq	r2, r0, r7, lsr r5
    543c:	640b0000 	strvs	r0, [fp], #-0
    5440:	05000009 	streq	r0, [r0, #-9]
    5444:	00002538 	andeq	r2, r0, r8, lsr r5
    5448:	780b0400 	stmdavc	fp, {sl}
    544c:	05000006 	streq	r0, [r0, #-6]
    5450:	00002539 	andeq	r2, r0, r9, lsr r5
    5454:	7b0b0800 	blvc	2c745c <__bss_end+0x2b192c>
    5458:	0500000a 	streq	r0, [r0, #-10]
    545c:	0000253a 	andeq	r2, r0, sl, lsr r5
    5460:	390b0c00 	stmdbcc	fp, {sl, fp}
    5464:	05000008 	streq	r0, [r0, #-8]
    5468:	0000253b 	andeq	r2, r0, fp, lsr r5
    546c:	e90b1000 	stmdb	fp, {ip}
    5470:	05000007 	streq	r0, [r0, #-7]
    5474:	0000253c 	andeq	r2, r0, ip, lsr r5
    5478:	f50b1400 			; <UNDEFINED> instruction: 0xf50b1400
    547c:	05000009 	streq	r0, [r0, #-9]
    5480:	0000253d 	andeq	r2, r0, sp, lsr r5
    5484:	a80b1800 	stmdage	fp, {fp, ip}
    5488:	05000008 	streq	r0, [r0, #-8]
    548c:	0000253e 	andeq	r2, r0, lr, lsr r5
    5490:	420b1c00 	andmi	r1, fp, #0, 24
    5494:	0500000a 	streq	r0, [r0, #-10]
    5498:	0000253f 	andeq	r2, r0, pc, lsr r5
    549c:	11002000 	mrsne	r2, (UNDEF: 0)
    54a0:	00000687 	andeq	r0, r0, r7, lsl #13
    54a4:	48050108 	stmdami	r5, {r3, r8}
    54a8:	00000258 	andeq	r0, r0, r8, asr r2
    54ac:	0007090b 	andeq	r0, r7, fp, lsl #18
    54b0:	58490500 	stmdapl	r9, {r8, sl}^
    54b4:	00000002 	andeq	r0, r0, r2
    54b8:	0005cd0b 	andeq	ip, r5, fp, lsl #26
    54bc:	584a0500 	stmdapl	sl, {r8, sl}^
    54c0:	80000002 	andhi	r0, r0, r2
    54c4:	00098012 	andeq	r8, r9, r2, lsl r0
    54c8:	2b4c0500 	blcs	13068d0 <__bss_end+0x12f0da0>
    54cc:	00000001 	andeq	r0, r0, r1
    54d0:	06ac1201 	strteq	r1, [ip], r1, lsl #4
    54d4:	4f050000 	svcmi	0x00050000
    54d8:	0000012b 	andeq	r0, r0, fp, lsr #2
    54dc:	08000104 	stmdaeq	r0, {r2, r8}
    54e0:	00000117 	andeq	r0, r0, r7, lsl r1
    54e4:	00000268 	andeq	r0, r0, r8, ror #4
    54e8:	0000d909 	andeq	sp, r0, r9, lsl #18
    54ec:	11001f00 	tstne	r0, r0, lsl #30
    54f0:	00000842 	andeq	r0, r0, r2, asr #16
    54f4:	5b050190 	blpl	145b3c <__bss_end+0x13000c>
    54f8:	000002a6 	andeq	r0, r0, r6, lsr #5
    54fc:	0008e70b 	andeq	lr, r8, fp, lsl #14
    5500:	a65c0500 	ldrbge	r0, [ip], -r0, lsl #10
    5504:	00000002 	andeq	r0, r0, r2
    5508:	0008ff0b 	andeq	pc, r8, fp, lsl #30
    550c:	255d0500 	ldrbcs	r0, [sp, #-1280]	; 0xfffffb00
    5510:	04000000 	streq	r0, [r0], #-0
    5514:	0007110b 	andeq	r1, r7, fp, lsl #2
    5518:	ac5f0500 	cfldr64ge	mvdx0, [pc], {-0}
    551c:	08000002 	stmdaeq	r0, {r1}
    5520:	0006870b 	andeq	r8, r6, fp, lsl #14
    5524:	18600500 	stmdane	r0!, {r8, sl}^
    5528:	88000002 	stmdahi	r0, {r1}
    552c:	68040d00 	stmdavs	r4, {r8, sl, fp}
    5530:	08000002 	stmdaeq	r0, {r1}
    5534:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    5538:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    553c:	0000d909 	andeq	sp, r0, r9, lsl #18
    5540:	0d001f00 	stceq	15, cr1, [r0, #-0]
    5544:	0002c204 	andeq	ip, r2, r4, lsl #4
    5548:	b20f1300 	andlt	r1, pc, #0, 6
    554c:	08000008 	stmdaeq	r0, {r3}
    5550:	02e87305 	rsceq	r7, r8, #335544320	; 0x14000000
    5554:	720b0000 	andvc	r0, fp, #0
    5558:	05000006 	streq	r0, [r0, #-6]
    555c:	0002e874 	andeq	lr, r2, r4, ror r8
    5560:	d90b0000 	stmdble	fp, {}	; <UNPREDICTABLE>
    5564:	05000005 	streq	r0, [r0, #-5]
    5568:	00002575 	andeq	r2, r0, r5, ror r5
    556c:	0d000400 	cfstrseq	mvf0, [r0, #-0]
    5570:	00005304 	andeq	r5, r0, r4, lsl #6
    5574:	08d10f00 	ldmeq	r1, {r8, r9, sl, fp}^
    5578:	05680000 	strbeq	r0, [r8, #-0]!
    557c:	000418b3 			; <UNDEFINED> instruction: 0x000418b3
    5580:	705f1000 	subsvc	r1, pc, r0
    5584:	e8b40500 	ldm	r4!, {r8, sl}
    5588:	00000002 	andeq	r0, r0, r2
    558c:	00725f10 	rsbseq	r5, r2, r0, lsl pc
    5590:	0025b505 	eoreq	fp, r5, r5, lsl #10
    5594:	10040000 	andne	r0, r4, r0
    5598:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
    559c:	000025b6 			; <UNDEFINED> instruction: 0x000025b6
    55a0:	a50b0800 	strge	r0, [fp, #-2048]	; 0xfffff800
    55a4:	05000006 	streq	r0, [r0, #-6]
    55a8:	00005ab7 			; <UNDEFINED> instruction: 0x00005ab7
    55ac:	840b0c00 	strhi	r0, [fp], #-3072	; 0xfffff400
    55b0:	05000007 	streq	r0, [r0, #-7]
    55b4:	00005ab8 			; <UNDEFINED> instruction: 0x00005ab8
    55b8:	5f100e00 	svcpl	0x00100e00
    55bc:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
    55c0:	0002c3b9 			; <UNDEFINED> instruction: 0x0002c3b9
    55c4:	2f0b1000 	svccs	0x000b1000
    55c8:	05000006 	streq	r0, [r0, #-6]
    55cc:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
    55d0:	950b1800 	strls	r1, [fp, #-2048]	; 0xfffff800
    55d4:	05000006 	streq	r0, [r0, #-6]
    55d8:	000117c1 	andeq	r1, r1, r1, asr #15
    55dc:	580b1c00 	stmdapl	fp, {sl, fp, ip}
    55e0:	05000007 	streq	r0, [r0, #-7]
    55e4:	000573c3 	andeq	r7, r5, r3, asr #7
    55e8:	e20b2000 	and	r2, fp, #0
    55ec:	05000007 	streq	r0, [r0, #-7]
    55f0:	00059dc5 	andeq	r9, r5, r5, asr #27
    55f4:	430b2400 	movwmi	r2, #46080	; 0xb400
    55f8:	05000009 	streq	r0, [r0, #-9]
    55fc:	0005c1c8 	andeq	ip, r5, r8, asr #3
    5600:	5c0b2800 	stcpl	8, cr2, [fp], {-0}
    5604:	0500000a 	streq	r0, [r0, #-10]
    5608:	0005dbc9 	andeq	sp, r5, r9, asr #23
    560c:	5f102c00 	svcpl	0x00102c00
    5610:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    5614:	0002c3cc 	andeq	ip, r2, ip, asr #7
    5618:	5f103000 	svcpl	0x00103000
    561c:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
    5620:	0002e8cd 	andeq	lr, r2, sp, asr #17
    5624:	5f103800 	svcpl	0x00103800
    5628:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
    562c:	000025ce 	andeq	r2, r0, lr, asr #11
    5630:	6c0b3c00 	stcvs	12, cr3, [fp], {-0}
    5634:	05000006 	streq	r0, [r0, #-6]
    5638:	0005e1d1 	ldrdeq	lr, [r5], -r1
    563c:	340b4000 	strcc	r4, [fp], #-0
    5640:	0500000a 	streq	r0, [r0, #-10]
    5644:	0005f1d2 	ldrdeq	pc, [r5], -r2
    5648:	5f104300 	svcpl	0x00104300
    564c:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
    5650:	0002c3d5 	ldrdeq	ip, [r2], -r5
    5654:	bb0b4400 	bllt	2d665c <__bss_end+0x2c0b2c>
    5658:	05000006 	streq	r0, [r0, #-6]
    565c:	000025d8 	ldrdeq	r2, [r0], -r8
    5660:	cc0b4c00 	stcgt	12, cr4, [fp], {-0}
    5664:	05000006 	streq	r0, [r0, #-6]
    5668:	000088d9 	ldrdeq	r8, [r0], -r9
    566c:	f20b5000 	vhadd.s8	d5, d11, d0
    5670:	05000005 	streq	r0, [r0, #-5]
    5674:	000436dc 	ldrdeq	r3, [r4], -ip
    5678:	c80b5400 	stmdagt	fp, {sl, ip, lr}
    567c:	05000007 	streq	r0, [r0, #-7]
    5680:	00010ce0 	andeq	r0, r1, r0, ror #25
    5684:	d90b5800 	stmdble	fp, {fp, ip, lr}
    5688:	05000008 	streq	r0, [r0, #-8]
    568c:	000101e2 	andeq	r0, r1, r2, ror #3
    5690:	da0b5c00 	ble	2dc698 <__bss_end+0x2c6b68>
    5694:	05000007 	streq	r0, [r0, #-7]
    5698:	000025e3 	andeq	r2, r0, r3, ror #11
    569c:	14006400 	strne	r6, [r0], #-1024	; 0xfffffc00
    56a0:	00000025 	andeq	r0, r0, r5, lsr #32
    56a4:	00000436 	andeq	r0, r0, r6, lsr r4
    56a8:	00043615 	andeq	r3, r4, r5, lsl r6
    56ac:	01171500 	tsteq	r7, r0, lsl #10
    56b0:	19150000 	ldmdbne	r5, {}	; <UNPREDICTABLE>
    56b4:	15000001 	strne	r0, [r0, #-1]
    56b8:	00000025 	andeq	r0, r0, r5, lsr #32
    56bc:	41040d00 	tstmi	r4, r0, lsl #26
    56c0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    56c4:	00000436 	andeq	r0, r0, r6, lsr r4
    56c8:	00092616 	andeq	r2, r9, r6, lsl r6
    56cc:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
    56d0:	05730238 	ldrbeq	r0, [r3, #-568]!	; 0xfffffdc8
    56d4:	97170000 	ldrls	r0, [r7, -r0]
    56d8:	05000008 	streq	r0, [r0, #-8]
    56dc:	0025023a 	eoreq	r0, r5, sl, lsr r2
    56e0:	17000000 	strne	r0, [r0, -r0]
    56e4:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    56e8:	48023f05 	stmdami	r2, {r0, r2, r8, r9, sl, fp, ip, sp}
    56ec:	04000006 	streq	r0, [r0], #-6
    56f0:	00077417 	andeq	r7, r7, r7, lsl r4
    56f4:	023f0500 	eorseq	r0, pc, #0, 10
    56f8:	00000648 	andeq	r0, r0, r8, asr #12
    56fc:	07391708 	ldreq	r1, [r9, -r8, lsl #14]!
    5700:	3f050000 	svccc	0x00050000
    5704:	00064802 	andeq	r4, r6, r2, lsl #16
    5708:	fa170c00 	blx	5c8710 <__bss_end+0x5b2be0>
    570c:	05000008 	streq	r0, [r0, #-8]
    5710:	00250241 	eoreq	r0, r5, r1, asr #4
    5714:	17100000 	ldrne	r0, [r0, -r0]
    5718:	000005e7 	andeq	r0, r0, r7, ror #11
    571c:	2a024205 	bcs	95f38 <__bss_end+0x80408>
    5720:	14000008 	strne	r0, [r0], #-8
    5724:	0009c117 	andeq	ip, r9, r7, lsl r1
    5728:	02440500 	subeq	r0, r4, #0, 10
    572c:	00000025 	andeq	r0, r0, r5, lsr #32
    5730:	09041730 	stmdbeq	r4, {r4, r5, r8, r9, sl, ip}
    5734:	45050000 	strmi	r0, [r5, #-0]
    5738:	00059702 	andeq	r9, r5, r2, lsl #14
    573c:	54173400 	ldrpl	r3, [r7], #-1024	; 0xfffffc00
    5740:	05000008 	streq	r0, [r0, #-8]
    5744:	00250247 	eoreq	r0, r5, r7, asr #4
    5748:	17380000 	ldrne	r0, [r8, -r0]!
    574c:	00000914 	andeq	r0, r0, r4, lsl r9
    5750:	45024905 	strmi	r4, [r2, #-2309]	; 0xfffff6fb
    5754:	3c000008 	stccc	0, cr0, [r0], {8}
    5758:	0007b317 	andeq	fp, r7, r7, lsl r3
    575c:	024c0500 	subeq	r0, ip, #0, 10
    5760:	00000189 	andeq	r0, r0, r9, lsl #3
    5764:	075e1740 	ldrbeq	r1, [lr, -r0, asr #14]
    5768:	4d050000 	stcmi	0, cr0, [r5, #-0]
    576c:	00002502 	andeq	r2, r0, r2, lsl #10
    5770:	76174400 	ldrvc	r4, [r7], -r0, lsl #8
    5774:	0500000a 	streq	r0, [r0, #-10]
    5778:	0189024e 	orreq	r0, r9, lr, asr #4
    577c:	17480000 	strbne	r0, [r8, -r0]
    5780:	00000866 	andeq	r0, r0, r6, ror #16
    5784:	4b024f05 	blmi	993a0 <__bss_end+0x83870>
    5788:	4c000008 	stcmi	0, cr0, [r0], {8}
    578c:	00077c17 	andeq	r7, r7, r7, lsl ip
    5790:	02520500 	subseq	r0, r2, #0, 10
    5794:	00000025 	andeq	r0, r0, r5, lsr #32
    5798:	06c41750 			; <UNDEFINED> instruction: 0x06c41750
    579c:	53050000 	movwpl	r0, #20480	; 0x5000
    57a0:	00011902 	andeq	r1, r1, r2, lsl #18
    57a4:	90175400 	andsls	r5, r7, r0, lsl #8
    57a8:	05000008 	streq	r0, [r0, #-8]
    57ac:	08080276 	stmdaeq	r8, {r1, r2, r4, r5, r6, r9}
    57b0:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    57b4:	00000842 	andeq	r0, r0, r2, asr #16
    57b8:	a6027a05 	strge	r7, [r2], -r5, lsl #20
    57bc:	48000002 	stmdami	r0, {r1}
    57c0:	07911801 	ldreq	r1, [r1, r1, lsl #16]
    57c4:	7b050000 	blvc	1457cc <__bss_end+0x12fc9c>
    57c8:	00026802 	andeq	r6, r2, r2, lsl #16
    57cc:	18014c00 	stmdane	r1, {sl, fp, lr}
    57d0:	00000a18 	andeq	r0, r0, r8, lsl sl
    57d4:	5c027f05 	stcpl	15, cr7, [r2], {5}
    57d8:	dc000008 	stcle	0, cr0, [r0], {8}
    57dc:	069d1802 	ldreq	r1, [sp], r2, lsl #16
    57e0:	84050000 	strhi	r0, [r5], #-0
    57e4:	00060d02 	andeq	r0, r6, r2, lsl #26
    57e8:	1802e000 	stmdane	r2, {sp, lr, pc}
    57ec:	00000682 	andeq	r0, r0, r2, lsl #13
    57f0:	68028505 	stmdavs	r2, {r0, r2, r8, sl, pc}
    57f4:	ec000008 	stc	0, cr0, [r0], {8}
    57f8:	040d0002 	streq	r0, [sp], #-2
    57fc:	00000418 	andeq	r0, r0, r8, lsl r4
    5800:	00002514 	andeq	r2, r0, r4, lsl r5
    5804:	00059700 	andeq	r9, r5, r0, lsl #14
    5808:	04361500 	ldrteq	r1, [r6], #-1280	; 0xfffffb00
    580c:	17150000 	ldrne	r0, [r5, -r0]
    5810:	15000001 	strne	r0, [r0, #-1]
    5814:	00000597 	muleq	r0, r7, r5
    5818:	00002515 	andeq	r2, r0, r5, lsl r5
    581c:	040d0000 	streq	r0, [sp], #-0
    5820:	00000126 	andeq	r0, r0, r6, lsr #2
    5824:	0579040d 	ldrbeq	r0, [r9, #-1037]!	; 0xfffffbf3
    5828:	93140000 	tstls	r4, #0
    582c:	c1000000 	mrsgt	r0, (UNDEF: 0)
    5830:	15000005 	strne	r0, [r0, #-5]
    5834:	00000436 	andeq	r0, r0, r6, lsr r4
    5838:	00011715 	andeq	r1, r1, r5, lsl r7
    583c:	00931500 	addseq	r1, r3, r0, lsl #10
    5840:	25150000 	ldrcs	r0, [r5, #-0]
    5844:	00000000 	andeq	r0, r0, r0
    5848:	05a3040d 	streq	r0, [r3, #1037]!	; 0x40d
    584c:	25140000 	ldrcs	r0, [r4, #-0]
    5850:	db000000 	blle	5858 <_start-0x27a8>
    5854:	15000005 	strne	r0, [r0, #-5]
    5858:	00000436 	andeq	r0, r0, r6, lsr r4
    585c:	00011715 	andeq	r1, r1, r5, lsl r7
    5860:	040d0000 	streq	r0, [sp], #-0
    5864:	000005c7 	andeq	r0, r0, r7, asr #11
    5868:	00005308 	andeq	r5, r0, r8, lsl #6
    586c:	0005f100 	andeq	pc, r5, r0, lsl #2
    5870:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    5874:	00020000 	andeq	r0, r2, r0
    5878:	00005308 	andeq	r5, r0, r8, lsl #6
    587c:	00060100 	andeq	r0, r6, r0, lsl #2
    5880:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    5884:	00000000 	andeq	r0, r0, r0
    5888:	0008bf05 	andeq	fp, r8, r5, lsl #30
    588c:	011d0500 	tsteq	sp, r0, lsl #10
    5890:	000002ee 	andeq	r0, r0, lr, ror #5
    5894:	0009ff19 	andeq	pc, r9, r9, lsl pc	; <UNPREDICTABLE>
    5898:	21050c00 	tstcs	r5, r0, lsl #24
    589c:	00064201 	andeq	r4, r6, r1, lsl #4
    58a0:	08e71700 	stmiaeq	r7!, {r8, r9, sl, ip}^
    58a4:	23050000 	movwcs	r0, #20480	; 0x5000
    58a8:	00064201 	andeq	r4, r6, r1, lsl #4
    58ac:	8a170000 	bhi	5c58b4 <__bss_end+0x5afd84>
    58b0:	05000007 	streq	r0, [r0, #-7]
    58b4:	00250124 	eoreq	r0, r5, r4, lsr #2
    58b8:	17040000 	strne	r0, [r4, -r0]
    58bc:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    58c0:	48012505 	stmdami	r1, {r0, r2, r8, sl, sp}
    58c4:	08000006 	stmdaeq	r0, {r1, r2}
    58c8:	0d040d00 	stceq	13, cr0, [r4, #-0]
    58cc:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    58d0:	00060104 	andeq	r0, r6, r4, lsl #2
    58d4:	05df1900 	ldrbeq	r1, [pc, #2304]	; 61dc <_start-0x1e24>
    58d8:	050e0000 	streq	r0, [lr, #-0]
    58dc:	0683013d 			; <UNDEFINED> instruction: 0x0683013d
    58e0:	2d170000 	ldccs	0, cr0, [r7, #-0]
    58e4:	05000009 	streq	r0, [r0, #-9]
    58e8:	0683013e 			; <UNDEFINED> instruction: 0x0683013e
    58ec:	17000000 	strne	r0, [r0, -r0]
    58f0:	0000096d 	andeq	r0, r0, sp, ror #18
    58f4:	83013f05 	movwhi	r3, #7941	; 0x1f05
    58f8:	06000006 	streq	r0, [r0], -r6
    58fc:	00098917 	andeq	r8, r9, r7, lsl r9
    5900:	01400500 	cmpeq	r0, r0, lsl #10
    5904:	00000061 	andeq	r0, r0, r1, rrx
    5908:	6108000c 	tstvs	r8, ip
    590c:	93000000 	movwls	r0, #0
    5910:	09000006 	stmdbeq	r0, {r1, r2}
    5914:	000000d9 	ldrdeq	r0, [r0], -r9
    5918:	d01a0002 	andsle	r0, sl, r2
    591c:	94025705 	strls	r5, [r2], #-1797	; 0xfffff8fb
    5920:	17000007 	strne	r0, [r0, -r7]
    5924:	000009d3 	ldrdeq	r0, [r0], -r3
    5928:	37025905 	strcc	r5, [r2, -r5, lsl #18]
    592c:	00000000 	andeq	r0, r0, r0
    5930:	00097317 	andeq	r7, r9, r7, lsl r3
    5934:	025a0500 	subseq	r0, sl, #0, 10
    5938:	00000119 	andeq	r0, r0, r9, lsl r1
    593c:	07a61704 	streq	r1, [r6, r4, lsl #14]!
    5940:	5b050000 	blpl	145948 <__bss_end+0x12fe18>
    5944:	00079402 	andeq	r9, r7, r2, lsl #8
    5948:	4d170800 	ldcmi	8, cr0, [r7, #-0]
    594c:	0500000a 	streq	r0, [r0, #-10]
    5950:	019f025c 	orrseq	r0, pc, ip, asr r2	; <UNPREDICTABLE>
    5954:	17240000 	strne	r0, [r4, -r0]!
    5958:	00000749 	andeq	r0, r0, r9, asr #14
    595c:	25025d05 	strcs	r5, [r2, #-3333]	; 0xfffff2fb
    5960:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    5964:	0008e217 	andeq	lr, r8, r7, lsl r2
    5968:	025e0500 	subseq	r0, lr, #0, 10
    596c:	00000076 	andeq	r0, r0, r6, ror r0
    5970:	0a631750 	beq	18cb6b8 <__bss_end+0x18b5b88>
    5974:	5f050000 	svcpl	0x00050000
    5978:	00064e02 	andeq	r4, r6, r2, lsl #28
    597c:	ed175800 	ldc	8, cr5, [r7, #-0]
    5980:	05000008 	streq	r0, [r0, #-8]
    5984:	01010260 	tsteq	r1, r0, ror #4
    5988:	17680000 	strbne	r0, [r8, -r0]!
    598c:	00000a68 	andeq	r0, r0, r8, ror #20
    5990:	01026105 	tsteq	r2, r5, lsl #2
    5994:	70000001 	andvc	r0, r0, r1
    5998:	00065517 	andeq	r5, r6, r7, lsl r5
    599c:	02620500 	rsbeq	r0, r2, #0, 10
    59a0:	00000101 	andeq	r0, r0, r1, lsl #2
    59a4:	0a0e1778 	beq	38b78c <__bss_end+0x375c5c>
    59a8:	63050000 	movwvs	r0, #20480	; 0x5000
    59ac:	0007a402 	andeq	sl, r7, r2, lsl #8
    59b0:	9a178000 	bls	5e59b8 <__bss_end+0x5cfe88>
    59b4:	05000007 	streq	r0, [r0, #-7]
    59b8:	07b40264 	ldreq	r0, [r4, r4, ror #4]!
    59bc:	17880000 	strne	r0, [r8, r0]
    59c0:	000009a1 	andeq	r0, r0, r1, lsr #19
    59c4:	25026505 	strcs	r6, [r2, #-1285]	; 0xfffffafb
    59c8:	a0000000 	andge	r0, r0, r0
    59cc:	0006fb17 	andeq	pc, r6, r7, lsl fp	; <UNPREDICTABLE>
    59d0:	02660500 	rsbeq	r0, r6, #0, 10
    59d4:	00000101 	andeq	r0, r0, r1, lsl #2
    59d8:	064617a4 	strbeq	r1, [r6], -r4, lsr #15
    59dc:	67050000 	strvs	r0, [r5, -r0]
    59e0:	00010102 	andeq	r0, r1, r2, lsl #2
    59e4:	ea17ac00 	b	5f09ec <__bss_end+0x5daebc>
    59e8:	05000006 	streq	r0, [r0, #-6]
    59ec:	01010268 	tsteq	r1, r8, ror #4
    59f0:	17b40000 	ldrne	r0, [r4, r0]!
    59f4:	000005f8 	strdeq	r0, [r0], -r8
    59f8:	01026905 	tsteq	r2, r5, lsl #18
    59fc:	bc000001 	stclt	0, cr0, [r0], {1}
    5a00:	00060717 	andeq	r0, r6, r7, lsl r7
    5a04:	026a0500 	rsbeq	r0, sl, #0, 10
    5a08:	00000101 	andeq	r0, r0, r1, lsl #2
    5a0c:	089517c4 	ldmeq	r5, {r2, r6, r7, r8, r9, sl, ip}
    5a10:	6b050000 	blvs	145a18 <__bss_end+0x12fee8>
    5a14:	00002502 	andeq	r2, r0, r2, lsl #10
    5a18:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
    5a1c:	0000011f 	andeq	r0, r0, pc, lsl r1
    5a20:	000007a4 	andeq	r0, r0, r4, lsr #15
    5a24:	0000d909 	andeq	sp, r0, r9, lsl #18
    5a28:	08001900 	stmdaeq	r0, {r8, fp, ip}
    5a2c:	0000011f 	andeq	r0, r0, pc, lsl r1
    5a30:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    5a34:	0000d909 	andeq	sp, r0, r9, lsl #18
    5a38:	08000700 	stmdaeq	r0, {r8, r9, sl}
    5a3c:	0000011f 	andeq	r0, r0, pc, lsl r1
    5a40:	000007c4 	andeq	r0, r0, r4, asr #15
    5a44:	0000d909 	andeq	sp, r0, r9, lsl #18
    5a48:	1a001700 	bne	b650 <__module_entries_end+0x35ac>
    5a4c:	027005f0 	rsbseq	r0, r0, #240, 10	; 0x3c000000
    5a50:	000007e8 	andeq	r0, r0, r8, ror #15
    5a54:	00083217 	andeq	r3, r8, r7, lsl r2
    5a58:	02730500 	rsbseq	r0, r3, #0, 10
    5a5c:	000007e8 	andeq	r0, r0, r8, ror #15
    5a60:	0a051700 	beq	14b668 <__bss_end+0x135b38>
    5a64:	74050000 	strvc	r0, [r5], #-0
    5a68:	0007f802 	andeq	pc, r7, r2, lsl #16
    5a6c:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
    5a70:	000002e8 	andeq	r0, r0, r8, ror #5
    5a74:	000007f8 	strdeq	r0, [r0], -r8
    5a78:	0000d909 	andeq	sp, r0, r9, lsl #18
    5a7c:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
    5a80:	00000037 	andeq	r0, r0, r7, lsr r0
    5a84:	00000808 	andeq	r0, r0, r8, lsl #16
    5a88:	0000d909 	andeq	sp, r0, r9, lsl #18
    5a8c:	1b001d00 	blne	ce94 <__module_entries_end+0x4df0>
    5a90:	025505f0 	subseq	r0, r5, #240, 10	; 0x3c000000
    5a94:	0000082a 	andeq	r0, r0, sl, lsr #16
    5a98:	0009261c 	andeq	r2, r9, ip, lsl r6
    5a9c:	026c0500 	rsbeq	r0, ip, #0, 10
    5aa0:	00000693 	muleq	r0, r3, r6
    5aa4:	000a3a1c 	andeq	r3, sl, ip, lsl sl
    5aa8:	02750500 	rsbseq	r0, r5, #0, 10
    5aac:	000007c4 	andeq	r0, r0, r4, asr #15
    5ab0:	011f0800 	tsteq	pc, r0, lsl #16
    5ab4:	083a0000 	ldmdaeq	sl!, {}	; <UNPREDICTABLE>
    5ab8:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    5abc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5ac0:	08451d00 	stmdaeq	r5, {r8, sl, fp, ip}^
    5ac4:	36150000 	ldrcc	r0, [r5], -r0
    5ac8:	00000004 	andeq	r0, r0, r4
    5acc:	083a040d 	ldmdaeq	sl!, {r0, r2, r3, sl}
    5ad0:	040d0000 	streq	r0, [sp], #-0
    5ad4:	00000189 	andeq	r0, r0, r9, lsl #3
    5ad8:	00085c1d 	andeq	r5, r8, sp, lsl ip
    5adc:	00251500 	eoreq	r1, r5, r0, lsl #10
    5ae0:	0d000000 	stceq	0, cr0, [r0, #-0]
    5ae4:	00086204 	andeq	r6, r8, r4, lsl #4
    5ae8:	51040d00 	tstpl	r4, r0, lsl #26
    5aec:	08000008 	stmdaeq	r0, {r3}
    5af0:	00000601 	andeq	r0, r0, r1, lsl #12
    5af4:	00000878 	andeq	r0, r0, r8, ror r8
    5af8:	0000d909 	andeq	sp, r0, r9, lsl #18
    5afc:	1e000200 	cdpne	2, 0, cr0, cr0, cr0, {0}
    5b00:	000009b5 			; <UNDEFINED> instruction: 0x000009b5
    5b04:	3602fd05 	strcc	pc, [r2], -r5, lsl #26
    5b08:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    5b0c:	000009ae 	andeq	r0, r0, lr, lsr #19
    5b10:	3c02fe05 	stccc	14, cr15, [r2], {5}
    5b14:	1f000004 	svcne	0x00000004
    5b18:	00001ad2 	ldrdeq	r1, [r0], -r2
    5b1c:	01171906 	tsteq	r7, r6, lsl #18
    5b20:	45280000 	strmi	r0, [r8, #-0]!
    5b24:	01140001 	tsteq	r4, r1
    5b28:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b2c:	00000914 	andeq	r0, r0, r4, lsl r9
    5b30:	01006d20 	tsteq	r0, r0, lsr #26
    5b34:	0001172d 	andeq	r1, r1, sp, lsr #14
    5b38:	21500100 	cmpcs	r0, r0, lsl #2
    5b3c:	2d010063 	stccs	0, cr0, [r1, #-396]	; 0xfffffe74
    5b40:	00000025 	andeq	r0, r0, r5, lsr #32
    5b44:	0000025a 	andeq	r0, r0, sl, asr r2
    5b48:	01006e21 	tsteq	r0, r1, lsr #28
    5b4c:	00002c2d 	andeq	r2, r0, sp, lsr #24
    5b50:	00029f00 	andeq	r9, r2, r0, lsl #30
    5b54:	00732200 	rsbseq	r2, r3, r0, lsl #4
    5b58:	01193201 	tsteq	r9, r1, lsl #4
    5b5c:	03330000 	teqeq	r3, #0
    5b60:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    5b64:	37350100 	ldrcc	r0, [r5, -r0, lsl #2]!
    5b68:	67000000 	strvs	r0, [r0, -r0]
    5b6c:	23000003 	movwcs	r0, #3
    5b70:	00001acb 	andeq	r1, r0, fp, asr #21
    5b74:	006f3601 	rsbeq	r3, pc, r1, lsl #12
    5b78:	037c0000 	cmneq	ip, #0
    5b7c:	6c230000 	stcvs	0, cr0, [r3], #-0
    5b80:	0100001a 	tsteq	r0, sl, lsl r0
    5b84:	00091437 	andeq	r1, r9, r7, lsr r4
    5b88:	0003bb00 	andeq	fp, r3, r0, lsl #22
    5b8c:	00642200 	rsbeq	r2, r4, r0, lsl #4
    5b90:	00373801 	eorseq	r3, r7, r1, lsl #16
    5b94:	04230000 	strteq	r0, [r3], #-0
    5b98:	0d000000 	stceq	0, cr0, [r0, #-0]
    5b9c:	00006f04 	andeq	r6, r0, r4, lsl #30
    5ba0:	09290000 	stmdbeq	r9!, {}	; <UNPREDICTABLE>
    5ba4:	00040000 	andeq	r0, r4, r0
    5ba8:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    5bac:	1a000104 	bne	5fc4 <_start-0x203c>
    5bb0:	e10c0000 	mrs	r0, (UNDEF: 12)
    5bb4:	7900001a 	stmdbvc	r0, {r1, r3, r4}
    5bb8:	3c00001a 	stccc	0, cr0, [r0], {26}
    5bbc:	dc000146 	stfles	f0, [r0], {70}	; 0x46
    5bc0:	1a000000 	bne	5bc8 <_start-0x2438>
    5bc4:	02000013 	andeq	r0, r0, #19
    5bc8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5bcc:	e2030074 	and	r0, r3, #116	; 0x74
    5bd0:	0200000a 	andeq	r0, r0, #10
    5bd4:	000037d8 	ldrdeq	r3, [r0], -r8
    5bd8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    5bdc:	00000622 	andeq	r0, r0, r2, lsr #12
    5be0:	2f050804 	svccs	0x00050804
    5be4:	04000001 	streq	r0, [r0], #-1
    5be8:	015d0408 	cmpeq	sp, r8, lsl #8
    5bec:	01040000 	mrseq	r0, (UNDEF: 4)
    5bf0:	00088406 	andeq	r8, r8, r6, lsl #8
    5bf4:	08010400 	stmdaeq	r1, {sl}
    5bf8:	00000882 	andeq	r0, r0, r2, lsl #17
    5bfc:	9e050204 	cdpls	2, 0, cr0, cr5, cr4, {0}
    5c00:	04000008 	streq	r0, [r0], #-8
    5c04:	00590702 	subseq	r0, r9, r2, lsl #14
    5c08:	04040000 	streq	r0, [r4], #-0
    5c0c:	00013405 	andeq	r3, r1, r5, lsl #8
    5c10:	00680500 	rsbeq	r0, r8, r0, lsl #10
    5c14:	04040000 	streq	r0, [r4], #-0
    5c18:	00061d07 	andeq	r1, r6, r7, lsl #26
    5c1c:	07080400 	streq	r0, [r8, -r0, lsl #8]
    5c20:	00000618 	andeq	r0, r0, r8, lsl r6
    5c24:	00087003 	andeq	r7, r8, r3
    5c28:	25070300 	strcs	r0, [r7, #-768]	; 0xfffffd00
    5c2c:	03000000 	movweq	r0, #0
    5c30:	0000085f 	andeq	r0, r0, pc, asr r8
    5c34:	00682c04 	rsbeq	r2, r8, r4, lsl #24
    5c38:	55030000 	strpl	r0, [r3, #-0]
    5c3c:	04000009 	streq	r0, [r0], #-9
    5c40:	00006872 	andeq	r6, r0, r2, ror r8
    5c44:	07c10600 	strbeq	r0, [r1, r0, lsl #12]
    5c48:	65020000 	strvs	r0, [r2, #-0]
    5c4c:	00003701 	andeq	r3, r0, r1, lsl #14
    5c50:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
    5c54:	0000cea6 	andeq	ip, r0, r6, lsr #29
    5c58:	07bb0800 	ldreq	r0, [fp, r0, lsl #16]!
    5c5c:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    5c60:	000000a3 	andeq	r0, r0, r3, lsr #1
    5c64:	00076d08 	andeq	r6, r7, r8, lsl #26
    5c68:	cea90400 	cdpgt	4, 10, cr0, cr9, cr0, {0}
    5c6c:	00000000 	andeq	r0, r0, r0
    5c70:	00005309 	andeq	r5, r0, r9, lsl #6
    5c74:	0000de00 	andeq	sp, r0, r0, lsl #28
    5c78:	00de0a00 	sbcseq	r0, lr, r0, lsl #20
    5c7c:	00030000 	andeq	r0, r3, r0
    5c80:	dc070404 	cfstrsle	mvf0, [r7], {4}
    5c84:	0b000000 	bleq	5c8c <_start-0x2374>
    5c88:	06a30408 	strteq	r0, [r3], r8, lsl #8
    5c8c:	0c000001 	stceq	0, cr0, [r0], {1}
    5c90:	00000933 	andeq	r0, r0, r3, lsr r9
    5c94:	0025a504 	eoreq	sl, r5, r4, lsl #10
    5c98:	0c000000 	stceq	0, cr0, [r0], {-0}
    5c9c:	0000093b 	andeq	r0, r0, fp, lsr r9
    5ca0:	00afaa04 	adceq	sl, pc, r4, lsl #20
    5ca4:	00040000 	andeq	r0, r4, r0
    5ca8:	0008c603 	andeq	ip, r8, r3, lsl #12
    5cac:	e5ab0400 	str	r0, [fp, #1024]!	; 0x400
    5cb0:	03000000 	movweq	r0, #0
    5cb4:	00000730 	andeq	r0, r0, r0, lsr r7
    5cb8:	0082af04 	addeq	sl, r2, r4, lsl #30
    5cbc:	040d0000 	streq	r0, [sp], #-0
    5cc0:	0129040e 			; <UNDEFINED> instruction: 0x0129040e
    5cc4:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    5cc8:	04000001 	streq	r0, [r0], #-1
    5ccc:	088b0801 	stmeq	fp, {r0, fp}
    5cd0:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    5cd4:	03000001 	movweq	r0, #1
    5cd8:	00000999 	muleq	r0, r9, r9
    5cdc:	00741605 	rsbseq	r1, r4, r5, lsl #12
    5ce0:	41100000 	tstmi	r0, r0
    5ce4:	18000007 	stmdane	r0, {r0, r1, r2}
    5ce8:	01932d05 	orrseq	r2, r3, r5, lsl #26
    5cec:	e70c0000 	str	r0, [ip, -r0]
    5cf0:	05000008 	streq	r0, [r0, #-8]
    5cf4:	0001932f 	andeq	r9, r1, pc, lsr #6
    5cf8:	5f110000 	svcpl	0x00110000
    5cfc:	3005006b 	andcc	r0, r5, fp, rrx
    5d00:	00000025 	andeq	r0, r0, r5, lsr #32
    5d04:	091e0c04 	ldmdbeq	lr, {r2, sl, fp}
    5d08:	30050000 	andcc	r0, r5, r0
    5d0c:	00000025 	andeq	r0, r0, r5, lsr #32
    5d10:	072a0c08 	streq	r0, [sl, -r8, lsl #24]!
    5d14:	30050000 	andcc	r0, r5, r0
    5d18:	00000025 	andeq	r0, r0, r5, lsr #32
    5d1c:	09f00c0c 	ldmibeq	r0!, {r2, r3, sl, fp}^
    5d20:	30050000 	andcc	r0, r5, r0
    5d24:	00000025 	andeq	r0, r0, r5, lsr #32
    5d28:	785f1110 	ldmdavc	pc, {r4, r8, ip}^	; <UNPREDICTABLE>
    5d2c:	99310500 	ldmdbls	r1!, {r8, sl}
    5d30:	14000001 	strne	r0, [r0], #-1
    5d34:	40040e00 	andmi	r0, r4, r0, lsl #28
    5d38:	09000001 	stmdbeq	r0, {r0}
    5d3c:	00000135 	andeq	r0, r0, r5, lsr r1
    5d40:	000001a9 	andeq	r0, r0, r9, lsr #3
    5d44:	0000de0a 	andeq	sp, r0, sl, lsl #28
    5d48:	10000000 	andne	r0, r0, r0
    5d4c:	00000768 	andeq	r0, r0, r8, ror #14
    5d50:	22350524 	eorscs	r0, r5, #36, 10	; 0x9000000
    5d54:	0c000002 	stceq	0, cr0, [r0], {2}
    5d58:	00000663 	andeq	r0, r0, r3, ror #12
    5d5c:	00253705 	eoreq	r3, r5, r5, lsl #14
    5d60:	0c000000 	stceq	0, cr0, [r0], {-0}
    5d64:	00000964 	andeq	r0, r0, r4, ror #18
    5d68:	00253805 	eoreq	r3, r5, r5, lsl #16
    5d6c:	0c040000 	stceq	0, cr0, [r4], {-0}
    5d70:	00000678 	andeq	r0, r0, r8, ror r6
    5d74:	00253905 	eoreq	r3, r5, r5, lsl #18
    5d78:	0c080000 	stceq	0, cr0, [r8], {-0}
    5d7c:	00000a7b 	andeq	r0, r0, fp, ror sl
    5d80:	00253a05 	eoreq	r3, r5, r5, lsl #20
    5d84:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    5d88:	00000839 	andeq	r0, r0, r9, lsr r8
    5d8c:	00253b05 	eoreq	r3, r5, r5, lsl #22
    5d90:	0c100000 	ldceq	0, cr0, [r0], {-0}
    5d94:	000007e9 	andeq	r0, r0, r9, ror #15
    5d98:	00253c05 	eoreq	r3, r5, r5, lsl #24
    5d9c:	0c140000 	ldceq	0, cr0, [r4], {-0}
    5da0:	000009f5 	strdeq	r0, [r0], -r5
    5da4:	00253d05 	eoreq	r3, r5, r5, lsl #26
    5da8:	0c180000 	ldceq	0, cr0, [r8], {-0}
    5dac:	000008a8 	andeq	r0, r0, r8, lsr #17
    5db0:	00253e05 	eoreq	r3, r5, r5, lsl #28
    5db4:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    5db8:	00000a42 	andeq	r0, r0, r2, asr #20
    5dbc:	00253f05 	eoreq	r3, r5, r5, lsl #30
    5dc0:	00200000 	eoreq	r0, r0, r0
    5dc4:	00068712 	andeq	r8, r6, r2, lsl r7
    5dc8:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    5dcc:	00026248 	andeq	r6, r2, r8, asr #4
    5dd0:	07090c00 	streq	r0, [r9, -r0, lsl #24]
    5dd4:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    5dd8:	00000262 	andeq	r0, r0, r2, ror #4
    5ddc:	05cd0c00 	strbeq	r0, [sp, #3072]	; 0xc00
    5de0:	4a050000 	bmi	145de8 <__bss_end+0x1302b8>
    5de4:	00000262 	andeq	r0, r0, r2, ror #4
    5de8:	09801380 	stmibeq	r0, {r7, r8, r9, ip}
    5dec:	4c050000 	stcmi	0, cr0, [r5], {-0}
    5df0:	00000135 	andeq	r0, r0, r5, lsr r1
    5df4:	ac130100 	ldfges	f0, [r3], {-0}
    5df8:	05000006 	streq	r0, [r0, #-6]
    5dfc:	0001354f 	andeq	r3, r1, pc, asr #10
    5e00:	00010400 	andeq	r0, r1, r0, lsl #8
    5e04:	00011c09 	andeq	r1, r1, r9, lsl #24
    5e08:	00027200 	andeq	r7, r2, r0, lsl #4
    5e0c:	00de0a00 	sbcseq	r0, lr, r0, lsl #20
    5e10:	001f0000 	andseq	r0, pc, r0
    5e14:	00084212 	andeq	r4, r8, r2, lsl r2
    5e18:	05019000 	streq	r9, [r1, #-0]
    5e1c:	0002b05b 	andeq	fp, r2, fp, asr r0
    5e20:	08e70c00 	stmiaeq	r7!, {sl, fp}^
    5e24:	5c050000 	stcpl	0, cr0, [r5], {-0}
    5e28:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    5e2c:	08ff0c00 	ldmeq	pc!, {sl, fp}^	; <UNPREDICTABLE>
    5e30:	5d050000 	stcpl	0, cr0, [r5, #-0]
    5e34:	00000025 	andeq	r0, r0, r5, lsr #32
    5e38:	07110c04 	ldreq	r0, [r1, -r4, lsl #24]
    5e3c:	5f050000 	svcpl	0x00050000
    5e40:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    5e44:	06870c08 	streq	r0, [r7], r8, lsl #24
    5e48:	60050000 	andvs	r0, r5, r0
    5e4c:	00000222 	andeq	r0, r0, r2, lsr #4
    5e50:	040e0088 	streq	r0, [lr], #-136	; 0xffffff78
    5e54:	00000272 	andeq	r0, r0, r2, ror r2
    5e58:	0002c609 	andeq	ip, r2, r9, lsl #12
    5e5c:	0002c600 	andeq	ip, r2, r0, lsl #12
    5e60:	00de0a00 	sbcseq	r0, lr, r0, lsl #20
    5e64:	001f0000 	andseq	r0, pc, r0
    5e68:	02cc040e 	sbceq	r0, ip, #234881024	; 0xe000000
    5e6c:	10140000 	andsne	r0, r4, r0
    5e70:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
    5e74:	f2730508 	vrshl.s64	d16, d8, d3
    5e78:	0c000002 	stceq	0, cr0, [r0], {2}
    5e7c:	00000672 	andeq	r0, r0, r2, ror r6
    5e80:	02f27405 	rscseq	r7, r2, #83886080	; 0x5000000
    5e84:	0c000000 	stceq	0, cr0, [r0], {-0}
    5e88:	000005d9 	ldrdeq	r0, [r0], -r9
    5e8c:	00257505 	eoreq	r7, r5, r5, lsl #10
    5e90:	00040000 	andeq	r0, r4, r0
    5e94:	0053040e 	subseq	r0, r3, lr, lsl #8
    5e98:	d1100000 	tstle	r0, r0
    5e9c:	68000008 	stmdavs	r0, {r3}
    5ea0:	0422b305 	strteq	fp, [r2], #-773	; 0xfffffcfb
    5ea4:	5f110000 	svcpl	0x00110000
    5ea8:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    5eac:	000002f2 	strdeq	r0, [r0], -r2
    5eb0:	725f1100 	subsvc	r1, pc, #0, 2
    5eb4:	25b50500 	ldrcs	r0, [r5, #1280]!	; 0x500
    5eb8:	04000000 	streq	r0, [r0], #-0
    5ebc:	00775f11 	rsbseq	r5, r7, r1, lsl pc
    5ec0:	0025b605 	eoreq	fp, r5, r5, lsl #12
    5ec4:	0c080000 	stceq	0, cr0, [r8], {-0}
    5ec8:	000006a5 	andeq	r0, r0, r5, lsr #13
    5ecc:	005ab705 	subseq	fp, sl, r5, lsl #14
    5ed0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    5ed4:	00000784 	andeq	r0, r0, r4, lsl #15
    5ed8:	005ab805 	subseq	fp, sl, r5, lsl #16
    5edc:	110e0000 	mrsne	r0, (UNDEF: 14)
    5ee0:	0066625f 	rsbeq	r6, r6, pc, asr r2
    5ee4:	02cdb905 	sbceq	fp, sp, #81920	; 0x14000
    5ee8:	0c100000 	ldceq	0, cr0, [r0], {-0}
    5eec:	0000062f 	andeq	r0, r0, pc, lsr #12
    5ef0:	0025ba05 	eoreq	fp, r5, r5, lsl #20
    5ef4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    5ef8:	00000695 	muleq	r0, r5, r6
    5efc:	011cc105 	tsteq	ip, r5, lsl #2
    5f00:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    5f04:	00000758 	andeq	r0, r0, r8, asr r7
    5f08:	057dc305 	ldrbeq	ip, [sp, #-773]!	; 0xfffffcfb
    5f0c:	0c200000 	stceq	0, cr0, [r0], #-0
    5f10:	000007e2 	andeq	r0, r0, r2, ror #15
    5f14:	05acc505 	streq	ip, [ip, #1285]!	; 0x505
    5f18:	0c240000 	stceq	0, cr0, [r4], #-0
    5f1c:	00000943 	andeq	r0, r0, r3, asr #18
    5f20:	05d0c805 	ldrbeq	ip, [r0, #2053]	; 0x805
    5f24:	0c280000 	stceq	0, cr0, [r8], #-0
    5f28:	00000a5c 	andeq	r0, r0, ip, asr sl
    5f2c:	05eac905 	strbeq	ip, [sl, #2309]!	; 0x905
    5f30:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    5f34:	0062755f 	rsbeq	r7, r2, pc, asr r5
    5f38:	02cdcc05 	sbceq	ip, sp, #1280	; 0x500
    5f3c:	11300000 	teqne	r0, r0
    5f40:	0070755f 	rsbseq	r7, r0, pc, asr r5
    5f44:	02f2cd05 	rscseq	ip, r2, #320	; 0x140
    5f48:	11380000 	teqne	r8, r0
    5f4c:	0072755f 	rsbseq	r7, r2, pc, asr r5
    5f50:	0025ce05 	eoreq	ip, r5, r5, lsl #28
    5f54:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    5f58:	0000066c 	andeq	r0, r0, ip, ror #12
    5f5c:	05f0d105 	ldrbeq	sp, [r0, #261]!	; 0x105
    5f60:	0c400000 	mareq	acc0, r0, r0
    5f64:	00000a34 	andeq	r0, r0, r4, lsr sl
    5f68:	0600d205 	streq	sp, [r0], -r5, lsl #4
    5f6c:	11430000 	mrsne	r0, (UNDEF: 67)
    5f70:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    5f74:	02cdd505 	sbceq	sp, sp, #20971520	; 0x1400000
    5f78:	0c440000 	mareq	acc0, r0, r4
    5f7c:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
    5f80:	0025d805 	eoreq	sp, r5, r5, lsl #16
    5f84:	0c4c0000 	mareq	acc0, r0, ip
    5f88:	000006cc 	andeq	r0, r0, ip, asr #13
    5f8c:	008dd905 	addeq	sp, sp, r5, lsl #18
    5f90:	0c500000 	mraeq	r0, r0, acc0
    5f94:	000005f2 	strdeq	r0, [r0], -r2
    5f98:	0440dc05 	strbeq	sp, [r0], #-3077	; 0xfffff3fb
    5f9c:	0c540000 	mraeq	r0, r4, acc0
    5fa0:	000007c8 	andeq	r0, r0, r8, asr #15
    5fa4:	0111e005 	tsteq	r1, r5
    5fa8:	0c580000 	mraeq	r0, r8, acc0
    5fac:	000008d9 	ldrdeq	r0, [r0], -r9
    5fb0:	0106e205 	tsteq	r6, r5, lsl #4
    5fb4:	0c5c0000 	mraeq	r0, ip, acc0
    5fb8:	000007da 	ldrdeq	r0, [r0], -sl
    5fbc:	0025e305 	eoreq	lr, r5, r5, lsl #6
    5fc0:	00640000 	rsbeq	r0, r4, r0
    5fc4:	00002515 	andeq	r2, r0, r5, lsl r5
    5fc8:	00044000 	andeq	r4, r4, r0
    5fcc:	04401600 	strbeq	r1, [r0], #-1536	; 0xfffffa00
    5fd0:	1c160000 	ldcne	0, cr0, [r6], {-0}
    5fd4:	16000001 	strne	r0, [r0], -r1
    5fd8:	0000011e 	andeq	r0, r0, lr, lsl r1
    5fdc:	00002516 	andeq	r2, r0, r6, lsl r5
    5fe0:	040e0000 	streq	r0, [lr], #-0
    5fe4:	0000044b 	andeq	r0, r0, fp, asr #8
    5fe8:	00044005 	andeq	r4, r4, r5
    5fec:	09261700 	stmdbeq	r6!, {r8, r9, sl, ip}
    5ff0:	04280000 	strteq	r0, [r8], #-0
    5ff4:	7d023805 	stcvc	8, cr3, [r2, #-20]	; 0xffffffec
    5ff8:	18000005 	stmdane	r0, {r0, r2}
    5ffc:	00000897 	muleq	r0, r7, r8
    6000:	25023a05 	strcs	r3, [r2, #-2565]	; 0xfffff5fb
    6004:	00000000 	andeq	r0, r0, r0
    6008:	0006b418 	andeq	fp, r6, r8, lsl r4
    600c:	023f0500 	eorseq	r0, pc, #0, 10
    6010:	00000657 	andeq	r0, r0, r7, asr r6
    6014:	07741804 	ldrbeq	r1, [r4, -r4, lsl #16]!
    6018:	3f050000 	svccc	0x00050000
    601c:	00065702 	andeq	r5, r6, r2, lsl #14
    6020:	39180800 	ldmdbcc	r8, {fp}
    6024:	05000007 	streq	r0, [r0, #-7]
    6028:	0657023f 			; <UNDEFINED> instruction: 0x0657023f
    602c:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    6030:	000008fa 	strdeq	r0, [r0], -sl
    6034:	25024105 	strcs	r4, [r2, #-261]	; 0xfffffefb
    6038:	10000000 	andne	r0, r0, r0
    603c:	0005e718 	andeq	lr, r5, r8, lsl r7
    6040:	02420500 	subeq	r0, r2, #0, 10
    6044:	00000839 	andeq	r0, r0, r9, lsr r8
    6048:	09c11814 	stmibeq	r1, {r2, r4, fp, ip}^
    604c:	44050000 	strmi	r0, [r5], #-0
    6050:	00002502 	andeq	r2, r0, r2, lsl #10
    6054:	04183000 	ldreq	r3, [r8], #-0
    6058:	05000009 	streq	r0, [r0, #-9]
    605c:	05a10245 	streq	r0, [r1, #581]!	; 0x245
    6060:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    6064:	00000854 	andeq	r0, r0, r4, asr r8
    6068:	25024705 	strcs	r4, [r2, #-1797]	; 0xfffff8fb
    606c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    6070:	00091418 	andeq	r1, r9, r8, lsl r4
    6074:	02490500 	subeq	r0, r9, #0, 10
    6078:	00000854 	andeq	r0, r0, r4, asr r8
    607c:	07b3183c 			; <UNDEFINED> instruction: 0x07b3183c
    6080:	4c050000 	stcmi	0, cr0, [r5], {-0}
    6084:	00019302 	andeq	r9, r1, r2, lsl #6
    6088:	5e184000 	cdppl	0, 1, cr4, cr8, cr0, {0}
    608c:	05000007 	streq	r0, [r0, #-7]
    6090:	0025024d 	eoreq	r0, r5, sp, asr #4
    6094:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    6098:	00000a76 	andeq	r0, r0, r6, ror sl
    609c:	93024e05 	movwls	r4, #11781	; 0x2e05
    60a0:	48000001 	stmdami	r0, {r0}
    60a4:	00086618 	andeq	r6, r8, r8, lsl r6
    60a8:	024f0500 	subeq	r0, pc, #0, 10
    60ac:	0000085a 	andeq	r0, r0, sl, asr r8
    60b0:	077c184c 	ldrbeq	r1, [ip, -ip, asr #16]!
    60b4:	52050000 	andpl	r0, r5, #0
    60b8:	00002502 	andeq	r2, r0, r2, lsl #10
    60bc:	c4185000 	ldrgt	r5, [r8], #-0
    60c0:	05000006 	streq	r0, [r0, #-6]
    60c4:	011e0253 	tsteq	lr, r3, asr r2
    60c8:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    60cc:	00000890 	muleq	r0, r0, r8
    60d0:	17027605 	strne	r7, [r2, -r5, lsl #12]
    60d4:	58000008 	stmdapl	r0, {r3}
    60d8:	00084219 	andeq	r4, r8, r9, lsl r2
    60dc:	027a0500 	rsbseq	r0, sl, #0, 10
    60e0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    60e4:	91190148 	tstls	r9, r8, asr #2
    60e8:	05000007 	streq	r0, [r0, #-7]
    60ec:	0272027b 	rsbseq	r0, r2, #-1342177273	; 0xb0000007
    60f0:	014c0000 	mrseq	r0, (UNDEF: 76)
    60f4:	000a1819 	andeq	r1, sl, r9, lsl r8
    60f8:	027f0500 	rsbseq	r0, pc, #0, 10
    60fc:	0000086b 	andeq	r0, r0, fp, ror #16
    6100:	9d1902dc 	lfmls	f0, 4, [r9, #-880]	; 0xfffffc90
    6104:	05000006 	streq	r0, [r0, #-6]
    6108:	061c0284 	ldreq	r0, [ip], -r4, lsl #5
    610c:	02e00000 	rsceq	r0, r0, #0
    6110:	00068219 	andeq	r8, r6, r9, lsl r2
    6114:	02850500 	addeq	r0, r5, #0, 10
    6118:	00000877 	andeq	r0, r0, r7, ror r8
    611c:	0e0002ec 	cdpeq	2, 0, cr0, cr0, cr12, {7}
    6120:	00042204 	andeq	r2, r4, r4, lsl #4
    6124:	00251500 	eoreq	r1, r5, r0, lsl #10
    6128:	05a10000 	streq	r0, [r1, #0]!
    612c:	40160000 	andsmi	r0, r6, r0
    6130:	16000004 	strne	r0, [r0], -r4
    6134:	0000011c 	andeq	r0, r0, ip, lsl r1
    6138:	0005a116 	andeq	sl, r5, r6, lsl r1
    613c:	00251600 	eoreq	r1, r5, r0, lsl #12
    6140:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6144:	00013004 	andeq	r3, r1, r4
    6148:	05a10f00 	streq	r0, [r1, #3840]!	; 0xf00
    614c:	040e0000 	streq	r0, [lr], #-0
    6150:	00000583 	andeq	r0, r0, r3, lsl #11
    6154:	00009815 	andeq	r9, r0, r5, lsl r8
    6158:	0005d000 	andeq	sp, r5, r0
    615c:	04401600 	strbeq	r1, [r0], #-1536	; 0xfffffa00
    6160:	1c160000 	ldcne	0, cr0, [r6], {-0}
    6164:	16000001 	strne	r0, [r0], -r1
    6168:	00000098 	muleq	r0, r8, r0
    616c:	00002516 	andeq	r2, r0, r6, lsl r5
    6170:	040e0000 	streq	r0, [lr], #-0
    6174:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
    6178:	00002515 	andeq	r2, r0, r5, lsl r5
    617c:	0005ea00 	andeq	lr, r5, r0, lsl #20
    6180:	04401600 	strbeq	r1, [r0], #-1536	; 0xfffffa00
    6184:	1c160000 	ldcne	0, cr0, [r6], {-0}
    6188:	00000001 	andeq	r0, r0, r1
    618c:	05d6040e 	ldrbeq	r0, [r6, #1038]	; 0x40e
    6190:	53090000 	movwpl	r0, #36864	; 0x9000
    6194:	00000000 	andeq	r0, r0, r0
    6198:	0a000006 	beq	61b8 <_start-0x1e48>
    619c:	000000de 	ldrdeq	r0, [r0], -lr
    61a0:	53090002 	movwpl	r0, #36866	; 0x9002
    61a4:	10000000 	andne	r0, r0, r0
    61a8:	0a000006 	beq	61c8 <_start-0x1e38>
    61ac:	000000de 	ldrdeq	r0, [r0], -lr
    61b0:	bf060000 	svclt	0x00060000
    61b4:	05000008 	streq	r0, [r0, #-8]
    61b8:	02f8011d 	rscseq	r0, r8, #1073741831	; 0x40000007
    61bc:	ff1a0000 			; <UNDEFINED> instruction: 0xff1a0000
    61c0:	0c000009 	stceq	0, cr0, [r0], {9}
    61c4:	51012105 	tstpl	r1, r5, lsl #2
    61c8:	18000006 	stmdane	r0, {r1, r2}
    61cc:	000008e7 	andeq	r0, r0, r7, ror #17
    61d0:	51012305 	tstpl	r1, r5, lsl #6
    61d4:	00000006 	andeq	r0, r0, r6
    61d8:	00078a18 	andeq	r8, r7, r8, lsl sl
    61dc:	01240500 			; <UNDEFINED> instruction: 0x01240500
    61e0:	00000025 	andeq	r0, r0, r5, lsr #32
    61e4:	08b91804 	ldmeq	r9!, {r2, fp, ip}
    61e8:	25050000 	strcs	r0, [r5, #-0]
    61ec:	00065701 	andeq	r5, r6, r1, lsl #14
    61f0:	0e000800 	cdpeq	8, 0, cr0, cr0, cr0, {0}
    61f4:	00061c04 	andeq	r1, r6, r4, lsl #24
    61f8:	10040e00 	andne	r0, r4, r0, lsl #28
    61fc:	1a000006 	bne	621c <_start-0x1de4>
    6200:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6204:	013d050e 	teqeq	sp, lr, lsl #10
    6208:	00000692 	muleq	r0, r2, r6
    620c:	00092d18 	andeq	r2, r9, r8, lsl sp
    6210:	013e0500 	teqeq	lr, r0, lsl #10
    6214:	00000692 	muleq	r0, r2, r6
    6218:	096d1800 	stmdbeq	sp!, {fp, ip}^
    621c:	3f050000 	svccc	0x00050000
    6220:	00069201 	andeq	r9, r6, r1, lsl #4
    6224:	89180600 	ldmdbhi	r8, {r9, sl}
    6228:	05000009 	streq	r0, [r0, #-9]
    622c:	00610140 	rsbeq	r0, r1, r0, asr #2
    6230:	000c0000 	andeq	r0, ip, r0
    6234:	00006109 	andeq	r6, r0, r9, lsl #2
    6238:	0006a200 	andeq	sl, r6, r0, lsl #4
    623c:	00de0a00 	sbcseq	r0, lr, r0, lsl #20
    6240:	00020000 	andeq	r0, r2, r0
    6244:	5705d01b 	smladpl	r5, fp, r0, sp
    6248:	0007a302 	andeq	sl, r7, r2, lsl #6
    624c:	09d31800 	ldmibeq	r3, {fp, ip}^
    6250:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    6254:	00003702 	andeq	r3, r0, r2, lsl #14
    6258:	73180000 	tstvc	r8, #0
    625c:	05000009 	streq	r0, [r0, #-9]
    6260:	011e025a 	tsteq	lr, sl, asr r2
    6264:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    6268:	000007a6 	andeq	r0, r0, r6, lsr #15
    626c:	a3025b05 	movwge	r5, #11013	; 0x2b05
    6270:	08000007 	stmdaeq	r0, {r0, r1, r2}
    6274:	000a4d18 	andeq	r4, sl, r8, lsl sp
    6278:	025c0500 	subseq	r0, ip, #0, 10
    627c:	000001a9 	andeq	r0, r0, r9, lsr #3
    6280:	07491824 	strbeq	r1, [r9, -r4, lsr #16]
    6284:	5d050000 	stcpl	0, cr0, [r5, #-0]
    6288:	00002502 	andeq	r2, r0, r2, lsl #10
    628c:	e2184800 	ands	r4, r8, #0, 16
    6290:	05000008 	streq	r0, [r0, #-8]
    6294:	007b025e 	rsbseq	r0, fp, lr, asr r2
    6298:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    629c:	00000a63 	andeq	r0, r0, r3, ror #20
    62a0:	5d025f05 	stcpl	15, cr5, [r2, #-20]	; 0xffffffec
    62a4:	58000006 	stmdapl	r0, {r1, r2}
    62a8:	0008ed18 	andeq	lr, r8, r8, lsl sp
    62ac:	02600500 	rsbeq	r0, r0, #0, 10
    62b0:	00000106 	andeq	r0, r0, r6, lsl #2
    62b4:	0a681868 	beq	1a0c45c <__bss_end+0x19f692c>
    62b8:	61050000 	mrsvs	r0, (UNDEF: 5)
    62bc:	00010602 	andeq	r0, r1, r2, lsl #12
    62c0:	55187000 	ldrpl	r7, [r8, #-0]
    62c4:	05000006 	streq	r0, [r0, #-6]
    62c8:	01060262 	tsteq	r6, r2, ror #4
    62cc:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    62d0:	00000a0e 	andeq	r0, r0, lr, lsl #20
    62d4:	b3026305 	movwlt	r6, #8965	; 0x2305
    62d8:	80000007 	andhi	r0, r0, r7
    62dc:	00079a18 	andeq	r9, r7, r8, lsl sl
    62e0:	02640500 	rsbeq	r0, r4, #0, 10
    62e4:	000007c3 	andeq	r0, r0, r3, asr #15
    62e8:	09a11888 	stmibeq	r1!, {r3, r7, fp, ip}
    62ec:	65050000 	strvs	r0, [r5, #-0]
    62f0:	00002502 	andeq	r2, r0, r2, lsl #10
    62f4:	fb18a000 	blx	62e2fe <__bss_end+0x6187ce>
    62f8:	05000006 	streq	r0, [r0, #-6]
    62fc:	01060266 	tsteq	r6, r6, ror #4
    6300:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    6304:	00000646 	andeq	r0, r0, r6, asr #12
    6308:	06026705 	streq	r6, [r2], -r5, lsl #14
    630c:	ac000001 	stcge	0, cr0, [r0], {1}
    6310:	0006ea18 	andeq	lr, r6, r8, lsl sl
    6314:	02680500 	rsbeq	r0, r8, #0, 10
    6318:	00000106 	andeq	r0, r0, r6, lsl #2
    631c:	05f818b4 	ldrbeq	r1, [r8, #2228]!	; 0x8b4
    6320:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    6324:	00010602 	andeq	r0, r1, r2, lsl #12
    6328:	0718bc00 	ldreq	fp, [r8, -r0, lsl #24]
    632c:	05000006 	streq	r0, [r0, #-6]
    6330:	0106026a 	tsteq	r6, sl, ror #4
    6334:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    6338:	00000895 	muleq	r0, r5, r8
    633c:	25026b05 	strcs	r6, [r2, #-2821]	; 0xfffff4fb
    6340:	cc000000 	stcgt	0, cr0, [r0], {-0}
    6344:	01290900 			; <UNDEFINED> instruction: 0x01290900
    6348:	07b30000 	ldreq	r0, [r3, r0]!
    634c:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    6350:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    6354:	01290900 			; <UNDEFINED> instruction: 0x01290900
    6358:	07c30000 	strbeq	r0, [r3, r0]
    635c:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    6360:	07000000 	streq	r0, [r0, -r0]
    6364:	01290900 			; <UNDEFINED> instruction: 0x01290900
    6368:	07d30000 	ldrbeq	r0, [r3, r0]
    636c:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    6370:	17000000 	strne	r0, [r0, -r0]
    6374:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
    6378:	07f70270 			; <UNDEFINED> instruction: 0x07f70270
    637c:	32180000 	andscc	r0, r8, #0
    6380:	05000008 	streq	r0, [r0, #-8]
    6384:	07f70273 			; <UNDEFINED> instruction: 0x07f70273
    6388:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    638c:	00000a05 	andeq	r0, r0, r5, lsl #20
    6390:	07027405 	streq	r7, [r2, -r5, lsl #8]
    6394:	78000008 	stmdavc	r0, {r3}
    6398:	02f20900 	rscseq	r0, r2, #0, 18
    639c:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    63a0:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    63a4:	1d000000 	stcne	0, cr0, [r0, #-0]
    63a8:	00370900 	eorseq	r0, r7, r0, lsl #18
    63ac:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    63b0:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    63b4:	1d000000 	stcne	0, cr0, [r0, #-0]
    63b8:	05f01c00 	ldrbeq	r1, [r0, #3072]!	; 0xc00
    63bc:	08390255 	ldmdaeq	r9!, {r0, r2, r4, r6, r9}
    63c0:	261d0000 	ldrcs	r0, [sp], -r0
    63c4:	05000009 	streq	r0, [r0, #-9]
    63c8:	06a2026c 	strteq	r0, [r2], ip, ror #4
    63cc:	3a1d0000 	bcc	7463d4 <__bss_end+0x7308a4>
    63d0:	0500000a 	streq	r0, [r0, #-10]
    63d4:	07d30275 			; <UNDEFINED> instruction: 0x07d30275
    63d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    63dc:	00000129 	andeq	r0, r0, r9, lsr #2
    63e0:	00000849 	andeq	r0, r0, r9, asr #16
    63e4:	0000de0a 	andeq	sp, r0, sl, lsl #28
    63e8:	1e001800 	cdpne	8, 0, cr1, cr0, cr0, {0}
    63ec:	00000854 	andeq	r0, r0, r4, asr r8
    63f0:	00044016 	andeq	r4, r4, r6, lsl r0
    63f4:	040e0000 	streq	r0, [lr], #-0
    63f8:	00000849 	andeq	r0, r0, r9, asr #16
    63fc:	0193040e 	orrseq	r0, r3, lr, lsl #8
    6400:	6b1e0000 	blvs	786408 <__bss_end+0x7708d8>
    6404:	16000008 	strne	r0, [r0], -r8
    6408:	00000025 	andeq	r0, r0, r5, lsr #32
    640c:	71040e00 	tstvc	r4, r0, lsl #28
    6410:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    6414:	00086004 	andeq	r6, r8, r4
    6418:	06100900 	ldreq	r0, [r0], -r0, lsl #18
    641c:	08870000 	stmeq	r7, {}	; <UNPREDICTABLE>
    6420:	de0a0000 	cdple	0, 0, cr0, cr10, cr0, {0}
    6424:	02000000 	andeq	r0, r0, #0
    6428:	09b51f00 	ldmibeq	r5!, {r8, r9, sl, fp, ip}
    642c:	fd050000 	stc2	0, cr0, [r5, #-0]
    6430:	00044002 	andeq	r4, r4, r2
    6434:	09ae1f00 	stmibeq	lr!, {r8, r9, sl, fp, ip}
    6438:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
    643c:	00044602 	andeq	r4, r4, r2, lsl #12
    6440:	1ad92000 	bne	ff64e448 <_estack+0xf763e448>
    6444:	24060000 	strcs	r0, [r6], #-0
    6448:	0000011e 	andeq	r0, r0, lr, lsl r1
    644c:	0001463c 	andeq	r4, r1, ip, lsr r6
    6450:	000000dc 	ldrdeq	r0, [r0], -ip
    6454:	09209c01 	stmdbeq	r0!, {r0, sl, fp, ip, pc}
    6458:	59210000 	stmdbpl	r1!, {}	; <UNPREDICTABLE>
    645c:	01000019 	tsteq	r0, r9, lsl r0
    6460:	00012445 	andeq	r2, r1, r5, asr #8
    6464:	22500100 	subscs	r0, r0, #0, 2
    6468:	00001a37 	andeq	r1, r0, r7, lsr sl
    646c:	05a74501 	streq	r4, [r7, #1281]!	; 0x501
    6470:	047d0000 	ldrbteq	r0, [sp], #-0
    6474:	35220000 	strcc	r0, [r2, #-0]!
    6478:	01000009 	tsteq	r0, r9
    647c:	00002c45 	andeq	r2, r0, r5, asr #24
    6480:	00049e00 	andeq	r9, r4, r0, lsl #28
    6484:	73642300 	cmnvc	r4, #0, 6
    6488:	5b010074 	blpl	46660 <__bss_end+0x30b30>
    648c:	0000011e 	andeq	r0, r0, lr, lsl r1
    6490:	000004ec 	andeq	r0, r0, ip, ror #9
    6494:	63727323 	cmnvs	r2, #-1946157056	; 0x8c000000
    6498:	a15c0100 	cmpge	ip, r0, lsl #2
    649c:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
    64a0:	24000005 	strcs	r0, [r0], #-5
    64a4:	0000195e 	andeq	r1, r0, lr, asr r9
    64a8:	09205d01 	stmdbeq	r0!, {r0, r8, sl, fp, ip, lr}
    64ac:	057f0000 	ldrbeq	r0, [pc, #-0]!	; 64b4 <_start-0x1b4c>
    64b0:	2b240000 	blcs	9064b8 <__bss_end+0x8f0988>
    64b4:	0100001a 	tsteq	r0, sl, lsl r0
    64b8:	0009265e 	andeq	r2, r9, lr, asr r6
    64bc:	00059d00 	andeq	r9, r5, r0, lsl #26
    64c0:	040e0000 	streq	r0, [lr], #-0
    64c4:	00000068 	andeq	r0, r0, r8, rrx
    64c8:	006f040e 	rsbeq	r0, pc, lr, lsl #8
    64cc:	Address 0x00000000000064cc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
       c:	00171006 	andseq	r1, r7, r6
      10:	00240200 	eoreq	r0, r4, r0, lsl #4
      14:	0b3e0b0b 	bleq	f82c48 <__bss_end+0xf6d118>
      18:	00000803 	andeq	r0, r0, r3, lsl #16
      1c:	0b002403 	bleq	9030 <__module_entries_end+0xf8c>
      20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      24:	0400000e 	streq	r0, [r0], #-14
      28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      2c:	0b3b0b3a 	bleq	ec2d1c <__bss_end+0xead1ec>
      30:	00001349 	andeq	r1, r0, r9, asr #6
      34:	0b000f05 	bleq	3c50 <_start-0x43b0>
      38:	0013490b 	andseq	r4, r3, fp, lsl #18
      3c:	01150600 	tsteq	r5, r0, lsl #12
      40:	13011927 	movwne	r1, #6439	; 0x1927
      44:	05070000 	streq	r0, [r7, #-0]
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	000f0800 	andeq	r0, pc, r0, lsl #16
      50:	00000b0b 	andeq	r0, r0, fp, lsl #22
      54:	03011309 	movweq	r1, #4873	; 0x1309
      58:	3a0b0b0e 	bcc	2c2c98 <__bss_end+0x2ad168>
      5c:	010b3b0b 	tsteq	fp, fp, lsl #22
      60:	0a000013 	beq	b4 <_start-0x7f4c>
      64:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      68:	0b3b0b3a 	bleq	ec2d58 <__bss_end+0xead228>
      6c:	0b381349 	bleq	e04d98 <__bss_end+0xdef268>
      70:	350b0000 	strcc	r0, [fp, #-0]
      74:	00134900 	andseq	r4, r3, r0, lsl #18
      78:	00340c00 	eorseq	r0, r4, r0, lsl #24
      7c:	0b3a0e03 	bleq	e83890 <__bss_end+0xe6dd60>
      80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      84:	00001802 	andeq	r1, r0, r2, lsl #16
      88:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
      8c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      90:	0e03012e 	adfeqsp	f0, f3, #0.5
      94:	0b3b0b3a 	bleq	ec2d84 <__bss_end+0xead254>
      98:	01111927 	tsteq	r1, r7, lsr #18
      9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      a0:	01194296 			; <UNDEFINED> instruction: 0x01194296
      a4:	0f000013 	svceq	0x00000013
      a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
      ac:	0b3a0e03 	bleq	e838c0 <__bss_end+0xe6dd90>
      b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
      b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
      b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
      bc:	00130119 	andseq	r0, r3, r9, lsl r1
      c0:	00051000 	andeq	r1, r5, r0
      c4:	0b3a0e03 	bleq	e838d8 <__bss_end+0xe6dda8>
      c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      cc:	00001802 	andeq	r1, r0, r2, lsl #16
      d0:	3f002e11 	svccc	0x00002e11
      d4:	3a0e0319 	bcc	380d40 <__bss_end+0x36b210>
      d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
      e0:	97184006 	ldrls	r4, [r8, -r6]
      e4:	00001942 	andeq	r1, r0, r2, asr #18
      e8:	3f002e12 	svccc	0x00002e12
      ec:	3a0e0319 	bcc	380d58 <__bss_end+0x36b228>
      f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      f4:	11134919 	tstne	r3, r9, lsl r9
      f8:	40061201 	andmi	r1, r6, r1, lsl #4
      fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     100:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     104:	03193f01 	tsteq	r9, #1, 30
     108:	3b0b3a0e 	blcc	2ce948 <__bss_end+0x2b8e18>
     10c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     110:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     114:	97184006 	ldrls	r4, [r8, -r6]
     118:	00001942 	andeq	r1, r0, r2, asr #18
     11c:	01110100 	tsteq	r1, r0, lsl #2
     120:	0b130e25 	bleq	4c39bc <__bss_end+0x4ade8c>
     124:	01110e03 	tsteq	r1, r3, lsl #28
     128:	17100612 			; <UNDEFINED> instruction: 0x17100612
     12c:	24020000 	strcs	r0, [r2], #-0
     130:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     134:	0008030b 	andeq	r0, r8, fp, lsl #6
     138:	00240300 	eoreq	r0, r4, r0, lsl #6
     13c:	0b3e0b0b 	bleq	f82d70 <__bss_end+0xf6d240>
     140:	00000e03 	andeq	r0, r0, r3, lsl #28
     144:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     148:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     14c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     150:	0b3b0b3a 	bleq	ec2e40 <__bss_end+0xead310>
     154:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     158:	00001802 	andeq	r1, r0, r2, lsl #16
     15c:	3f002e06 	svccc	0x00002e06
     160:	3a0e0319 	bcc	380dcc <__bss_end+0x36b29c>
     164:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     168:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     16c:	97184006 	ldrls	r4, [r8, -r6]
     170:	00001942 	andeq	r1, r0, r2, asr #18
     174:	3f012e07 	svccc	0x00012e07
     178:	3a0e0319 	bcc	380de4 <__bss_end+0x36b2b4>
     17c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     180:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     184:	96184006 	ldrls	r4, [r8], -r6
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	0b080000 	bleq	200194 <__bss_end+0x1ea664>
     190:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     194:	00130106 	andseq	r0, r3, r6, lsl #2
     198:	00340900 	eorseq	r0, r4, r0, lsl #18
     19c:	0b3a0e03 	bleq	e839b0 <__bss_end+0xe6de80>
     1a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1a8:	0b0a0000 	bleq	2801b0 <__bss_end+0x26a680>
     1ac:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1b0:	0b000006 	bleq	1d0 <_start-0x7e30>
     1b4:	0b0b000f 	bleq	2c01f8 <__bss_end+0x2aa6c8>
     1b8:	00001349 	andeq	r1, r0, r9, asr #6
     1bc:	0000350c 	andeq	r3, r0, ip, lsl #10
     1c0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
     1c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1c8:	0b3b0b3a 	bleq	ec2eb8 <__bss_end+0xead388>
     1cc:	01111927 	tsteq	r1, r7, lsr #18
     1d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     1d8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     1dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     1e0:	0b3a0e03 	bleq	e839f4 <__bss_end+0xe6dec4>
     1e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     1e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1f0:	00000019 	andeq	r0, r0, r9, lsl r0
     1f4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     1f8:	030b130e 	movweq	r1, #45838	; 0xb30e
     1fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     200:	00171006 	andseq	r1, r7, r6
     204:	00240200 	eoreq	r0, r4, r0, lsl #4
     208:	0b3e0b0b 	bleq	f82e3c <__bss_end+0xf6d30c>
     20c:	00000803 	andeq	r0, r0, r3, lsl #16
     210:	0b002403 	bleq	9224 <__module_entries_end+0x1180>
     214:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     218:	0400000e 	streq	r0, [r0], #-14
     21c:	0b0b000f 	bleq	2c0260 <__bss_end+0x2aa730>
     220:	16050000 	strne	r0, [r5], -r0
     224:	3a0e0300 	bcc	380e2c <__bss_end+0x36b2fc>
     228:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     22c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     230:	13490035 	movtne	r0, #36917	; 0x9035
     234:	13070000 	movwne	r0, #28672	; 0x7000
     238:	0b0e0301 	bleq	380e44 <__bss_end+0x36b314>
     23c:	3b0b3a0b 	blcc	2cea70 <__bss_end+0x2b8f40>
     240:	0013010b 	andseq	r0, r3, fp, lsl #2
     244:	000d0800 	andeq	r0, sp, r0, lsl #16
     248:	0b3a0e03 	bleq	e83a5c <__bss_end+0xe6df2c>
     24c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     250:	00000b38 	andeq	r0, r0, r8, lsr fp
     254:	0b000f09 	bleq	3e80 <_start-0x4180>
     258:	0013490b 	andseq	r4, r3, fp, lsl #18
     25c:	00260a00 	eoreq	r0, r6, r0, lsl #20
     260:	00001349 	andeq	r1, r0, r9, asr #6
     264:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     268:	00130119 	andseq	r0, r3, r9, lsl r1
     26c:	00050c00 	andeq	r0, r5, r0, lsl #24
     270:	00001349 	andeq	r1, r0, r9, asr #6
     274:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     278:	00130113 	andseq	r0, r3, r3, lsl r1
     27c:	00210e00 	eoreq	r0, r1, r0, lsl #28
     280:	0b2f1349 	bleq	bc4fac <__bss_end+0xbaf47c>
     284:	340f0000 	strcc	r0, [pc], #-0	; 28c <_start-0x7d74>
     288:	3a0e0300 	bcc	380e90 <__bss_end+0x36b360>
     28c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     290:	00180213 	andseq	r0, r8, r3, lsl r2
     294:	00341000 	eorseq	r1, r4, r0
     298:	0b3a0e03 	bleq	e83aac <__bss_end+0xe6df7c>
     29c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2a0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     2a4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     2a8:	03193f01 	tsteq	r9, #1, 30
     2ac:	3b0b3a0e 	blcc	2ceaec <__bss_end+0x2b8fbc>
     2b0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     2b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2b8:	96184006 	ldrls	r4, [r8], -r6
     2bc:	13011942 	movwne	r1, #6466	; 0x1942
     2c0:	05120000 	ldreq	r0, [r2, #-0]
     2c4:	3a0e0300 	bcc	380ecc <__bss_end+0x36b39c>
     2c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     2cc:	00180213 	andseq	r0, r8, r3, lsl r2
     2d0:	00341300 	eorseq	r1, r4, r0, lsl #6
     2d4:	0b3a0e03 	bleq	e83ae8 <__bss_end+0xe6dfb8>
     2d8:	1349053b 	movtne	r0, #38203	; 0x953b
     2dc:	00001802 	andeq	r1, r0, r2, lsl #16
     2e0:	03012e14 	movweq	r2, #7700	; 0x1e14
     2e4:	3b0b3a0e 	blcc	2ceb24 <__bss_end+0x2b8ff4>
     2e8:	11192705 	tstne	r9, r5, lsl #14
     2ec:	40061201 	andmi	r1, r6, r1, lsl #4
     2f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2f4:	00001301 	andeq	r1, r0, r1, lsl #6
     2f8:	3f012e15 	svccc	0x00012e15
     2fc:	3a0e0319 	bcc	380f68 <__bss_end+0x36b438>
     300:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     304:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     308:	96184006 	ldrls	r4, [r8], -r6
     30c:	13011942 	movwne	r1, #6466	; 0x1942
     310:	0b160000 	bleq	580318 <__bss_end+0x56a7e8>
     314:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     318:	17000006 	strne	r0, [r0, -r6]
     31c:	0e03012e 	adfeqsp	f0, f3, #0.5
     320:	0b3b0b3a 	bleq	ec3010 <__bss_end+0xead4e0>
     324:	01111927 	tsteq	r1, r7, lsr #18
     328:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     32c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     330:	18000013 	stmdane	r0, {r0, r1, r4}
     334:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     338:	0b3a0e03 	bleq	e83b4c <__bss_end+0xe6e01c>
     33c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     340:	06120111 			; <UNDEFINED> instruction: 0x06120111
     344:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     348:	00130119 	andseq	r0, r3, r9, lsl r1
     34c:	00051900 	andeq	r1, r5, r0, lsl #18
     350:	0b3a0e03 	bleq	e83b64 <__bss_end+0xe6e034>
     354:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     358:	00001802 	andeq	r1, r0, r2, lsl #16
     35c:	3f012e1a 	svccc	0x00012e1a
     360:	3a0e0319 	bcc	380fcc <__bss_end+0x36b49c>
     364:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     368:	11134919 	tstne	r3, r9, lsl r9
     36c:	40061201 	andmi	r1, r6, r1, lsl #4
     370:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     374:	01000000 	mrseq	r0, (UNDEF: 0)
     378:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     37c:	0e030b13 	vmoveq.32	d3[0], r0
     380:	06120111 			; <UNDEFINED> instruction: 0x06120111
     384:	00001710 	andeq	r1, r0, r0, lsl r7
     388:	0b002402 	bleq	9398 <__module_entries_end+0x12f4>
     38c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     390:	0300000e 	movweq	r0, #14
     394:	0b0b0024 	bleq	2c042c <__bss_end+0x2aa8fc>
     398:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     39c:	35040000 	strcc	r0, [r4, #-0]
     3a0:	00134900 	andseq	r4, r3, r0, lsl #18
     3a4:	00160500 	andseq	r0, r6, r0, lsl #10
     3a8:	0b3a0e03 	bleq	e83bbc <__bss_end+0xe6e08c>
     3ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b0:	16060000 	strne	r0, [r6], -r0
     3b4:	3a0e0300 	bcc	380fbc <__bss_end+0x36b48c>
     3b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3bc:	07000013 	smladeq	r0, r3, r0, r0
     3c0:	0b0b0117 	bleq	2c0824 <__bss_end+0x2aacf4>
     3c4:	0b3b0b3a 	bleq	ec30b4 <__bss_end+0xead584>
     3c8:	00001301 	andeq	r1, r0, r1, lsl #6
     3cc:	03000d08 	movweq	r0, #3336	; 0xd08
     3d0:	3b0b3a0e 	blcc	2cec10 <__bss_end+0x2b90e0>
     3d4:	0013490b 	andseq	r4, r3, fp, lsl #18
     3d8:	01010900 	tsteq	r1, r0, lsl #18
     3dc:	13011349 	movwne	r1, #4937	; 0x1349
     3e0:	210a0000 	mrscs	r0, (UNDEF: 10)
     3e4:	2f134900 	svccs	0x00134900
     3e8:	0b00000b 	bleq	41c <_start-0x7be4>
     3ec:	0b0b0113 	bleq	2c0840 <__bss_end+0x2aad10>
     3f0:	0b3b0b3a 	bleq	ec30e0 <__bss_end+0xead5b0>
     3f4:	00001301 	andeq	r1, r0, r1, lsl #6
     3f8:	03000d0c 	movweq	r0, #3340	; 0xd0c
     3fc:	3b0b3a0e 	blcc	2cec3c <__bss_end+0x2b910c>
     400:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     404:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     408:	0b0b000f 	bleq	2c044c <__bss_end+0x2aa91c>
     40c:	0f0e0000 	svceq	0x000e0000
     410:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     414:	0f000013 	svceq	0x00000013
     418:	13490026 	movtne	r0, #36902	; 0x9026
     41c:	13100000 	tstne	r0, #0
     420:	0b0e0301 	bleq	38102c <__bss_end+0x36b4fc>
     424:	3b0b3a0b 	blcc	2cec58 <__bss_end+0x2b9128>
     428:	0013010b 	andseq	r0, r3, fp, lsl #2
     42c:	000d1100 	andeq	r1, sp, r0, lsl #2
     430:	0b3a0803 	bleq	e82444 <__bss_end+0xe6c914>
     434:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     438:	00000b38 	andeq	r0, r0, r8, lsr fp
     43c:	03011312 	movweq	r1, #4882	; 0x1312
     440:	3a050b0e 	bcc	143080 <__bss_end+0x12d550>
     444:	010b3b0b 	tsteq	fp, fp, lsl #22
     448:	13000013 	movwne	r0, #19
     44c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     450:	0b3b0b3a 	bleq	ec3140 <__bss_end+0xead610>
     454:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     458:	15140000 	ldrne	r0, [r4, #-0]
     45c:	00192700 	andseq	r2, r9, r0, lsl #14
     460:	01151500 	tsteq	r5, r0, lsl #10
     464:	13491927 	movtne	r1, #39207	; 0x9927
     468:	00001301 	andeq	r1, r0, r1, lsl #6
     46c:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
     470:	17000013 	smladne	r0, r3, r0, r0
     474:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     478:	0b3a050b 	bleq	e818ac <__bss_end+0xe6bd7c>
     47c:	1301053b 	movwne	r0, #5435	; 0x153b
     480:	0d180000 	ldceq	0, cr0, [r8, #-0]
     484:	3a0e0300 	bcc	38108c <__bss_end+0x36b55c>
     488:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     48c:	000b3813 	andeq	r3, fp, r3, lsl r8
     490:	000d1900 	andeq	r1, sp, r0, lsl #18
     494:	0b3a0e03 	bleq	e83ca8 <__bss_end+0xe6e178>
     498:	1349053b 	movtne	r0, #38203	; 0x953b
     49c:	00000538 	andeq	r0, r0, r8, lsr r5
     4a0:	0301131a 	movweq	r1, #4890	; 0x131a
     4a4:	3a0b0b0e 	bcc	2c30e4 <__bss_end+0x2ad5b4>
     4a8:	01053b0b 	tsteq	r5, fp, lsl #22
     4ac:	1b000013 	blne	500 <_start-0x7b00>
     4b0:	0b0b0113 	bleq	2c0904 <__bss_end+0x2aadd4>
     4b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4b8:	00001301 	andeq	r1, r0, r1, lsl #6
     4bc:	0b01171c 	bleq	46134 <__bss_end+0x30604>
     4c0:	3b0b3a0b 	blcc	2cecf4 <__bss_end+0x2b91c4>
     4c4:	00130105 	andseq	r0, r3, r5, lsl #2
     4c8:	000d1d00 	andeq	r1, sp, r0, lsl #26
     4cc:	0b3a0e03 	bleq	e83ce0 <__bss_end+0xe6e1b0>
     4d0:	1349053b 	movtne	r0, #38203	; 0x953b
     4d4:	151e0000 	ldrne	r0, [lr, #-0]
     4d8:	01192701 	tsteq	r9, r1, lsl #14
     4dc:	1f000013 	svcne	0x00000013
     4e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4e8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     4ec:	0000193c 	andeq	r1, r0, ip, lsr r9
     4f0:	03003420 	movweq	r3, #1056	; 0x420
     4f4:	3b0b3a0e 	blcc	2ced34 <__bss_end+0x2b9204>
     4f8:	3f13490b 	svccc	0x0013490b
     4fc:	00193c19 	andseq	r3, r9, r9, lsl ip
     500:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     504:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     508:	0b3b0b3a 	bleq	ec31f8 <__bss_end+0xead6c8>
     50c:	01111927 	tsteq	r1, r7, lsr #18
     510:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     514:	01194297 			; <UNDEFINED> instruction: 0x01194297
     518:	22000013 	andcs	r0, r0, #19
     51c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     520:	0b3b0b3a 	bleq	ec3210 <__bss_end+0xead6e0>
     524:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     528:	34230000 	strtcc	r0, [r3], #-0
     52c:	3a0e0300 	bcc	381134 <__bss_end+0x36b604>
     530:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     534:	00180213 	andseq	r0, r8, r3, lsl r2
     538:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     53c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     540:	0b3b0b3a 	bleq	ec3230 <__bss_end+0xead700>
     544:	01111927 	tsteq	r1, r7, lsr #18
     548:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     54c:	00194297 	mulseq	r9, r7, r2
     550:	11010000 	mrsne	r0, (UNDEF: 1)
     554:	130e2501 	movwne	r2, #58625	; 0xe501
     558:	110e030b 	tstne	lr, fp, lsl #6
     55c:	10061201 	andne	r1, r6, r1, lsl #4
     560:	02000017 	andeq	r0, r0, #23
     564:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     568:	0b3b0b3a 	bleq	ec3258 <__bss_end+0xead728>
     56c:	00001349 	andeq	r1, r0, r9, asr #6
     570:	0b002403 	bleq	9584 <__module_entries_end+0x14e0>
     574:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     578:	0400000e 	streq	r0, [r0], #-14
     57c:	0b0b0024 	bleq	2c0614 <__bss_end+0x2aaae4>
     580:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     584:	35050000 	strcc	r0, [r5, #-0]
     588:	00134900 	andseq	r4, r3, r0, lsl #18
     58c:	00160600 	andseq	r0, r6, r0, lsl #12
     590:	0b3a0e03 	bleq	e83da4 <__bss_end+0xe6e274>
     594:	1349053b 	movtne	r0, #38203	; 0x953b
     598:	17070000 	strne	r0, [r7, -r0]
     59c:	3a0b0b01 	bcc	2c31a8 <__bss_end+0x2ad678>
     5a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     5a4:	08000013 	stmdaeq	r0, {r0, r1, r4}
     5a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5ac:	0b3b0b3a 	bleq	ec329c <__bss_end+0xead76c>
     5b0:	00001349 	andeq	r1, r0, r9, asr #6
     5b4:	49010109 	stmdbmi	r1, {r0, r3, r8}
     5b8:	00130113 	andseq	r0, r3, r3, lsl r1
     5bc:	00210a00 	eoreq	r0, r1, r0, lsl #20
     5c0:	0b2f1349 	bleq	bc52ec <__bss_end+0xbaf7bc>
     5c4:	130b0000 	movwne	r0, #45056	; 0xb000
     5c8:	3a0b0b01 	bcc	2c31d4 <__bss_end+0x2ad6a4>
     5cc:	010b3b0b 	tsteq	fp, fp, lsl #22
     5d0:	0c000013 	stceq	0, cr0, [r0], {19}
     5d4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5d8:	0b3b0b3a 	bleq	ec32c8 <__bss_end+0xead798>
     5dc:	0b381349 	bleq	e05308 <__bss_end+0xdef7d8>
     5e0:	0f0d0000 	svceq	0x000d0000
     5e4:	000b0b00 	andeq	r0, fp, r0, lsl #22
     5e8:	00260e00 	eoreq	r0, r6, r0, lsl #28
     5ec:	00001349 	andeq	r1, r0, r9, asr #6
     5f0:	0b000f0f 	bleq	4234 <_start-0x3dcc>
     5f4:	0013490b 	andseq	r4, r3, fp, lsl #18
     5f8:	01131000 	tsteq	r3, r0
     5fc:	0b0b0e03 	bleq	2c3e10 <__bss_end+0x2ae2e0>
     600:	0b3b0b3a 	bleq	ec32f0 <__bss_end+0xead7c0>
     604:	00001301 	andeq	r1, r0, r1, lsl #6
     608:	03000d11 	movweq	r0, #3345	; 0xd11
     60c:	3b0b3a08 	blcc	2cee34 <__bss_end+0x2b9304>
     610:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     614:	1200000b 	andne	r0, r0, #11
     618:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     61c:	0b3a050b 	bleq	e81a50 <__bss_end+0xe6bf20>
     620:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     624:	0d130000 	ldceq	0, cr0, [r3, #-0]
     628:	3a0e0300 	bcc	381230 <__bss_end+0x36b700>
     62c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     630:	00053813 	andeq	r3, r5, r3, lsl r8
     634:	00151400 	andseq	r1, r5, r0, lsl #8
     638:	00001927 	andeq	r1, r0, r7, lsr #18
     63c:	27011515 	smladcs	r1, r5, r5, r1
     640:	01134919 	tsteq	r3, r9, lsl r9
     644:	16000013 			; <UNDEFINED> instruction: 0x16000013
     648:	13490005 	movtne	r0, #36869	; 0x9005
     64c:	13170000 	tstne	r7, #0
     650:	0b0e0301 	bleq	38125c <__bss_end+0x36b72c>
     654:	3b0b3a05 	blcc	2cee70 <__bss_end+0x2b9340>
     658:	00130105 	andseq	r0, r3, r5, lsl #2
     65c:	000d1800 	andeq	r1, sp, r0, lsl #16
     660:	0b3a0e03 	bleq	e83e74 <__bss_end+0xe6e344>
     664:	1349053b 	movtne	r0, #38203	; 0x953b
     668:	00000b38 	andeq	r0, r0, r8, lsr fp
     66c:	03000d19 	movweq	r0, #3353	; 0xd19
     670:	3b0b3a0e 	blcc	2ceeb0 <__bss_end+0x2b9380>
     674:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     678:	1a000005 	bne	694 <_start-0x796c>
     67c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     680:	0b3a0b0b 	bleq	e832b4 <__bss_end+0xe6d784>
     684:	1301053b 	movwne	r0, #5435	; 0x153b
     688:	131b0000 	tstne	fp, #0
     68c:	3a0b0b01 	bcc	2c3298 <__bss_end+0x2ad768>
     690:	01053b0b 	tsteq	r5, fp, lsl #22
     694:	1c000013 	stcne	0, cr0, [r0], {19}
     698:	0b0b0117 	bleq	2c0afc <__bss_end+0x2aafcc>
     69c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6a0:	00001301 	andeq	r1, r0, r1, lsl #6
     6a4:	03000d1d 	movweq	r0, #3357	; 0xd1d
     6a8:	3b0b3a0e 	blcc	2ceee8 <__bss_end+0x2b93b8>
     6ac:	00134905 	andseq	r4, r3, r5, lsl #18
     6b0:	01151e00 	tsteq	r5, r0, lsl #28
     6b4:	13011927 	movwne	r1, #6439	; 0x1927
     6b8:	341f0000 	ldrcc	r0, [pc], #-0	; 6c0 <_start-0x7940>
     6bc:	3a0e0300 	bcc	3812c4 <__bss_end+0x36b794>
     6c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6c4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     6c8:	20000019 	andcs	r0, r0, r9, lsl r0
     6cc:	00000026 	andeq	r0, r0, r6, lsr #32
     6d0:	03003421 	movweq	r3, #1057	; 0x421
     6d4:	3b0b3a0e 	blcc	2cef14 <__bss_end+0x2b93e4>
     6d8:	3f13490b 	svccc	0x0013490b
     6dc:	00193c19 	andseq	r3, r9, r9, lsl ip
     6e0:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
     6e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     6e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6ec:	13491927 	movtne	r1, #39207	; 0x9927
     6f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6f8:	00130119 	andseq	r0, r3, r9, lsl r1
     6fc:	00052300 	andeq	r2, r5, r0, lsl #6
     700:	0b3a0e03 	bleq	e83f14 <__bss_end+0xe6e3e4>
     704:	1349053b 	movtne	r0, #38203	; 0x953b
     708:	00001802 	andeq	r1, r0, r2, lsl #16
     70c:	03003424 	movweq	r3, #1060	; 0x424
     710:	3b0b3a0e 	blcc	2cef50 <__bss_end+0x2b9420>
     714:	02134905 	andseq	r4, r3, #81920	; 0x14000
     718:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
     71c:	0e03012e 	adfeqsp	f0, f3, #0.5
     720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     724:	13491927 	movtne	r1, #39207	; 0x9927
     728:	06120111 			; <UNDEFINED> instruction: 0x06120111
     72c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     730:	00130119 	andseq	r0, r3, r9, lsl r1
     734:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     738:	0b3a0e03 	bleq	e83f4c <__bss_end+0xe6e41c>
     73c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     740:	06120111 			; <UNDEFINED> instruction: 0x06120111
     744:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     748:	00130119 	andseq	r0, r3, r9, lsl r1
     74c:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
     750:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     754:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     758:	01111927 	tsteq	r1, r7, lsr #18
     75c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     760:	01194296 			; <UNDEFINED> instruction: 0x01194296
     764:	28000013 	stmdacs	r0, {r0, r1, r4}
     768:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     76c:	0b3a0e03 	bleq	e83f80 <__bss_end+0xe6e450>
     770:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     774:	01111349 	tsteq	r1, r9, asr #6
     778:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     77c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     780:	29000013 	stmdbcs	r0, {r0, r1, r4}
     784:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     788:	0b3a0e03 	bleq	e83f9c <__bss_end+0xe6e46c>
     78c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     790:	01111349 	tsteq	r1, r9, asr #6
     794:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     798:	00194296 	mulseq	r9, r6, r2
     79c:	11010000 	mrsne	r0, (UNDEF: 1)
     7a0:	130e2501 	movwne	r2, #58625	; 0xe501
     7a4:	1b0e030b 	blne	3813d8 <__bss_end+0x36b8a8>
     7a8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     7ac:	00171006 	andseq	r1, r7, r6
     7b0:	00240200 	eoreq	r0, r4, r0, lsl #4
     7b4:	0b3e0b0b 	bleq	f833e8 <__bss_end+0xf6d8b8>
     7b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     7bc:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
     7c0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     7c4:	13490035 	movtne	r0, #36917	; 0x9035
     7c8:	24050000 	strcs	r0, [r5], #-0
     7cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7d0:	0008030b 	andeq	r0, r8, fp, lsl #6
     7d4:	00160600 	andseq	r0, r6, r0, lsl #12
     7d8:	0b3a0e03 	bleq	e83fec <__bss_end+0xe6e4bc>
     7dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7e0:	0f070000 	svceq	0x00070000
     7e4:	000b0b00 	andeq	r0, fp, r0, lsl #22
     7e8:	00160800 	andseq	r0, r6, r0, lsl #16
     7ec:	0b3a0e03 	bleq	e84000 <__bss_end+0xe6e4d0>
     7f0:	1349053b 	movtne	r0, #38203	; 0x953b
     7f4:	17090000 	strne	r0, [r9, -r0]
     7f8:	3a0b0b01 	bcc	2c3404 <__bss_end+0x2ad8d4>
     7fc:	010b3b0b 	tsteq	fp, fp, lsl #22
     800:	0a000013 	beq	854 <_start-0x77ac>
     804:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     808:	0b3b0b3a 	bleq	ec34f8 <__bss_end+0xead9c8>
     80c:	00001349 	andeq	r1, r0, r9, asr #6
     810:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     814:	00130113 	andseq	r0, r3, r3, lsl r1
     818:	00210c00 	eoreq	r0, r1, r0, lsl #24
     81c:	0b2f1349 	bleq	bc5548 <__bss_end+0xbafa18>
     820:	130d0000 	movwne	r0, #53248	; 0xd000
     824:	3a0b0b01 	bcc	2c3430 <__bss_end+0x2ad900>
     828:	010b3b0b 	tsteq	fp, fp, lsl #22
     82c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     830:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     834:	0b3b0b3a 	bleq	ec3524 <__bss_end+0xead9f4>
     838:	0b381349 	bleq	e05564 <__bss_end+0xdefa34>
     83c:	130f0000 	movwne	r0, #61440	; 0xf000
     840:	0b0e0301 	bleq	38144c <__bss_end+0x36b91c>
     844:	3b0b3a0b 	blcc	2cf078 <__bss_end+0x2b9548>
     848:	0013010b 	andseq	r0, r3, fp, lsl #2
     84c:	000d1000 	andeq	r1, sp, r0
     850:	0b3a0803 	bleq	e82864 <__bss_end+0xe6cd34>
     854:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     858:	00000b38 	andeq	r0, r0, r8, lsr fp
     85c:	0b000f11 	bleq	44a8 <_start-0x3b58>
     860:	0013490b 	andseq	r4, r3, fp, lsl #18
     864:	01131200 	tsteq	r3, r0, lsl #4
     868:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     86c:	0b3b0b3a 	bleq	ec355c <__bss_end+0xeada2c>
     870:	00001301 	andeq	r1, r0, r1, lsl #6
     874:	03000d13 	movweq	r0, #3347	; 0xd13
     878:	3b0b3a0e 	blcc	2cf0b8 <__bss_end+0x2b9588>
     87c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     880:	14000005 	strne	r0, [r0], #-5
     884:	19270015 	stmdbne	r7!, {r0, r2, r4}
     888:	15150000 	ldrne	r0, [r5, #-0]
     88c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     890:	00130113 	andseq	r0, r3, r3, lsl r1
     894:	00051600 	andeq	r1, r5, r0, lsl #12
     898:	00001349 	andeq	r1, r0, r9, asr #6
     89c:	03011317 	movweq	r1, #4887	; 0x1317
     8a0:	3a050b0e 	bcc	1434e0 <__bss_end+0x12d9b0>
     8a4:	01053b0b 	tsteq	r5, fp, lsl #22
     8a8:	18000013 	stmdane	r0, {r0, r1, r4}
     8ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8b4:	0b381349 	bleq	e055e0 <__bss_end+0xdefab0>
     8b8:	0d190000 	ldceq	0, cr0, [r9, #-0]
     8bc:	3a0e0300 	bcc	3814c4 <__bss_end+0x36b994>
     8c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c4:	00053813 	andeq	r3, r5, r3, lsl r8
     8c8:	01131a00 	tsteq	r3, r0, lsl #20
     8cc:	0b0b0e03 	bleq	2c40e0 <__bss_end+0x2ae5b0>
     8d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8d4:	00001301 	andeq	r1, r0, r1, lsl #6
     8d8:	0b01131b 	bleq	4554c <__bss_end+0x2fa1c>
     8dc:	3b0b3a0b 	blcc	2cf110 <__bss_end+0x2b95e0>
     8e0:	00130105 	andseq	r0, r3, r5, lsl #2
     8e4:	01171c00 	tsteq	r7, r0, lsl #24
     8e8:	0b3a0b0b 	bleq	e8351c <__bss_end+0xe6d9ec>
     8ec:	1301053b 	movwne	r0, #5435	; 0x153b
     8f0:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
     8f4:	3a0e0300 	bcc	3814fc <__bss_end+0x36b9cc>
     8f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8fc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     900:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     904:	00001301 	andeq	r1, r0, r1, lsl #6
     908:	0300341f 	movweq	r3, #1055	; 0x41f
     90c:	3b0b3a0e 	blcc	2cf14c <__bss_end+0x2b961c>
     910:	3f134905 	svccc	0x00134905
     914:	00193c19 	andseq	r3, r9, r9, lsl ip
     918:	00342000 	eorseq	r2, r4, r0
     91c:	0b3a0e03 	bleq	e84130 <__bss_end+0xe6e600>
     920:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     924:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     928:	34210000 	strtcc	r0, [r1], #-0
     92c:	3a0e0300 	bcc	381534 <__bss_end+0x36ba04>
     930:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     934:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     938:	22000018 	andcs	r0, r0, #24
     93c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     940:	0b3b0b3a 	bleq	ec3630 <__bss_end+0xeadb00>
     944:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     948:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     94c:	3a0e0301 	bcc	381558 <__bss_end+0x36ba28>
     950:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     954:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     958:	96184006 	ldrls	r4, [r8], -r6
     95c:	13011942 	movwne	r1, #6466	; 0x1942
     960:	05240000 	streq	r0, [r4, #-0]!
     964:	3a0e0300 	bcc	38156c <__bss_end+0x36ba3c>
     968:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     96c:	00180213 	andseq	r0, r8, r3, lsl r2
     970:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
     974:	0b3a0e03 	bleq	e84188 <__bss_end+0xe6e658>
     978:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     97c:	01111349 	tsteq	r1, r9, asr #6
     980:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     984:	01194296 			; <UNDEFINED> instruction: 0x01194296
     988:	26000013 			; <UNDEFINED> instruction: 0x26000013
     98c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     990:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     994:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     998:	0b270000 	bleq	9c09a0 <__bss_end+0x9aae70>
     99c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9a0:	28000006 	stmdacs	r0, {r1, r2}
     9a4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     9a8:	0b3a0e03 	bleq	e841bc <__bss_end+0xe6e68c>
     9ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9b8:	29000019 	stmdbcs	r0, {r0, r3, r4}
     9bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9c0:	0b3a0e03 	bleq	e841d4 <__bss_end+0xe6e6a4>
     9c4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9c8:	01111349 	tsteq	r1, r9, asr #6
     9cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     9d4:	2a000013 	bcs	a28 <_start-0x75d8>
     9d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9dc:	0b3a0e03 	bleq	e841f0 <__bss_end+0xe6e6c0>
     9e0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9ec:	00130119 	andseq	r0, r3, r9, lsl r1
     9f0:	012e2b00 			; <UNDEFINED> instruction: 0x012e2b00
     9f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     9f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9fc:	01111927 	tsteq	r1, r7, lsr #18
     a00:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a04:	01194296 			; <UNDEFINED> instruction: 0x01194296
     a08:	2c000013 	stccs	0, cr0, [r0], {19}
     a0c:	0111010b 	tsteq	r1, fp, lsl #2
     a10:	13010612 	movwne	r0, #5650	; 0x1612
     a14:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
     a18:	03193f00 	tsteq	r9, #0, 30
     a1c:	3b0b3a0e 	blcc	2cf25c <__bss_end+0x2b972c>
     a20:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a24:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a28:	97184006 	ldrls	r4, [r8, -r6]
     a2c:	00001942 	andeq	r1, r0, r2, asr #18
     a30:	3f012e2e 	svccc	0x00012e2e
     a34:	3a0e0319 	bcc	3816a0 <__bss_end+0x36bb70>
     a38:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a3c:	11134919 	tstne	r3, r9, lsl r9
     a40:	40061201 	andmi	r1, r6, r1, lsl #4
     a44:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a48:	00001301 	andeq	r1, r0, r1, lsl #6
     a4c:	3f002e2f 	svccc	0x00002e2f
     a50:	3a0e0319 	bcc	3816bc <__bss_end+0x36bb8c>
     a54:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a58:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a5c:	96184006 	ldrls	r4, [r8], -r6
     a60:	00001942 	andeq	r1, r0, r2, asr #18
     a64:	01110100 	tsteq	r1, r0, lsl #2
     a68:	0b130e25 	bleq	4c4304 <__bss_end+0x4ae7d4>
     a6c:	01110e03 	tsteq	r1, r3, lsl #28
     a70:	17100612 			; <UNDEFINED> instruction: 0x17100612
     a74:	16020000 	strne	r0, [r2], -r0
     a78:	3a0e0300 	bcc	381680 <__bss_end+0x36bb50>
     a7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a80:	03000013 	movweq	r0, #19
     a84:	0b0b000f 	bleq	2c0ac8 <__bss_end+0x2aaf98>
     a88:	00001349 	andeq	r1, r0, r9, asr #6
     a8c:	27011504 	strcs	r1, [r1, -r4, lsl #10]
     a90:	00130119 	andseq	r0, r3, r9, lsl r1
     a94:	00050500 	andeq	r0, r5, r0, lsl #10
     a98:	00001349 	andeq	r1, r0, r9, asr #6
     a9c:	0b002406 	bleq	9abc <__module_entries_end+0x1a18>
     aa0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     aa4:	0700000e 	streq	r0, [r0, -lr]
     aa8:	13490026 	movtne	r0, #36902	; 0x9026
     aac:	0f080000 	svceq	0x00080000
     ab0:	000b0b00 	andeq	r0, fp, r0, lsl #22
     ab4:	01130900 	tsteq	r3, r0, lsl #18
     ab8:	0b3a0b0b 	bleq	e836ec <__bss_end+0xe6dbbc>
     abc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ac0:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     ac4:	3a0e0300 	bcc	3816cc <__bss_end+0x36bb9c>
     ac8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     acc:	000b3813 	andeq	r3, fp, r3, lsl r8
     ad0:	01010b00 	tsteq	r1, r0, lsl #22
     ad4:	13011349 	movwne	r1, #4937	; 0x1349
     ad8:	210c0000 	mrscs	r0, (UNDEF: 12)
     adc:	2f134900 	svccs	0x00134900
     ae0:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     ae4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ae8:	0b3b0b3a 	bleq	ec37d8 <__bss_end+0xeadca8>
     aec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     af0:	350e0000 	strcc	r0, [lr, #-0]
     af4:	00134900 	andseq	r4, r3, r0, lsl #18
     af8:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
     afc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b00:	0b3b0b3a 	bleq	ec37f0 <__bss_end+0xeadcc0>
     b04:	01111927 	tsteq	r1, r7, lsr #18
     b08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b0c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b10:	10000013 	andne	r0, r0, r3, lsl r0
     b14:	08030005 	stmdaeq	r3, {r0, r2}
     b18:	0b3b0b3a 	bleq	ec3808 <__bss_end+0xeadcd8>
     b1c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b20:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     b24:	03193f01 	tsteq	r9, #1, 30
     b28:	3b0b3a0e 	blcc	2cf368 <__bss_end+0x2b9838>
     b2c:	1119270b 	tstne	r9, fp, lsl #14
     b30:	40061201 	andmi	r1, r6, r1, lsl #4
     b34:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b38:	00001301 	andeq	r1, r0, r1, lsl #6
     b3c:	03000512 	movweq	r0, #1298	; 0x512
     b40:	3b0b3a0e 	blcc	2cf380 <__bss_end+0x2b9850>
     b44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b48:	13000018 	movwne	r0, #24
     b4c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     b50:	0b3a0e03 	bleq	e84364 <__bss_end+0xe6e834>
     b54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b58:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b5c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b60:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
     b64:	0e03012e 	adfeqsp	f0, f3, #0.5
     b68:	0b3b0b3a 	bleq	ec3858 <__bss_end+0xeadd28>
     b6c:	01111927 	tsteq	r1, r7, lsr #18
     b70:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b74:	00194296 	mulseq	r9, r6, r2
     b78:	010b1500 	tsteq	fp, r0, lsl #10
     b7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b80:	34160000 	ldrcc	r0, [r6], #-0
     b84:	3a080300 	bcc	20178c <__bss_end+0x1ebc5c>
     b88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b8c:	00180213 	andseq	r0, r8, r3, lsl r2
     b90:	11010000 	mrsne	r0, (UNDEF: 1)
     b94:	130e2501 	movwne	r2, #58625	; 0xe501
     b98:	110e030b 	tstne	lr, fp, lsl #6
     b9c:	10061201 	andne	r1, r6, r1, lsl #4
     ba0:	02000017 	andeq	r0, r0, #23
     ba4:	0e030104 	adfeqs	f0, f3, f4
     ba8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     bac:	0b3b0b3a 	bleq	ec389c <__bss_end+0xeadd6c>
     bb0:	00001301 	andeq	r1, r0, r1, lsl #6
     bb4:	03002803 	movweq	r2, #2051	; 0x803
     bb8:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     bbc:	00240400 	eoreq	r0, r4, r0, lsl #8
     bc0:	0b3e0b0b 	bleq	f837f4 <__bss_end+0xf6dcc4>
     bc4:	00000e03 	andeq	r0, r0, r3, lsl #28
     bc8:	0b011305 	bleq	457e4 <__bss_end+0x2fcb4>
     bcc:	3b0b3a0b 	blcc	2cf400 <__bss_end+0x2b98d0>
     bd0:	0013010b 	andseq	r0, r3, fp, lsl #2
     bd4:	000d0600 	andeq	r0, sp, r0, lsl #12
     bd8:	0b3a0e03 	bleq	e843ec <__bss_end+0xe6e8bc>
     bdc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     be0:	00000b38 	andeq	r0, r0, r8, lsr fp
     be4:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
     be8:	00130113 	andseq	r0, r3, r3, lsl r1
     bec:	00210800 	eoreq	r0, r1, r0, lsl #16
     bf0:	0b2f1349 	bleq	bc591c <__bss_end+0xbafdec>
     bf4:	16090000 	strne	r0, [r9], -r0
     bf8:	3a0e0300 	bcc	381800 <__bss_end+0x36bcd0>
     bfc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c00:	0a000013 	beq	c54 <_start-0x73ac>
     c04:	13490035 	movtne	r0, #36917	; 0x9035
     c08:	340b0000 	strcc	r0, [fp], #-0
     c0c:	3a0e0300 	bcc	381814 <__bss_end+0x36bce4>
     c10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c14:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     c18:	0c000018 	stceq	0, cr0, [r0], {24}
     c1c:	0b0b000f 	bleq	2c0c60 <__bss_end+0x2ab130>
     c20:	00001349 	andeq	r1, r0, r9, asr #6
     c24:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
     c28:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     c2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c30:	0b3a0e03 	bleq	e84444 <__bss_end+0xe6e914>
     c34:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c38:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c3c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c40:	00130119 	andseq	r0, r3, r9, lsl r1
     c44:	00050f00 	andeq	r0, r5, r0, lsl #30
     c48:	0b3a0e03 	bleq	e8445c <__bss_end+0xe6e92c>
     c4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c50:	00001802 	andeq	r1, r0, r2, lsl #16
     c54:	03003410 	movweq	r3, #1040	; 0x410
     c58:	3b0b3a0e 	blcc	2cf498 <__bss_end+0x2b9968>
     c5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c60:	11000018 	tstne	r0, r8, lsl r0
     c64:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c68:	0b3a0e03 	bleq	e8447c <__bss_end+0xe6e94c>
     c6c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c70:	01111349 	tsteq	r1, r9, asr #6
     c74:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c78:	01194297 			; <UNDEFINED> instruction: 0x01194297
     c7c:	12000013 	andne	r0, r0, #19
     c80:	0b0b0024 	bleq	2c0d18 <__bss_end+0x2ab1e8>
     c84:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     c88:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     c8c:	03193f01 	tsteq	r9, #1, 30
     c90:	3b0b3a0e 	blcc	2cf4d0 <__bss_end+0x2b99a0>
     c94:	1119270b 	tstne	r9, fp, lsl #14
     c98:	40061201 	andmi	r1, r6, r1, lsl #4
     c9c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     ca0:	00001301 	andeq	r1, r0, r1, lsl #6
     ca4:	03000514 	movweq	r0, #1300	; 0x514
     ca8:	3b0b3a08 	blcc	2cf4d0 <__bss_end+0x2b99a0>
     cac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cb0:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
     cb4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     cb8:	0b3a0e03 	bleq	e844cc <__bss_end+0xe6e99c>
     cbc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     cc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cc4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     cc8:	16000019 			; <UNDEFINED> instruction: 0x16000019
     ccc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     cd0:	0b3b0b3a 	bleq	ec39c0 <__bss_end+0xeade90>
     cd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     cd8:	01000000 	mrseq	r0, (UNDEF: 0)
     cdc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ce0:	0e030b13 	vmoveq.32	d3[0], r0
     ce4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ce8:	00001710 	andeq	r1, r0, r0, lsl r7
     cec:	03001602 	movweq	r1, #1538	; 0x602
     cf0:	3b0b3a0e 	blcc	2cf530 <__bss_end+0x2b9a00>
     cf4:	0013490b 	andseq	r4, r3, fp, lsl #18
     cf8:	00260300 	eoreq	r0, r6, r0, lsl #6
     cfc:	00001349 	andeq	r1, r0, r9, asr #6
     d00:	0b002404 	bleq	9d18 <__module_entries_end+0x1c74>
     d04:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     d08:	0500000e 	streq	r0, [r0, #-14]
     d0c:	0b0b0024 	bleq	2c0da4 <__bss_end+0x2ab274>
     d10:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     d14:	16060000 	strne	r0, [r6], -r0
     d18:	3a0e0300 	bcc	381920 <__bss_end+0x36bdf0>
     d1c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d20:	07000013 	smladeq	r0, r3, r0, r0
     d24:	0b0b0117 	bleq	2c1188 <__bss_end+0x2ab658>
     d28:	0b3b0b3a 	bleq	ec3a18 <__bss_end+0xeadee8>
     d2c:	00001301 	andeq	r1, r0, r1, lsl #6
     d30:	03000d08 	movweq	r0, #3336	; 0xd08
     d34:	3b0b3a0e 	blcc	2cf574 <__bss_end+0x2b9a44>
     d38:	0013490b 	andseq	r4, r3, fp, lsl #18
     d3c:	01010900 	tsteq	r1, r0, lsl #18
     d40:	13011349 	movwne	r1, #4937	; 0x1349
     d44:	210a0000 	mrscs	r0, (UNDEF: 10)
     d48:	2f134900 	svccs	0x00134900
     d4c:	0b00000b 	bleq	d80 <_start-0x7280>
     d50:	0b0b0113 	bleq	2c11a4 <__bss_end+0x2ab674>
     d54:	0b3b0b3a 	bleq	ec3a44 <__bss_end+0xeadf14>
     d58:	00001301 	andeq	r1, r0, r1, lsl #6
     d5c:	03000d0c 	movweq	r0, #3340	; 0xd0c
     d60:	3b0b3a0e 	blcc	2cf5a0 <__bss_end+0x2b9a70>
     d64:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d68:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     d6c:	0b0b000f 	bleq	2c0db0 <__bss_end+0x2ab280>
     d70:	0f0e0000 	svceq	0x000e0000
     d74:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     d78:	0f000013 	svceq	0x00000013
     d7c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     d80:	0b3a0b0b 	bleq	e839b4 <__bss_end+0xe6de84>
     d84:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     d88:	0d100000 	ldceq	0, cr0, [r0, #-0]
     d8c:	3a080300 	bcc	201994 <__bss_end+0x1ebe64>
     d90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d94:	000b3813 	andeq	r3, fp, r3, lsl r8
     d98:	01131100 	tsteq	r3, r0, lsl #2
     d9c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     da0:	0b3b0b3a 	bleq	ec3a90 <__bss_end+0xeadf60>
     da4:	00001301 	andeq	r1, r0, r1, lsl #6
     da8:	03000d12 	movweq	r0, #3346	; 0xd12
     dac:	3b0b3a0e 	blcc	2cf5ec <__bss_end+0x2b9abc>
     db0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     db4:	13000005 	movwne	r0, #5
     db8:	19270015 	stmdbne	r7!, {r0, r2, r4}
     dbc:	15140000 	ldrne	r0, [r4, #-0]
     dc0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     dc4:	00130113 	andseq	r0, r3, r3, lsl r1
     dc8:	00051500 	andeq	r1, r5, r0, lsl #10
     dcc:	00001349 	andeq	r1, r0, r9, asr #6
     dd0:	03011316 	movweq	r1, #4886	; 0x1316
     dd4:	3a050b0e 	bcc	143a14 <__bss_end+0x12dee4>
     dd8:	01053b0b 	tsteq	r5, fp, lsl #22
     ddc:	17000013 	smladne	r0, r3, r0, r0
     de0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     de4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     de8:	0b381349 	bleq	e05b14 <__bss_end+0xdeffe4>
     dec:	0d180000 	ldceq	0, cr0, [r8, #-0]
     df0:	3a0e0300 	bcc	3819f8 <__bss_end+0x36bec8>
     df4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     df8:	00053813 	andeq	r3, r5, r3, lsl r8
     dfc:	01131900 	tsteq	r3, r0, lsl #18
     e00:	0b0b0e03 	bleq	2c4614 <__bss_end+0x2aeae4>
     e04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e08:	00001301 	andeq	r1, r0, r1, lsl #6
     e0c:	0b01131a 	bleq	45a7c <__bss_end+0x2ff4c>
     e10:	3b0b3a0b 	blcc	2cf644 <__bss_end+0x2b9b14>
     e14:	00130105 	andseq	r0, r3, r5, lsl #2
     e18:	01171b00 	tsteq	r7, r0, lsl #22
     e1c:	0b3a0b0b 	bleq	e83a50 <__bss_end+0xe6df20>
     e20:	1301053b 	movwne	r0, #5435	; 0x153b
     e24:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     e28:	3a0e0300 	bcc	381a30 <__bss_end+0x36bf00>
     e2c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e30:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     e34:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     e38:	00001301 	andeq	r1, r0, r1, lsl #6
     e3c:	0300341e 	movweq	r3, #1054	; 0x41e
     e40:	3b0b3a0e 	blcc	2cf680 <__bss_end+0x2b9b50>
     e44:	3f134905 	svccc	0x00134905
     e48:	00193c19 	andseq	r3, r9, r9, lsl ip
     e4c:	00341f00 	eorseq	r1, r4, r0, lsl #30
     e50:	0b3a0e03 	bleq	e84664 <__bss_end+0xe6eb34>
     e54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e58:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e5c:	17200000 	strne	r0, [r0, -r0]!
     e60:	0b0e0301 	bleq	381a6c <__bss_end+0x36bf3c>
     e64:	3b0b3a05 	blcc	2cf680 <__bss_end+0x2b9b50>
     e68:	0013010b 	andseq	r0, r3, fp, lsl #2
     e6c:	00352100 	eorseq	r2, r5, r0, lsl #2
     e70:	00001349 	andeq	r1, r0, r9, asr #6
     e74:	49002122 	stmdbmi	r0, {r1, r5, r8, sp}
     e78:	00052f13 	andeq	r2, r5, r3, lsl pc
     e7c:	00342300 	eorseq	r2, r4, r0, lsl #6
     e80:	0b3a0e03 	bleq	e84694 <__bss_end+0xe6eb64>
     e84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e88:	00001802 	andeq	r1, r0, r2, lsl #16
     e8c:	03003424 	movweq	r3, #1060	; 0x424
     e90:	3b0b3a0e 	blcc	2cf6d0 <__bss_end+0x2b9ba0>
     e94:	3f13490b 	svccc	0x0013490b
     e98:	00180219 	andseq	r0, r8, r9, lsl r2
     e9c:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
     ea0:	0b3a0e03 	bleq	e846b4 <__bss_end+0xe6eb84>
     ea4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     ea8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     eac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     eb0:	00130119 	andseq	r0, r3, r9, lsl r1
     eb4:	00052600 	andeq	r2, r5, r0, lsl #12
     eb8:	0b3a0e03 	bleq	e846cc <__bss_end+0xe6eb9c>
     ebc:	1349053b 	movtne	r0, #38203	; 0x953b
     ec0:	00001802 	andeq	r1, r0, r2, lsl #16
     ec4:	03003427 	movweq	r3, #1063	; 0x427
     ec8:	3b0b3a0e 	blcc	2cf708 <__bss_end+0x2b9bd8>
     ecc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ed0:	28000018 	stmdacs	r0, {r3, r4}
     ed4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     ed8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     edc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ee0:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
     ee4:	03193f00 	tsteq	r9, #0, 30
     ee8:	3b0b3a0e 	blcc	2cf728 <__bss_end+0x2b9bf8>
     eec:	11192705 	tstne	r9, r5, lsl #14
     ef0:	40061201 	andmi	r1, r6, r1, lsl #4
     ef4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ef8:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     efc:	03193f00 	tsteq	r9, #0, 30
     f00:	3b0b3a0e 	blcc	2cf740 <__bss_end+0x2b9c10>
     f04:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     f08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f0c:	97184006 	ldrls	r4, [r8, -r6]
     f10:	00001942 	andeq	r1, r0, r2, asr #18
     f14:	3f012e2b 	svccc	0x00012e2b
     f18:	3a0e0319 	bcc	381b84 <__bss_end+0x36c054>
     f1c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f20:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     f24:	96184006 	ldrls	r4, [r8], -r6
     f28:	13011942 	movwne	r1, #6466	; 0x1942
     f2c:	052c0000 	streq	r0, [ip, #-0]!
     f30:	3a080300 	bcc	201b38 <__bss_end+0x1ec008>
     f34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f38:	00180213 	andseq	r0, r8, r3, lsl r2
     f3c:	00342d00 	eorseq	r2, r4, r0, lsl #26
     f40:	0b3a0803 	bleq	e82f54 <__bss_end+0xe6d424>
     f44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f48:	00001802 	andeq	r1, r0, r2, lsl #16
     f4c:	3f012e2e 	svccc	0x00012e2e
     f50:	3a0e0319 	bcc	381bbc <__bss_end+0x36c08c>
     f54:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f58:	11134919 	tstne	r3, r9, lsl r9
     f5c:	40061201 	andmi	r1, r6, r1, lsl #4
     f60:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     f64:	052f0000 	streq	r0, [pc, #-0]!	; f6c <_start-0x7094>
     f68:	3a0e0300 	bcc	381b70 <__bss_end+0x36c040>
     f6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f70:	00180213 	andseq	r0, r8, r3, lsl r2
     f74:	11010000 	mrsne	r0, (UNDEF: 1)
     f78:	130e2501 	movwne	r2, #58625	; 0xe501
     f7c:	110e030b 	tstne	lr, fp, lsl #6
     f80:	10061201 	andne	r1, r6, r1, lsl #4
     f84:	02000017 	andeq	r0, r0, #23
     f88:	0b0b0024 	bleq	2c1020 <__bss_end+0x2ab4f0>
     f8c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     f90:	24030000 	strcs	r0, [r3], #-0
     f94:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f98:	000e030b 	andeq	r0, lr, fp, lsl #6
     f9c:	000f0400 	andeq	r0, pc, r0, lsl #8
     fa0:	00000b0b 	andeq	r0, r0, fp, lsl #22
     fa4:	3f002e05 	svccc	0x00002e05
     fa8:	3a0e0319 	bcc	381c14 <__bss_end+0x36c0e4>
     fac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     fb0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     fb4:	96184006 	ldrls	r4, [r8], -r6
     fb8:	00001942 	andeq	r1, r0, r2, asr #18
     fbc:	3f012e06 	svccc	0x00012e06
     fc0:	3a0e0319 	bcc	381c2c <__bss_end+0x36c0fc>
     fc4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     fc8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     fcc:	96184006 	ldrls	r4, [r8], -r6
     fd0:	13011942 	movwne	r1, #6466	; 0x1942
     fd4:	05070000 	streq	r0, [r7, #-0]
     fd8:	3a0e0300 	bcc	381be0 <__bss_end+0x36c0b0>
     fdc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe0:	00180213 	andseq	r0, r8, r3, lsl r2
     fe4:	00340800 	eorseq	r0, r4, r0, lsl #16
     fe8:	0b3a0803 	bleq	e82ffc <__bss_end+0xe6d4cc>
     fec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ff0:	00001802 	andeq	r1, r0, r2, lsl #16
     ff4:	3f012e09 	svccc	0x00012e09
     ff8:	3a0e0319 	bcc	381c64 <__bss_end+0x36c134>
     ffc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1000:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1004:	96184006 	ldrls	r4, [r8], -r6
    1008:	00001942 	andeq	r1, r0, r2, asr #18
    100c:	01110100 	tsteq	r1, r0, lsl #2
    1010:	0b130e25 	bleq	4c48ac <__bss_end+0x4aed7c>
    1014:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1018:	06120111 			; <UNDEFINED> instruction: 0x06120111
    101c:	00001710 	andeq	r1, r0, r0, lsl r7
    1020:	0b002402 	bleq	a030 <__module_entries_end+0x1f8c>
    1024:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1028:	03000008 	movweq	r0, #8
    102c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1030:	0b3b0b3a 	bleq	ec3d20 <__bss_end+0xeae1f0>
    1034:	00001349 	andeq	r1, r0, r9, asr #6
    1038:	0b002404 	bleq	a050 <__module_entries_end+0x1fac>
    103c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1040:	0500000e 	streq	r0, [r0, #-14]
    1044:	13490026 	movtne	r0, #36902	; 0x9026
    1048:	16060000 	strne	r0, [r6], -r0
    104c:	3a0e0300 	bcc	381c54 <__bss_end+0x36c124>
    1050:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1054:	07000013 	smladeq	r0, r3, r0, r0
    1058:	0b0b0117 	bleq	2c14bc <__bss_end+0x2ab98c>
    105c:	0b3b0b3a 	bleq	ec3d4c <__bss_end+0xeae21c>
    1060:	00001301 	andeq	r1, r0, r1, lsl #6
    1064:	03000d08 	movweq	r0, #3336	; 0xd08
    1068:	3b0b3a0e 	blcc	2cf8a8 <__bss_end+0x2b9d78>
    106c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1070:	01010900 	tsteq	r1, r0, lsl #18
    1074:	13011349 	movwne	r1, #4937	; 0x1349
    1078:	210a0000 	mrscs	r0, (UNDEF: 10)
    107c:	2f134900 	svccs	0x00134900
    1080:	0b00000b 	bleq	10b4 <_start-0x6f4c>
    1084:	0b0b0113 	bleq	2c14d8 <__bss_end+0x2ab9a8>
    1088:	0b3b0b3a 	bleq	ec3d78 <__bss_end+0xeae248>
    108c:	00001301 	andeq	r1, r0, r1, lsl #6
    1090:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1094:	3b0b3a0e 	blcc	2cf8d4 <__bss_end+0x2b9da4>
    1098:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    109c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    10a0:	0b0b000f 	bleq	2c10e4 <__bss_end+0x2ab5b4>
    10a4:	370e0000 	strcc	r0, [lr, -r0]
    10a8:	00134900 	andseq	r4, r3, r0, lsl #18
    10ac:	000f0f00 	andeq	r0, pc, r0, lsl #30
    10b0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    10b4:	13100000 	tstne	r0, #0
    10b8:	0b0e0301 	bleq	381cc4 <__bss_end+0x36c194>
    10bc:	3b0b3a0b 	blcc	2cf8f0 <__bss_end+0x2b9dc0>
    10c0:	0013010b 	andseq	r0, r3, fp, lsl #2
    10c4:	000d1100 	andeq	r1, sp, r0, lsl #2
    10c8:	0b3a0803 	bleq	e830dc <__bss_end+0xe6d5ac>
    10cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10d0:	00000b38 	andeq	r0, r0, r8, lsr fp
    10d4:	03011312 	movweq	r1, #4882	; 0x1312
    10d8:	3a050b0e 	bcc	143d18 <__bss_end+0x12e1e8>
    10dc:	010b3b0b 	tsteq	fp, fp, lsl #22
    10e0:	13000013 	movwne	r0, #19
    10e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    10e8:	0b3b0b3a 	bleq	ec3dd8 <__bss_end+0xeae2a8>
    10ec:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    10f0:	15140000 	ldrne	r0, [r4, #-0]
    10f4:	00192700 	andseq	r2, r9, r0, lsl #14
    10f8:	01151500 	tsteq	r5, r0, lsl #10
    10fc:	13491927 	movtne	r1, #39207	; 0x9927
    1100:	00001301 	andeq	r1, r0, r1, lsl #6
    1104:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
    1108:	17000013 	smladne	r0, r3, r0, r0
    110c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1110:	0b3a050b 	bleq	e82544 <__bss_end+0xe6ca14>
    1114:	1301053b 	movwne	r0, #5435	; 0x153b
    1118:	0d180000 	ldceq	0, cr0, [r8, #-0]
    111c:	3a0e0300 	bcc	381d24 <__bss_end+0x36c1f4>
    1120:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1124:	000b3813 	andeq	r3, fp, r3, lsl r8
    1128:	000d1900 	andeq	r1, sp, r0, lsl #18
    112c:	0b3a0e03 	bleq	e84940 <__bss_end+0xe6ee10>
    1130:	1349053b 	movtne	r0, #38203	; 0x953b
    1134:	00000538 	andeq	r0, r0, r8, lsr r5
    1138:	0301131a 	movweq	r1, #4890	; 0x131a
    113c:	3a0b0b0e 	bcc	2c3d7c <__bss_end+0x2ae24c>
    1140:	01053b0b 	tsteq	r5, fp, lsl #22
    1144:	1b000013 	blne	1198 <_start-0x6e68>
    1148:	0b0b0113 	bleq	2c159c <__bss_end+0x2aba6c>
    114c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1150:	00001301 	andeq	r1, r0, r1, lsl #6
    1154:	0b01171c 	bleq	46dcc <__bss_end+0x3129c>
    1158:	3b0b3a0b 	blcc	2cf98c <__bss_end+0x2b9e5c>
    115c:	00130105 	andseq	r0, r3, r5, lsl #2
    1160:	000d1d00 	andeq	r1, sp, r0, lsl #26
    1164:	0b3a0e03 	bleq	e84978 <__bss_end+0xe6ee48>
    1168:	1349053b 	movtne	r0, #38203	; 0x953b
    116c:	151e0000 	ldrne	r0, [lr, #-0]
    1170:	01192701 	tsteq	r9, r1, lsl #14
    1174:	1f000013 	svcne	0x00000013
    1178:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    117c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1180:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1184:	0000193c 	andeq	r1, r0, ip, lsr r9
    1188:	3f012e20 	svccc	0x00012e20
    118c:	3a0e0319 	bcc	381df8 <__bss_end+0x36c2c8>
    1190:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1194:	11134919 	tstne	r3, r9, lsl r9
    1198:	40061201 	andmi	r1, r6, r1, lsl #4
    119c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    11a0:	00001301 	andeq	r1, r0, r1, lsl #6
    11a4:	03000521 	movweq	r0, #1313	; 0x521
    11a8:	3b0b3a0e 	blcc	2cf9e8 <__bss_end+0x2b9eb8>
    11ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    11b0:	22000018 	andcs	r0, r0, #24
    11b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    11b8:	0b3b0b3a 	bleq	ec3ea8 <__bss_end+0xeae378>
    11bc:	17021349 	strne	r1, [r2, -r9, asr #6]
    11c0:	34230000 	strtcc	r0, [r3], #-0
    11c4:	3a080300 	bcc	201dcc <__bss_end+0x1ec29c>
    11c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11cc:	00170213 	andseq	r0, r7, r3, lsl r2
    11d0:	00342400 	eorseq	r2, r4, r0, lsl #8
    11d4:	0b3a0e03 	bleq	e849e8 <__bss_end+0xe6eeb8>
    11d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11dc:	00001702 	andeq	r1, r0, r2, lsl #14
    11e0:	00002625 	andeq	r2, r0, r5, lsr #12
    11e4:	11010000 	mrsne	r0, (UNDEF: 1)
    11e8:	130e2501 	movwne	r2, #58625	; 0xe501
    11ec:	1b0e030b 	blne	381e20 <__bss_end+0x36c2f0>
    11f0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    11f4:	00171006 	andseq	r1, r7, r6
    11f8:	00240200 	eoreq	r0, r4, r0, lsl #4
    11fc:	0b3e0b0b 	bleq	f83e30 <__bss_end+0xf6e300>
    1200:	00000803 	andeq	r0, r0, r3, lsl #16
    1204:	03001603 	movweq	r1, #1539	; 0x603
    1208:	3b0b3a0e 	blcc	2cfa48 <__bss_end+0x2b9f18>
    120c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1210:	00240400 	eoreq	r0, r4, r0, lsl #8
    1214:	0b3e0b0b 	bleq	f83e48 <__bss_end+0xf6e318>
    1218:	00000e03 	andeq	r0, r0, r3, lsl #28
    121c:	03001605 	movweq	r1, #1541	; 0x605
    1220:	3b0b3a0e 	blcc	2cfa60 <__bss_end+0x2b9f30>
    1224:	00134905 	andseq	r4, r3, r5, lsl #18
    1228:	01170600 	tsteq	r7, r0, lsl #12
    122c:	0b3a0b0b 	bleq	e83e60 <__bss_end+0xe6e330>
    1230:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1234:	0d070000 	stceq	0, cr0, [r7, #-0]
    1238:	3a0e0300 	bcc	381e40 <__bss_end+0x36c310>
    123c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1240:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1244:	13490101 	movtne	r0, #37121	; 0x9101
    1248:	00001301 	andeq	r1, r0, r1, lsl #6
    124c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    1250:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1254:	01130a00 	tsteq	r3, r0, lsl #20
    1258:	0b3a0b0b 	bleq	e83e8c <__bss_end+0xe6e35c>
    125c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1260:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1264:	3a0e0300 	bcc	381e6c <__bss_end+0x36c33c>
    1268:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    126c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1270:	000f0c00 	andeq	r0, pc, r0, lsl #24
    1274:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1278:	0b000f0d 	bleq	4eb4 <_start-0x314c>
    127c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1280:	00260e00 	eoreq	r0, r6, r0, lsl #28
    1284:	00001349 	andeq	r1, r0, r9, asr #6
    1288:	0301130f 	movweq	r1, #4879	; 0x130f
    128c:	3a0b0b0e 	bcc	2c3ecc <__bss_end+0x2ae39c>
    1290:	010b3b0b 	tsteq	fp, fp, lsl #22
    1294:	10000013 	andne	r0, r0, r3, lsl r0
    1298:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    129c:	0b3b0b3a 	bleq	ec3f8c <__bss_end+0xeae45c>
    12a0:	0b381349 	bleq	e05fcc <__bss_end+0xdf049c>
    12a4:	13110000 	tstne	r1, #0
    12a8:	0b0e0301 	bleq	381eb4 <__bss_end+0x36c384>
    12ac:	3b0b3a05 	blcc	2cfac8 <__bss_end+0x2b9f98>
    12b0:	0013010b 	andseq	r0, r3, fp, lsl #2
    12b4:	000d1200 	andeq	r1, sp, r0, lsl #4
    12b8:	0b3a0e03 	bleq	e84acc <__bss_end+0xe6ef9c>
    12bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12c0:	00000538 	andeq	r0, r0, r8, lsr r5
    12c4:	27001513 	smladcs	r0, r3, r5, r1
    12c8:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
    12cc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    12d0:	13011349 	movwne	r1, #4937	; 0x1349
    12d4:	05150000 	ldreq	r0, [r5, #-0]
    12d8:	00134900 	andseq	r4, r3, r0, lsl #18
    12dc:	01131600 	tsteq	r3, r0, lsl #12
    12e0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    12e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    12e8:	00001301 	andeq	r1, r0, r1, lsl #6
    12ec:	03000d17 	movweq	r0, #3351	; 0xd17
    12f0:	3b0b3a0e 	blcc	2cfb30 <__bss_end+0x2ba000>
    12f4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    12f8:	1800000b 	stmdane	r0, {r0, r1, r3}
    12fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1300:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1304:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1308:	13190000 	tstne	r9, #0
    130c:	0b0e0301 	bleq	381f18 <__bss_end+0x36c3e8>
    1310:	3b0b3a0b 	blcc	2cfb44 <__bss_end+0x2ba014>
    1314:	00130105 	andseq	r0, r3, r5, lsl #2
    1318:	01131a00 	tsteq	r3, r0, lsl #20
    131c:	0b3a0b0b 	bleq	e83f50 <__bss_end+0xe6e420>
    1320:	1301053b 	movwne	r0, #5435	; 0x153b
    1324:	171b0000 	ldrne	r0, [fp, -r0]
    1328:	3a0b0b01 	bcc	2c3f34 <__bss_end+0x2ae404>
    132c:	01053b0b 	tsteq	r5, fp, lsl #22
    1330:	1c000013 	stcne	0, cr0, [r0], {19}
    1334:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1338:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    133c:	00001349 	andeq	r1, r0, r9, asr #6
    1340:	2701151d 	smladcs	r1, sp, r5, r1
    1344:	00130119 	andseq	r0, r3, r9, lsl r1
    1348:	00341e00 	eorseq	r1, r4, r0, lsl #28
    134c:	0b3a0e03 	bleq	e84b60 <__bss_end+0xe6f030>
    1350:	1349053b 	movtne	r0, #38203	; 0x953b
    1354:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1358:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    135c:	03193f01 	tsteq	r9, #1, 30
    1360:	3b0b3a0e 	blcc	2cfba0 <__bss_end+0x2ba070>
    1364:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1368:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    136c:	97184006 	ldrls	r4, [r8, -r6]
    1370:	13011942 	movwne	r1, #6466	; 0x1942
    1374:	05200000 	streq	r0, [r0, #-0]!
    1378:	3a080300 	bcc	201f80 <__bss_end+0x1ec450>
    137c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1380:	00180213 	andseq	r0, r8, r3, lsl r2
    1384:	00052100 	andeq	r2, r5, r0, lsl #2
    1388:	0b3a0803 	bleq	e8339c <__bss_end+0xe6d86c>
    138c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1390:	00001702 	andeq	r1, r0, r2, lsl #14
    1394:	03003422 	movweq	r3, #1058	; 0x422
    1398:	3b0b3a08 	blcc	2cfbc0 <__bss_end+0x2ba090>
    139c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13a0:	23000017 	movwcs	r0, #23
    13a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    13a8:	0b3b0b3a 	bleq	ec4098 <__bss_end+0xeae568>
    13ac:	17021349 	strne	r1, [r2, -r9, asr #6]
    13b0:	01000000 	mrseq	r0, (UNDEF: 0)
    13b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    13b8:	0e030b13 	vmoveq.32	d3[0], r0
    13bc:	01110e1b 	tsteq	r1, fp, lsl lr
    13c0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    13c4:	24020000 	strcs	r0, [r2], #-0
    13c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    13cc:	0008030b 	andeq	r0, r8, fp, lsl #6
    13d0:	00160300 	andseq	r0, r6, r0, lsl #6
    13d4:	0b3a0e03 	bleq	e84be8 <__bss_end+0xe6f0b8>
    13d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13dc:	24040000 	strcs	r0, [r4], #-0
    13e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    13e4:	000e030b 	andeq	r0, lr, fp, lsl #6
    13e8:	00260500 	eoreq	r0, r6, r0, lsl #10
    13ec:	00001349 	andeq	r1, r0, r9, asr #6
    13f0:	03001606 	movweq	r1, #1542	; 0x606
    13f4:	3b0b3a0e 	blcc	2cfc34 <__bss_end+0x2ba104>
    13f8:	00134905 	andseq	r4, r3, r5, lsl #18
    13fc:	01170700 	tsteq	r7, r0, lsl #14
    1400:	0b3a0b0b 	bleq	e84034 <__bss_end+0xe6e504>
    1404:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1408:	0d080000 	stceq	0, cr0, [r8, #-0]
    140c:	3a0e0300 	bcc	382014 <__bss_end+0x36c4e4>
    1410:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1414:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1418:	13490101 	movtne	r0, #37121	; 0x9101
    141c:	00001301 	andeq	r1, r0, r1, lsl #6
    1420:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    1424:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1428:	01130b00 	tsteq	r3, r0, lsl #22
    142c:	0b3a0b0b 	bleq	e84060 <__bss_end+0xe6e530>
    1430:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1434:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1438:	3a0e0300 	bcc	382040 <__bss_end+0x36c510>
    143c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1440:	000b3813 	andeq	r3, fp, r3, lsl r8
    1444:	000f0d00 	andeq	r0, pc, r0, lsl #26
    1448:	00000b0b 	andeq	r0, r0, fp, lsl #22
    144c:	0b000f0e 	bleq	508c <_start-0x2f74>
    1450:	0013490b 	andseq	r4, r3, fp, lsl #18
    1454:	00370f00 	eorseq	r0, r7, r0, lsl #30
    1458:	00001349 	andeq	r1, r0, r9, asr #6
    145c:	03011310 	movweq	r1, #4880	; 0x1310
    1460:	3a0b0b0e 	bcc	2c40a0 <__bss_end+0x2ae570>
    1464:	010b3b0b 	tsteq	fp, fp, lsl #22
    1468:	11000013 	tstne	r0, r3, lsl r0
    146c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1470:	0b3b0b3a 	bleq	ec4160 <__bss_end+0xeae630>
    1474:	0b381349 	bleq	e061a0 <__bss_end+0xdf0670>
    1478:	13120000 	tstne	r2, #0
    147c:	0b0e0301 	bleq	382088 <__bss_end+0x36c558>
    1480:	3b0b3a05 	blcc	2cfc9c <__bss_end+0x2ba16c>
    1484:	0013010b 	andseq	r0, r3, fp, lsl #2
    1488:	000d1300 	andeq	r1, sp, r0, lsl #6
    148c:	0b3a0e03 	bleq	e84ca0 <__bss_end+0xe6f170>
    1490:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1494:	00000538 	andeq	r0, r0, r8, lsr r5
    1498:	27001514 	smladcs	r0, r4, r5, r1
    149c:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    14a0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    14a4:	13011349 	movwne	r1, #4937	; 0x1349
    14a8:	05160000 	ldreq	r0, [r6, #-0]
    14ac:	00134900 	andseq	r4, r3, r0, lsl #18
    14b0:	01131700 	tsteq	r3, r0, lsl #14
    14b4:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    14b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14bc:	00001301 	andeq	r1, r0, r1, lsl #6
    14c0:	03000d18 	movweq	r0, #3352	; 0xd18
    14c4:	3b0b3a0e 	blcc	2cfd04 <__bss_end+0x2ba1d4>
    14c8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    14cc:	1900000b 	stmdbne	r0, {r0, r1, r3}
    14d0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14d8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    14dc:	131a0000 	tstne	sl, #0
    14e0:	0b0e0301 	bleq	3820ec <__bss_end+0x36c5bc>
    14e4:	3b0b3a0b 	blcc	2cfd18 <__bss_end+0x2ba1e8>
    14e8:	00130105 	andseq	r0, r3, r5, lsl #2
    14ec:	01131b00 	tsteq	r3, r0, lsl #22
    14f0:	0b3a0b0b 	bleq	e84124 <__bss_end+0xe6e5f4>
    14f4:	1301053b 	movwne	r0, #5435	; 0x153b
    14f8:	171c0000 	ldrne	r0, [ip, -r0]
    14fc:	3a0b0b01 	bcc	2c4108 <__bss_end+0x2ae5d8>
    1500:	01053b0b 	tsteq	r5, fp, lsl #22
    1504:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1508:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    150c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1510:	00001349 	andeq	r1, r0, r9, asr #6
    1514:	2701151e 	smladcs	r1, lr, r5, r1
    1518:	00130119 	andseq	r0, r3, r9, lsl r1
    151c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1520:	0b3a0e03 	bleq	e84d34 <__bss_end+0xe6f204>
    1524:	1349053b 	movtne	r0, #38203	; 0x953b
    1528:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    152c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1530:	03193f01 	tsteq	r9, #1, 30
    1534:	3b0b3a0e 	blcc	2cfd74 <__bss_end+0x2ba244>
    1538:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    153c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1540:	97184006 	ldrls	r4, [r8, -r6]
    1544:	13011942 	movwne	r1, #6466	; 0x1942
    1548:	05210000 	streq	r0, [r1, #-0]!
    154c:	3a0e0300 	bcc	382154 <__bss_end+0x36c624>
    1550:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1554:	00180213 	andseq	r0, r8, r3, lsl r2
    1558:	00052200 	andeq	r2, r5, r0, lsl #4
    155c:	0b3a0e03 	bleq	e84d70 <__bss_end+0xe6f240>
    1560:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1564:	00001702 	andeq	r1, r0, r2, lsl #14
    1568:	03003423 	movweq	r3, #1059	; 0x423
    156c:	3b0b3a08 	blcc	2cfd94 <__bss_end+0x2ba264>
    1570:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1574:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    1578:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    157c:	0b3b0b3a 	bleq	ec426c <__bss_end+0xeae73c>
    1580:	17021349 	strne	r1, [r2, -r9, asr #6]
    1584:	Address 0x0000000000001584 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	00000344 	andeq	r0, r0, r4, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01ff0002 	mvnseq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010344 	andeq	r0, r1, r4, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03860002 	orreq	r0, r6, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  54:	00000764 	andeq	r0, r0, r4, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	07fa0002 	ldrbeq	r0, [sl, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00010d54 	andeq	r0, r1, r4, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	128e0002 	addne	r0, lr, #2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  94:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	21bf0002 			; <UNDEFINED> instruction: 0x21bf0002
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00011ba0 	andeq	r1, r1, r0, lsr #23
  b4:	00001920 	andeq	r1, r0, r0, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	36f50002 	ldrbtcc	r0, [r5], r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000134c0 	andeq	r3, r1, r0, asr #9
  d4:	000003a0 	andeq	r0, r0, r0, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	39ac0002 	stmibcc	ip!, {r1}
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00013860 	andeq	r3, r1, r0, ror #16
  f4:	000005d8 	ldrdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	3daa0002 	stccc	0, cr0, [sl, #8]!
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00013e38 	andeq	r3, r1, r8, lsr lr
 114:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	487c0002 	ldmdami	ip!, {r1}^
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	000142fc 	strdeq	r4, [r1], -ip
 134:	00000118 	andeq	r0, r0, r8, lsl r1
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	49530002 	ldmdbmi	r3, {r1}^
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00014414 	andeq	r4, r1, r4, lsl r4
 154:	00000114 	andeq	r0, r0, r4, lsl r1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	52870002 	addpl	r0, r7, #2
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00014528 	andeq	r4, r1, r8, lsr #10
 174:	00000114 	andeq	r0, r0, r4, lsl r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	5ba20002 	blpl	fe880194 <_estack+0xf6870194>
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	0001463c 	andeq	r4, r1, ip, lsr r6
 194:	000000dc 	ldrdeq	r0, [r0], -ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000010b 	andeq	r0, r0, fp, lsl #2
       4:	00ad0002 	adceq	r0, sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6f636d2f 	svcvs	0x00636d2f
      24:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
      28:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
      2c:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
      30:	2f534f54 	svccs	0x00534f54
      34:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      38:	534f5452 	movtpl	r5, #62546	; 0xf452
      3c:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd15 <_estack+0xf7fefd15>
      40:	2f656372 	svccs	0x00656372
      44:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      48:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
      4c:	4343472f 	movtmi	r4, #14127	; 0x372f
      50:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
      54:	72656270 	rsbvc	r6, r5, #112, 4
      58:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      5c:	6f682f00 	svcvs	0x00682f00
      60:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffeb4 <_estack+0xf7fefeb4>
      64:	2f726f63 	svccs	0x00726f63
      68:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
      6c:	502f6e6e 	eorpl	r6, pc, lr, ror #28
      70:	4f545269 	svcmi	0x00545269
      74:	72462f53 	subvc	r2, r6, #332	; 0x14c
      78:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
      7c:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
      80:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
      84:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
      88:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      8c:	70000065 	andvc	r0, r0, r5, rrx
      90:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
      94:	00010063 	andeq	r0, r1, r3, rrx
      98:	6f727000 	svcvs	0x00727000
      9c:	6665646a 	strbtvs	r6, [r5], -sl, ror #8
      a0:	00682e73 	rsbeq	r2, r8, r3, ror lr
      a4:	70000002 	andvc	r0, r0, r2
      a8:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
      ac:	6f726361 	svcvs	0x00726361
      b0:	0100682e 	tsteq	r0, lr, lsr #16
      b4:	00000000 	andeq	r0, r0, r0
      b8:	00000205 	andeq	r0, r0, r5, lsl #4
      bc:	f7030001 			; <UNDEFINED> instruction: 0xf7030001
      c0:	4ebd0100 	frdmie	f0, f5, f0
      c4:	6768836e 	strbvs	r8, [r8, -lr, ror #6]!
      c8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      cc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      dc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      e0:	676a6767 	strbvs	r6, [sl, -r7, ror #14]!
      e4:	a185686a 	orrge	r6, r5, sl, ror #16
      e8:	022f686c 	eoreq	r6, pc, #108, 16	; 0x6c0000
      ec:	314d1622 	cmpcc	sp, r2, lsr #12
      f0:	4d4e2f31 	stclmi	15, cr2, [lr, #-196]	; 0xffffff3c
      f4:	9f820a03 	svcls	0x00820a03
      f8:	88673131 	stmdahi	r7!, {r0, r4, r5, r8, ip, sp}^
      fc:	4a0a036b 	bmi	280eb0 <__bss_end+0x26b380>
     100:	67676730 			; <UNDEFINED> instruction: 0x67676730
     104:	84686767 	strbthi	r6, [r8], #-1895	; 0xfffff899
     108:	0e022f4c 	cdpeq	15, 0, cr2, cr2, cr12, {2}
     10c:	a6010100 	strge	r0, [r1], -r0, lsl #2
     110:	02000000 	andeq	r0, r0, #0
     114:	00006200 	andeq	r6, r0, r0, lsl #4
     118:	fb010200 	blx	40922 <__bss_end+0x2adf2>
     11c:	01000d0e 	tsteq	r0, lr, lsl #26
     120:	00010101 	andeq	r0, r1, r1, lsl #2
     124:	00010000 	andeq	r0, r1, r0
     128:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     12c:	2f656d6f 	svccs	0x00656d6f
     130:	726f636d 	rsbvc	r6, pc, #-1275068415	; 0xb4000001
     134:	6e69742f 	cdpvs	4, 6, cr7, cr9, cr15, {1}
     138:	2f6e6e68 	svccs	0x006e6e68
     13c:	54526950 	ldrbpl	r6, [r2], #-2384	; 0xfffff6b0
     140:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     144:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     148:	2f534f54 	svccs	0x00534f54
     14c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     150:	702f6563 	eorvc	r6, pc, r3, ror #10
     154:	6174726f 	cmnvs	r4, pc, ror #4
     158:	2f656c62 	svccs	0x00656c62
     15c:	2f434347 	svccs	0x00434347
     160:	70736152 	rsbsvc	r6, r3, r2, asr r1
     164:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     168:	00695079 	rsbeq	r5, r9, r9, ror r0
     16c:	726f7000 	rsbvc	r7, pc, #0
     170:	72736974 	rsbsvc	r6, r3, #116, 18	; 0x1d0000
     174:	0100632e 	tsteq	r0, lr, lsr #6
     178:	00000000 	andeq	r0, r0, r0
     17c:	03440205 	movteq	r0, #16901	; 0x4205
     180:	f5030001 			; <UNDEFINED> instruction: 0xf5030001
     184:	a0520100 	subsge	r0, r2, r0, lsl #2
     188:	02342f2f 	eorseq	r2, r4, #47, 30	; 0xbc
     18c:	036c1324 	cmneq	ip, #36, 6	; 0x90000000
     190:	3116d60e 	tstcc	r6, lr, lsl #12
     194:	31152c02 	tstcc	r5, r2, lsl #24
     198:	03132402 	tsteq	r3, #33554432	; 0x2000000
     19c:	02136616 	andseq	r6, r3, #23068672	; 0x1600000
     1a0:	022f132c 	eoreq	r1, pc, #44, 6	; 0xb0000000
     1a4:	2a031324 	bcs	c4e3c <__bss_end+0xaf30c>
     1a8:	0a034c66 	beq	d3348 <__bss_end+0xbd818>
     1ac:	4ba19f9e 	blmi	fe86802c <_estack+0xf685802c>
     1b0:	a685a285 	strge	sl, [r5], r5, lsl #5
     1b4:	01000e02 	tsteq	r0, r2, lsl #28
     1b8:	0001c101 	andeq	ip, r1, r1, lsl #2
     1bc:	e4000200 	str	r0, [r0], #-512	; 0xfffffe00
     1c0:	02000000 	andeq	r0, r0, #0
     1c4:	0d0efb01 	vstreq	d15, [lr, #-4]
     1c8:	01010100 	mrseq	r0, (UNDEF: 17)
     1cc:	00000001 	andeq	r0, r0, r1
     1d0:	01000001 	tsteq	r0, r1
     1d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 120 <_start-0x7ee0>
     1d8:	636d2f65 	cmnvs	sp, #404	; 0x194
     1dc:	742f726f 	strtvc	r7, [pc], #-623	; 1e4 <_start-0x7e1c>
     1e0:	6e686e69 	cdpvs	14, 6, cr6, cr8, cr9, {3}
     1e4:	69502f6e 	ldmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     1e8:	534f5452 	movtpl	r5, #62546	; 0xf452
     1ec:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     1f0:	4f545265 	svcmi	0x00545265
     1f4:	6f532f53 	svcvs	0x00532f53
     1f8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     1fc:	6f682f00 	svcvs	0x00682f00
     200:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 54 <_start-0x7fac>
     204:	2f726f63 	svccs	0x00726f63
     208:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     20c:	502f6e6e 	eorpl	r6, pc, lr, ror #28
     210:	4f545269 	svcmi	0x00545269
     214:	72462f53 	subvc	r2, r6, #332	; 0x14c
     218:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     21c:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     220:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     224:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     228:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     22c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     230:	2f656d6f 	svccs	0x00656d6f
     234:	726f636d 	rsbvc	r6, pc, #-1275068415	; 0xb4000001
     238:	6e69742f 	cdpvs	4, 6, cr7, cr9, cr15, {1}
     23c:	2f6e6e68 	svccs	0x006e6e68
     240:	54526950 	ldrbpl	r6, [r2], #-2384	; 0xfffff6b0
     244:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     248:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     24c:	2f534f54 	svccs	0x00534f54
     250:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     254:	702f6563 	eorvc	r6, pc, r3, ror #10
     258:	6174726f 	cmnvs	r4, pc, ror #4
     25c:	2f656c62 	svccs	0x00656c62
     260:	2f434347 	svccs	0x00434347
     264:	70736152 	rsbsvc	r6, r3, r2, asr r1
     268:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     26c:	00695079 	rsbeq	r5, r9, r9, ror r0
     270:	6f726300 	svcvs	0x00726300
     274:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     278:	00632e65 	rsbeq	r2, r3, r5, ror #28
     27c:	6c000001 	stcvs	0, cr0, [r0], {1}
     280:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     284:	00020068 	andeq	r0, r2, r8, rrx
     288:	726f7000 	rsbvc	r7, pc, #0
     28c:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     290:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     294:	00000300 	andeq	r0, r0, r0, lsl #6
     298:	756f7263 	strbvc	r7, [pc, #-611]!	; 3d <_start-0x7fc3>
     29c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     2a0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     2a4:	00000000 	andeq	r0, r0, r0
     2a8:	05f00205 	ldrbeq	r0, [r0, #517]!	; 0x205
     2ac:	8a030001 	bhi	c02b8 <__bss_end+0xaa788>
     2b0:	67bf0101 	ldrvs	r0, [pc, r1, lsl #2]!
     2b4:	3267846a 	rsbcc	r8, r7, #1778384896	; 0x6a000000
     2b8:	67674e68 	strbvs	r4, [r7, -r8, ror #28]!
     2bc:	87836967 	strhi	r6, [r3, r7, ror #18]
     2c0:	00866967 	addeq	r6, r6, r7, ror #18
     2c4:	06010402 	streq	r0, [r1], -r2, lsl #8
     2c8:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     2cc:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     2d0:	08060304 	stmdaeq	r6, {r2, r8, r9}
     2d4:	2f4d6a92 	svccs	0x004d6a92
     2d8:	a1a3a3be 			; <UNDEFINED> instruction: 0xa1a3a3be
     2dc:	2608a284 	strcs	sl, [r8], -r4, lsl #5
     2e0:	dabc6af5 	ble	fef1aebc <_estack+0xf6f0aebc>
     2e4:	83a0336a 	movhi	r3, #-1476395007	; 0xa8000001
     2e8:	0083a084 	addeq	sl, r3, r4, lsl #1
     2ec:	06010402 	streq	r0, [r1], -r2, lsl #8
     2f0:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     2f4:	03068203 	movweq	r8, #25091	; 0x6203
     2f8:	03900873 	orrseq	r0, r0, #7536640	; 0x730000
     2fc:	69be820f 	ldmibvs	lr!, {r0, r1, r2, r3, r9, pc}
     300:	a19f30d7 	ldrsbge	r3, [pc, r7]
     304:	6a836788 	bvs	fe0da12c <_estack+0xf60ca12c>
     308:	31bda030 			; <UNDEFINED> instruction: 0x31bda030
     30c:	858485a5 	strhi	r8, [r4, #1445]	; 0x5a5
     310:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     314:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     318:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     31c:	08650306 	stmdaeq	r5!, {r1, r2, r8, r9}^
     320:	9e6e0390 	mcrls	3, 3, r0, cr14, cr0, {4}
     324:	83823103 	orrhi	r3, r2, #-1073741824	; 0xc0000000
     328:	31684008 	cmncc	r8, r8
     32c:	03873031 	orreq	r3, r7, #49	; 0x31
     330:	0c039e79 	stceq	14, cr9, [r3], {121}	; 0x79
     334:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
     338:	02060104 	andeq	r0, r6, #4, 2
     33c:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     340:	009e0304 	addseq	r0, lr, r4, lsl #6
     344:	06030402 	streq	r0, [r3], -r2, lsl #8
     348:	040200a1 	streq	r0, [r2], #-161	; 0xffffff5f
     34c:	033e0803 	teqeq	lr, #196608	; 0x30000
     350:	0d034a74 	vstreq	s8, [r3, #-464]	; 0xfffffe30
     354:	0069a22e 	rsbeq	sl, r9, lr, lsr #4
     358:	68030402 	stmdavs	r3, {r1, sl}
     35c:	03040200 	movweq	r0, #16896	; 0x4200
     360:	02001e08 	andeq	r1, r0, #8, 28	; 0x80
     364:	66060104 	strvs	r0, [r6], -r4, lsl #2
     368:	4b4b6b06 	blmi	12daf88 <__bss_end+0x12c5458>
     36c:	0867674e 	stmdaeq	r7!, {r1, r2, r3, r6, r8, r9, sl, sp, lr}^
     370:	83838924 	orrhi	r8, r3, #36, 18	; 0x90000
     374:	4d6ad8a0 	stclmi	8, cr13, [sl, #-640]!	; 0xfffffd80
     378:	000a022f 	andeq	r0, sl, pc, lsr #4
     37c:	01ae0101 			; <UNDEFINED> instruction: 0x01ae0101
     380:	00020000 	andeq	r0, r2, r0
     384:	00000160 	andeq	r0, r0, r0, ror #2
     388:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     38c:	0101000d 	tsteq	r1, sp
     390:	00000101 	andeq	r0, r0, r1, lsl #2
     394:	00000100 	andeq	r0, r0, r0, lsl #2
     398:	6f682f01 	svcvs	0x00682f01
     39c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1f0 <_start-0x7e10>
     3a0:	2f726f63 	svccs	0x00726f63
     3a4:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     3a8:	502f6e6e 	eorpl	r6, pc, lr, ror #28
     3ac:	4f545269 	svcmi	0x00545269
     3b0:	72462f53 	subvc	r2, r6, #332	; 0x14c
     3b4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     3b8:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     3bc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3c0:	752f0065 	strvc	r0, [pc, #-101]!	; 363 <_start-0x7c9d>
     3c4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     3c8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     3cc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     3d0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     3d4:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     3d8:	752f0073 	strvc	r0, [pc, #-115]!	; 36d <_start-0x7c93>
     3dc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 218 <_start-0x7de8>
     3e0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     3e4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     3e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     3ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     3f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     3f4:	332e362f 			; <UNDEFINED> instruction: 0x332e362f
     3f8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     3fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     400:	2f006564 	svccs	0x00006564
     404:	2f727375 	svccs	0x00727375
     408:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     40c:	2f656475 	svccs	0x00656475
     410:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     414:	2f006269 	svccs	0x00006269
     418:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     41c:	6f636d2f 	svcvs	0x00636d2f
     420:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     424:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
     428:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
     42c:	2f534f54 	svccs	0x00534f54
     430:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     434:	534f5452 	movtpl	r5, #62546	; 0xf452
     438:	756f532f 	strbvc	r5, [pc, #-815]!	; 111 <_start-0x7eef>
     43c:	2f656372 	svccs	0x00656372
     440:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     444:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     448:	4343472f 	movtmi	r4, #14127	; 0x372f
     44c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     450:	72656270 	rsbvc	r6, r5, #112, 4
     454:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     458:	6f682f00 	svcvs	0x00682f00
     45c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2b0 <_start-0x7d50>
     460:	2f726f63 	svccs	0x00726f63
     464:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     468:	502f6e6e 	eorpl	r6, pc, lr, ror #28
     46c:	4f545269 	svcmi	0x00545269
     470:	72462f53 	subvc	r2, r6, #332	; 0x14c
     474:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     478:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     47c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     480:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     484:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     488:	6c000065 	stcvs	0, cr0, [r0], {101}	; 0x65
     48c:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     490:	00010063 	andeq	r0, r1, r3, rrx
     494:	636f6c00 	cmnvs	pc, #0, 24
     498:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     49c:	5f000002 	svcpl	0x00000002
     4a0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     4a4:	00682e73 	rsbeq	r2, r8, r3, ror lr
     4a8:	73000002 	movwvc	r0, #2
     4ac:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     4b0:	00682e66 	rsbeq	r2, r8, r6, ror #28
     4b4:	72000003 	andvc	r0, r0, #3
     4b8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     4bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     4c0:	74730000 	ldrbtvc	r0, [r3], #-0
     4c4:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
     4c8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     4cc:	6f700000 	svcvs	0x00700000
     4d0:	616d7472 	smcvs	55106	; 0xd742
     4d4:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     4d8:	00050068 	andeq	r0, r5, r8, rrx
     4dc:	73696c00 	cmnvc	r9, #0, 24
     4e0:	00682e74 	rsbeq	r2, r8, r4, ror lr
     4e4:	00000006 	andeq	r0, r0, r6
     4e8:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
     4ec:	0300010d 	movweq	r0, #269	; 0x10d
     4f0:	860100cc 	strhi	r0, [r1], -ip, asr #1
     4f4:	84836a86 	strhi	r6, [r3], #2694	; 0xa86
     4f8:	67848667 	strvs	r8, [r4, r7, ror #12]
     4fc:	8368a586 	cmnhi	r8, #562036736	; 0x21800000
     500:	69678383 	stmdbvs	r7!, {r0, r1, r7, r8, r9, pc}^
     504:	a3869f68 	orrge	r9, r6, #104, 30	; 0x1a0
     508:	68660903 	stmdavs	r6!, {r0, r1, r8, fp}^
     50c:	00821403 	addeq	r1, r2, r3, lsl #8
     510:	06030402 	streq	r0, [r3], -r2, lsl #8
     514:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     518:	c1066601 	tstgt	r6, r1, lsl #12
     51c:	6a678383 	bvs	19e1330 <__bss_end+0x19cb800>
     520:	85869f68 	strhi	r9, [r6, #3944]	; 0xf68
     524:	a069a29f 	mlsge	r9, pc, r2, sl	; <UNPREDICTABLE>
     528:	029f6785 	addseq	r6, pc, #34865152	; 0x2140000
     52c:	01010008 	tsteq	r1, r8
     530:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     534:	016b0002 	cmneq	fp, r2
     538:	01020000 	mrseq	r0, (UNDEF: 2)
     53c:	000d0efb 	strdeq	r0, [sp], -fp
     540:	01010101 	tsteq	r1, r1, lsl #2
     544:	01000000 	mrseq	r0, (UNDEF: 0)
     548:	2f010000 	svccs	0x00010000
     54c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     550:	6f636d2f 	svcvs	0x00636d2f
     554:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     558:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
     55c:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
     560:	2f534f54 	svccs	0x00534f54
     564:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     568:	534f5452 	movtpl	r5, #62546	; 0xf452
     56c:	756f532f 	strbvc	r5, [pc, #-815]!	; 245 <_start-0x7dbb>
     570:	00656372 	rsbeq	r6, r5, r2, ror r3
     574:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     578:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     57c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     580:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     584:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     588:	61652d65 	cmnvs	r5, r5, ror #26
     58c:	362f6962 	strtcc	r6, [pc], -r2, ror #18
     590:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
     594:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     598:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     59c:	73752f00 	cmnvc	r5, #0, 30
     5a0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     5a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     5a8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     5ac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     5b0:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     5b4:	73752f00 	cmnvc	r5, #0, 30
     5b8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     5bc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     5c0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     5c4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     5c8:	6f682f00 	svcvs	0x00682f00
     5cc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 420 <_start-0x7be0>
     5d0:	2f726f63 	svccs	0x00726f63
     5d4:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     5d8:	502f6e6e 	eorpl	r6, pc, lr, ror #28
     5dc:	4f545269 	svcmi	0x00545269
     5e0:	72462f53 	subvc	r2, r6, #332	; 0x14c
     5e4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     5e8:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     5ec:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     5f0:	6f702f65 	svcvs	0x00702f65
     5f4:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     5f8:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     5fc:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     600:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     604:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     608:	2f006950 	svccs	0x00006950
     60c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     610:	6f636d2f 	svcvs	0x00636d2f
     614:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     618:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
     61c:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
     620:	2f534f54 	svccs	0x00534f54
     624:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     628:	534f5452 	movtpl	r5, #62546	; 0xf452
     62c:	756f532f 	strbvc	r5, [pc, #-815]!	; 305 <_start-0x7cfb>
     630:	2f656372 	svccs	0x00656372
     634:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     638:	00656475 	rsbeq	r6, r5, r5, ror r4
     63c:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     640:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
     644:	00000100 	andeq	r0, r0, r0, lsl #2
     648:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     64c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     650:	00000200 	andeq	r0, r0, r0, lsl #4
     654:	6b636f6c 	blvs	18dc40c <__bss_end+0x18c68dc>
     658:	0300682e 	movweq	r6, #2094	; 0x82e
     65c:	745f0000 	ldrbvc	r0, [pc], #-0	; 664 <_start-0x799c>
     660:	73657079 	cmnvc	r5, #121	; 0x79
     664:	0300682e 	movweq	r6, #2094	; 0x82e
     668:	65720000 	ldrbvs	r0, [r2, #-0]!
     66c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     670:	00030068 	andeq	r0, r3, r8, rrx
     674:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     678:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     67c:	00040068 	andeq	r0, r4, r8, rrx
     680:	726f7000 	rsbvc	r7, pc, #0
     684:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     688:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     68c:	00000500 	andeq	r0, r0, r0, lsl #10
     690:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     694:	0600682e 	streq	r6, [r0], -lr, lsr #16
     698:	61740000 	cmnvs	r4, r0
     69c:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     6a0:	00000600 	andeq	r0, r0, r0, lsl #12
     6a4:	02050000 	andeq	r0, r5, #0
     6a8:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     6ac:	01029703 	tsteq	r2, r3, lsl #14
     6b0:	3d0830a1 	stccc	0, cr3, [r8, #-644]	; 0xfffffd7c
     6b4:	59088367 	stmdbpl	r8, {r0, r1, r2, r5, r6, r8, r9, pc}
     6b8:	846d6867 	strbthi	r6, [sp], #-2151	; 0xfffff799
     6bc:	858351d8 	strhi	r5, [r3, #472]	; 0x1d8
     6c0:	d96a2f32 	stmdble	sl!, {r1, r4, r5, r8, r9, sl, fp, sp}^
     6c4:	6a676851 	bvs	19da810 <__bss_end+0x19c4ce0>
     6c8:	67869fa0 	strvs	r9, [r6, r0, lsr #31]
     6cc:	516b6e67 	cmnpl	fp, r7, ror #28
     6d0:	01d0032f 	bicseq	r0, r0, pc, lsr #6
     6d4:	0b03d766 	bleq	f6474 <__bss_end+0xe0944>
     6d8:	86bd324a 	ldrthi	r3, [sp], sl, asr #4
     6dc:	3232dc84 	eorscc	sp, r2, #132, 24	; 0x8400
     6e0:	4c336a4e 			; <UNDEFINED> instruction: 0x4c336a4e
     6e4:	334e676a 	movtcc	r6, #59242	; 0xe76a
     6e8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     6ec:	009e0601 	addseq	r0, lr, r1, lsl #12
     6f0:	66030402 	strvs	r0, [r3], -r2, lsl #8
     6f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     6f8:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     6fc:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     700:	31060604 	tstcc	r6, r4, lsl #12
     704:	51c1a1f4 	strdpl	sl, [r1, #20]
     708:	504b5084 	subpl	r5, fp, r4, lsl #1
     70c:	0200334b 	andeq	r3, r0, #738197505	; 0x2c000001
     710:	03310304 	teqeq	r1, #4, 6	; 0x10000000
     714:	036601d2 	cmneq	r6, #-2147483596	; 0x80000034
     718:	be4cd60c 	cdplt	6, 4, cr13, cr12, cr12, {0}
     71c:	da848486 	ble	fe12193c <_estack+0xf611193c>
     720:	82090368 	andhi	r0, r9, #104, 6	; 0xa0000001
     724:	2f4f6ba1 	svccs	0x004f6ba1
     728:	0d03d76a 	stceq	7, cr13, [r3, #-424]	; 0xfffffe58
     72c:	6885324a 	stmvs	r5, {r1, r3, r6, r9, ip, sp}
     730:	0d036b68 	vstreq	d6, [r3, #-416]	; 0xfffffe60
     734:	03d8849e 	bicseq	r8, r8, #-1644167168	; 0x9e000000
     738:	866a4a0a 	strbthi	r4, [sl], -sl, lsl #20
     73c:	4e2f33d9 	mcrmi	3, 1, r3, cr15, cr9, {6}
     740:	6a4c306a 	bvs	130c8f0 <__bss_end+0x12f6dc0>
     744:	2f334e67 	svccs	0x00334e67
     748:	01040200 	mrseq	r0, R12_usr
     74c:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     750:	00660304 	rsbeq	r0, r6, r4, lsl #6
     754:	82040402 	andhi	r0, r4, #33554432	; 0x2000000
     758:	06040200 	streq	r0, [r4], -r0, lsl #4
     75c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     760:	f4310606 			; <UNDEFINED> instruction: 0xf4310606
     764:	bb9e1103 	bllt	fe784b78 <_estack+0xf6774b78>
     768:	4b50844b 	blmi	142189c <__bss_end+0x140bd6c>
     76c:	00304b4f 	eorseq	r4, r0, pc, asr #22
     770:	31030402 	tstcc	r3, r2, lsl #8
     774:	864dc16a 	strbhi	ip, [sp], -sl, ror #2
     778:	8484a367 	strhi	sl, [r4], #871	; 0x367
     77c:	090368da 	stmdbeq	r3, {r1, r3, r4, r6, r7, fp, sp, lr}
     780:	506aa182 	rsbpl	sl, sl, r2, lsl #3
     784:	2f876a2f 	svccs	0x00876a2f
     788:	6a2f3067 	bvs	bcc92c <__bss_end+0xbb6dfc>
     78c:	862f6887 	strthi	r6, [pc], -r7, lsl #17
     790:	034b8387 	movteq	r8, #45959	; 0xb387
     794:	03bb6622 			; <UNDEFINED> instruction: 0x03bb6622
     798:	d768820d 	strble	r8, [r8, -sp, lsl #4]!
     79c:	d7a3bcd7 	sbfxle	fp, r7, #25, #4
     7a0:	9ff6bcf3 	svcls	0x00f6bcf3
     7a4:	d7849f6a 	strle	r9, [r4, sl, ror #30]
     7a8:	6ad884bc 	bvs	ff621aa0 <_estack+0xf7611aa0>
     7ac:	86323189 	ldrthi	r3, [r2], -r9, lsl #3
     7b0:	710331da 	ldrdvc	r3, [r3, -sl]
     7b4:	9e13039e 	mrcls	3, 0, r0, cr3, cr14, {4}
     7b8:	30316832 	eorscc	r6, r1, r2, lsr r8
     7bc:	31d88430 	bicscc	r8, r8, r0, lsr r4
     7c0:	039e7703 	orrseq	r7, lr, #786432	; 0xc0000
     7c4:	68329e0d 	ldmdavs	r2!, {r0, r2, r3, r9, sl, fp, ip, pc}
     7c8:	2f856a2f 	svccs	0x00856a2f
     7cc:	6a2f30d7 	bvs	bccb30 <__bss_end+0xbb7000>
     7d0:	862fd886 	strthi	sp, [pc], -r6, lsl #17
     7d4:	21082f85 	smlabbcs	r8, r5, pc, r2	; <UNPREDICTABLE>
     7d8:	866a2f30 	uqasxhi	r2, sl, r0
     7dc:	022f2208 	eoreq	r2, pc, #8, 4	; 0x80000000
     7e0:	01010008 	tsteq	r1, r8
     7e4:	000004cb 	andeq	r0, r0, fp, asr #9
     7e8:	01870002 	orreq	r0, r7, r2
     7ec:	01020000 	mrseq	r0, (UNDEF: 2)
     7f0:	000d0efb 	strdeq	r0, [sp], -fp
     7f4:	01010101 	tsteq	r1, r1, lsl #2
     7f8:	01000000 	mrseq	r0, (UNDEF: 0)
     7fc:	2f010000 	svccs	0x00010000
     800:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     804:	6f636d2f 	svcvs	0x00636d2f
     808:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     80c:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
     810:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
     814:	2f534f54 	svccs	0x00534f54
     818:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     81c:	534f5452 	movtpl	r5, #62546	; 0xf452
     820:	756f532f 	strbvc	r5, [pc, #-815]!	; 4f9 <_start-0x7b07>
     824:	00656372 	rsbeq	r6, r5, r2, ror r3
     828:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     82c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     830:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     834:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     838:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     83c:	61652d65 	cmnvs	r5, r5, ror #26
     840:	362f6962 	strtcc	r6, [pc], -r2, ror #18
     844:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
     848:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     84c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     850:	73752f00 	cmnvc	r5, #0, 30
     854:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     858:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     85c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     860:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     864:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     868:	73752f00 	cmnvc	r5, #0, 30
     86c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     870:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     874:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     878:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     87c:	6f682f00 	svcvs	0x00682f00
     880:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 6d4 <_start-0x792c>
     884:	2f726f63 	svccs	0x00726f63
     888:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     88c:	502f6e6e 	eorpl	r6, pc, lr, ror #28
     890:	4f545269 	svcmi	0x00545269
     894:	72462f53 	subvc	r2, r6, #332	; 0x14c
     898:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     89c:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     8a0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     8a4:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     8a8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     8ac:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     8b0:	2f656d6f 	svccs	0x00656d6f
     8b4:	726f636d 	rsbvc	r6, pc, #-1275068415	; 0xb4000001
     8b8:	6e69742f 	cdpvs	4, 6, cr7, cr9, cr15, {1}
     8bc:	2f6e6e68 	svccs	0x006e6e68
     8c0:	54526950 	ldrbpl	r6, [r2], #-2384	; 0xfffff6b0
     8c4:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     8c8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     8cc:	2f534f54 	svccs	0x00534f54
     8d0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     8d4:	702f6563 	eorvc	r6, pc, r3, ror #10
     8d8:	6174726f 	cmnvs	r4, pc, ror #4
     8dc:	2f656c62 	svccs	0x00656c62
     8e0:	2f434347 	svccs	0x00434347
     8e4:	70736152 	rsbsvc	r6, r3, r2, asr r1
     8e8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     8ec:	00695079 	rsbeq	r5, r9, r9, ror r0
     8f0:	73617400 	cmnvc	r1, #0, 8
     8f4:	632e736b 			; <UNDEFINED> instruction: 0x632e736b
     8f8:	00000100 	andeq	r0, r0, r0, lsl #2
     8fc:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     900:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     904:	00000200 	andeq	r0, r0, r0, lsl #4
     908:	6b636f6c 	blvs	18dc6c0 <__bss_end+0x18c6b90>
     90c:	0300682e 	movweq	r6, #2094	; 0x82e
     910:	745f0000 	ldrbvc	r0, [pc], #-0	; 918 <_start-0x76e8>
     914:	73657079 	cmnvc	r5, #121	; 0x79
     918:	0300682e 	movweq	r6, #2094	; 0x82e
     91c:	65720000 	ldrbvs	r0, [r2, #-0]!
     920:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     924:	00030068 	andeq	r0, r3, r8, rrx
     928:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     92c:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     930:	00040068 	andeq	r0, r4, r8, rrx
     934:	6f727000 	svcvs	0x00727000
     938:	6665646a 	strbtvs	r6, [r5], -sl, ror #8
     93c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     940:	70000005 	andvc	r0, r0, r5
     944:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
     948:	6f726361 	svcvs	0x00726361
     94c:	0600682e 	streq	r6, [r0], -lr, lsr #16
     950:	72460000 	subvc	r0, r6, #0
     954:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     958:	682e534f 	stmdavs	lr!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
     95c:	00000500 	andeq	r0, r0, r0, lsl #10
     960:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     964:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     968:	61740000 	cmnvs	r4, r0
     96c:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     970:	00000500 	andeq	r0, r0, r0, lsl #10
     974:	02050000 	andeq	r0, r5, #0
     978:	00011ba0 	andeq	r1, r1, r0, lsr #23
     97c:	01039b03 	tsteq	r3, r3, lsl #22
     980:	a0d60903 	sbcsge	r0, r6, r3, lsl #18
     984:	d7661803 	strble	r1, [r6, -r3, lsl #16]!
     988:	03661403 	cmneq	r6, #50331648	; 0x3000000
     98c:	6bddd60c 	blvs	ff7761c4 <_estack+0xf77661c4>
     990:	869f306b 	ldrhi	r3, [pc], fp, rrx
     994:	84528768 	ldrbhi	r8, [r2], #-1896	; 0xfffff898
     998:	03bc6dbc 			; <UNDEFINED> instruction: 0x03bc6dbc
     99c:	00a08209 	adceq	r8, r0, r9, lsl #4
     9a0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9a4:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     9a8:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     9ac:	08060304 	stmdaeq	r6, {r2, r8, r9}
     9b0:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
     9b4:	4e4e4e03 	cdpmi	14, 4, cr4, cr14, cr3, {0}
     9b8:	33bc8668 			; <UNDEFINED> instruction: 0x33bc8668
     9bc:	8542082f 	strbhi	r0, [r2, #-2095]	; 0xfffff7d1
     9c0:	004ea032 	subeq	sl, lr, r2, lsr r0
     9c4:	06010402 	streq	r0, [r1], -r2, lsl #8
     9c8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     9cc:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     9d0:	002e0404 	eoreq	r0, lr, r4, lsl #8
     9d4:	06040402 	streq	r0, [r4], -r2, lsl #8
     9d8:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
     9dc:	85848504 	strhi	r8, [r4, #1284]	; 0x504
     9e0:	31a2a2a3 			; <UNDEFINED> instruction: 0x31a2a2a3
     9e4:	03316884 	teqeq	r1, #132, 16	; 0x840000
     9e8:	4fa0f210 	svcmi	0x00a0f210
     9ec:	00c1a031 	sbceq	sl, r1, r1, lsr r0
     9f0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9f4:	6ea0069e 	mcrvs	6, 5, r0, cr0, cr14, {4}
     9f8:	01040200 	mrseq	r0, R12_usr
     9fc:	a0069e06 	andge	r9, r6, r6, lsl #28
     a00:	9f6d684f 	svcls	0x006d684f
     a04:	30684e4d 	rsbcc	r4, r8, sp, asr #28
     a08:	684d84a6 	stmdavs	sp, {r1, r2, r5, r7, sl, pc}^
     a0c:	a32e0e03 			; <UNDEFINED> instruction: 0xa32e0e03
     a10:	684f4c9f 	stmdavs	pc, {r0, r1, r2, r3, r4, r7, sl, fp, lr}^	; <UNPREDICTABLE>
     a14:	3286a630 	addcc	sl, r6, #48, 12	; 0x3000000
     a18:	01040200 	mrseq	r0, R12_usr
     a1c:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     a20:	00660204 	rsbeq	r0, r6, r4, lsl #4
     a24:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     a28:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     a2c:	02002f06 	andeq	r2, r0, #6, 30
     a30:	00680404 	rsbeq	r0, r8, r4, lsl #8
     a34:	30040402 	andcc	r0, r4, r2, lsl #8
     a38:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     a3c:	4fa18a2f 	svcmi	0x00a18a2f
     a40:	a0304d68 	eorsge	r4, r0, r8, ror #26
     a44:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
     a48:	00660601 	rsbeq	r0, r6, r1, lsl #12
     a4c:	66020402 	strvs	r0, [r2], -r2, lsl #8
     a50:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     a54:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     a58:	0a030604 	beq	c2270 <__bss_end+0xac740>
     a5c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     a60:	84866a04 	strhi	r6, [r6], #2564	; 0xa04
     a64:	036a696c 	cmneq	sl, #108, 18	; 0x1b0000
     a68:	886a4a13 	stmdahi	sl!, {r0, r1, r4, r9, fp, lr}^
     a6c:	00835d08 	addeq	r5, r3, r8, lsl #26
     a70:	06010402 	streq	r0, [r1], -r2, lsl #8
     a74:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     a78:	08068203 	stmdaeq	r6, {r0, r1, r9, pc}
     a7c:	2f326893 	svccs	0x00326893
     a80:	a03285c2 	eorsge	r8, r2, r2, asr #11
     a84:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
     a88:	00660601 	rsbeq	r0, r6, r1, lsl #12
     a8c:	66020402 	strvs	r0, [r2], -r2, lsl #8
     a90:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     a94:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     a98:	00330604 	eorseq	r0, r3, r4, lsl #12
     a9c:	85040402 	strhi	r0, [r4, #-1026]	; 0xfffffbfe
     aa0:	30a08584 	adccc	r8, r0, r4, lsl #11
     aa4:	15038568 	strne	r8, [r3, #-1384]	; 0xfffffa98
     aa8:	2e72032e 	cdpcs	3, 7, cr0, cr2, cr14, {1}
     aac:	322a6ec0 	eorcc	r6, sl, #192, 28	; 0xc00
     ab0:	514b83de 	ldrdpl	r8, [fp, #-62]	; 0xffffffc2
     ab4:	4f84a4a1 	svcmi	0x0084a4a1
     ab8:	4e8ac22f 	cdpmi	2, 8, cr12, cr10, cr15, {1}
     abc:	01040200 	mrseq	r0, R12_usr
     ac0:	a0066606 	andge	r6, r6, r6, lsl #12
     ac4:	0083a430 	addeq	sl, r3, r0, lsr r4
     ac8:	06010402 	streq	r0, [r1], -r2, lsl #8
     acc:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     ad0:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     ad4:	08060304 	stmdaeq	r6, {r2, r8, r9}
     ad8:	3032da93 	mlascc	r2, r3, sl, sp
     adc:	83ba0903 			; <UNDEFINED> instruction: 0x83ba0903
     ae0:	a24c4c50 	subge	r4, ip, #80, 24	; 0x5000
     ae4:	833d0884 	teqhi	sp, #132, 16	; 0x840000
     ae8:	01040200 	mrseq	r0, R12_usr
     aec:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     af0:	06820304 	streq	r0, [r2], r4, lsl #6
     af4:	2fa4b308 	svccs	0x00a4b308
     af8:	03f20d03 	mvnseq	r0, #3, 26	; 0xc0
     afc:	0d03660d 	stceq	6, cr6, [r3, #-52]	; 0xffffffcc
     b00:	0a03ac08 	beq	ebb28 <__bss_end+0xd5ff8>
     b04:	0367a066 	cmneq	r7, #102	; 0x66
     b08:	0d036609 	stceq	6, cr6, [r3, #-36]	; 0xffffffdc
     b0c:	9f4eda2e 	svcls	0x004eda2e
     b10:	4d6a2f67 	stclmi	15, cr2, [sl, #-412]!	; 0xfffffe64
     b14:	0368a29f 	cmneq	r8, #-268435447	; 0xf0000009
     b18:	a0304a0b 	eorsge	r4, r0, fp, lsl #20
     b1c:	304e8484 	subcc	r8, lr, r4, lsl #9
     b20:	00676767 	rsbeq	r6, r7, r7, ror #14
     b24:	06010402 	streq	r0, [r1], -r2, lsl #8
     b28:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     b2c:	02006603 	andeq	r6, r0, #3145728	; 0x300000
     b30:	08060304 	stmdaeq	r6, {r2, r8, r9}
     b34:	7503bc5c 	strvc	fp, [r3, #-3164]	; 0xfffff3a4
     b38:	8212034a 	andshi	r0, r2, #671088641	; 0x28000001
     b3c:	9b2f3084 	blls	bccd54 <__bss_end+0xbb7224>
     b40:	4f820b03 	svcmi	0x00820b03
     b44:	01040200 	mrseq	r0, R12_usr
     b48:	84066606 	strhi	r6, [r6], #-1542	; 0xfffff9fa
     b4c:	3033674b 	eorscc	r6, r3, fp, asr #14
     b50:	080e032f 	stmdaeq	lr, {r0, r1, r2, r3, r5, r8, r9}
     b54:	68306a58 	ldmdavs	r0!, {r3, r4, r6, r9, fp, sp, lr}
     b58:	6a862f30 	bvs	fe18c820 <_estack+0xf617c820>
     b5c:	a22f694b 	eorge	r6, pc, #1228800	; 0x12c000
     b60:	ae034b4d 	vmlsge.f64	d4, d3, d13
     b64:	846c9e01 	strbthi	r9, [ip], #-3585	; 0xfffff1ff
     b68:	8209039f 	andhi	r0, r9, #2080374786	; 0x7c000002
     b6c:	a0678367 	rsbge	r8, r7, r7, ror #6
     b70:	879f8aa5 	ldrhi	r8, [pc, r5, lsr #21]
     b74:	0c040200 	sfmeq	f0, 4, [r4], {-0}
     b78:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     b7c:	009e0204 	addseq	r0, lr, r4, lsl #4
     b80:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     b84:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     b88:	02009008 	andeq	r9, r0, #8
     b8c:	00820504 	addeq	r0, r2, r4, lsl #10
     b90:	f2060402 	vshl.s8	d0, d2, d6
     b94:	08040200 	stmdaeq	r4, {r9}
     b98:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     b9c:	0200ba09 	andeq	fp, r0, #36864	; 0x9000
     ba0:	06820b04 	streq	r0, [r2], r4, lsl #22
     ba4:	1703b008 	strne	fp, [r3, -r8]
     ba8:	a296089e 	addsge	r0, r6, #10354688	; 0x9e0000
     bac:	2f4f8668 	svccs	0x004f8668
     bb0:	878a2f67 	strhi	r2, [sl, r7, ror #30]
     bb4:	2f4f8668 	svccs	0x004f8668
     bb8:	8a2f3067 	bhi	bccd5c <__bss_end+0xbb722c>
     bbc:	4d8668a3 	stcmi	8, cr6, [r6, #652]	; 0x28c
     bc0:	2f4dbe84 	svccs	0x004dbe84
     bc4:	03866788 	orreq	r6, r6, #136, 14	; 0x2200000
     bc8:	6e036633 	mcrvs	6, 0, r6, cr3, cr3, {1}
     bcc:	0d039b2e 	vstreq	d9, [r3, #-184]	; 0xffffff48
     bd0:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
     bd4:	02060104 	andeq	r0, r6, #4, 2
     bd8:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     bdc:	069e0304 	ldreq	r0, [lr], r4, lsl #6
     be0:	032408a6 			; <UNDEFINED> instruction: 0x032408a6
     be4:	a3bf9e0b 			; <UNDEFINED> instruction: 0xa3bf9e0b
     be8:	ba12036b 	blt	48199c <__bss_end+0x46be6c>
     bec:	9f2e7403 	svcls	0x002e7403
     bf0:	034a0b03 	movteq	r0, #43779	; 0xab03
     bf4:	1103ba26 	tstne	r3, r6, lsr #20
     bf8:	84848482 	strhi	r8, [r4], #1154	; 0x482
     bfc:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     c00:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     c04:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     c08:	a1b20806 			; <UNDEFINED> instruction: 0xa1b20806
     c0c:	2f4d6adc 	svccs	0x004d6adc
     c10:	838384f6 	orrhi	r8, r3, #-167772160	; 0xf6000000
     c14:	8434a4be 	ldrthi	sl, [r4], #-1214	; 0xfffffb42
     c18:	0402006b 	streq	r0, [r2], #-107	; 0xffffff95
     c1c:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     c20:	230868c0 	movwcs	r6, #35008	; 0x88c0
     c24:	6a4b3d08 	bvs	12d004c <__bss_end+0x12ba51c>
     c28:	a22f304d 	eorge	r3, pc, #77	; 0x4d
     c2c:	3203674b 	andcc	r6, r3, #19660800	; 0x12c0000
     c30:	1703899e 			; <UNDEFINED> instruction: 0x1703899e
     c34:	6703842e 	strvs	r8, [r3, -lr, lsr #8]
     c38:	4a3a032e 	bmi	e818f8 <__bss_end+0xe6bdc8>
     c3c:	686abddb 	stmdavs	sl!, {r0, r1, r3, r4, r6, r7, r8, sl, fp, ip, sp, pc}^
     c40:	86836d4d 	strhi	r6, [r3], sp, asr #26
     c44:	0a038369 	beq	e19f0 <__bss_end+0xcbec0>
     c48:	66140366 	ldrvs	r0, [r4], -r6, ror #6
     c4c:	69661703 	stmdbvs	r6!, {r0, r1, r8, r9, sl, ip}^
     c50:	03040200 	movweq	r0, #16896	; 0x4200
     c54:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     c58:	001e0803 	andseq	r0, lr, r3, lsl #16
     c5c:	06010402 	streq	r0, [r1], -r2, lsl #8
     c60:	4b6b0666 	blmi	1ac2600 <__bss_end+0x1aacad0>
     c64:	50504e4b 	subspl	r4, r0, fp, asr #28
     c68:	5c086767 	stcpl	7, cr6, [r8], {103}	; 0x67
     c6c:	d72f846d 	strle	r8, [pc, -sp, ror #8]!
     c70:	83306a30 	teqhi	r0, #48, 20	; 0x30000
     c74:	30a09f83 	adccc	r9, r0, r3, lsl #31
     c78:	8484be4f 	strhi	fp, [r4], #3663	; 0xe4f
     c7c:	f20f03a1 	vcgt.s8	d0, d31, d17
     c80:	f72e7603 			; <UNDEFINED> instruction: 0xf72e7603
     c84:	bff669a0 	svclt	0x00f669a0
     c88:	02006b68 	andeq	r6, r0, #104, 22	; 0x1a000
     c8c:	66060104 	strvs	r0, [r6], -r4, lsl #2
     c90:	02040200 	andeq	r0, r4, #0, 4
     c94:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     c98:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     c9c:	4c060404 	cfstrsmi	mvf0, [r6], {4}
     ca0:	036b4b85 	cmneq	fp, #136192	; 0x21400
     ca4:	032fd60a 			; <UNDEFINED> instruction: 0x032fd60a
     ca8:	8a66019d 	bhi	1981324 <__bss_end+0x196b7f4>
     cac:	06024b83 	streq	r4, [r2], -r3, lsl #23
     cb0:	a7010100 	strge	r0, [r1, -r0, lsl #2]
     cb4:	02000000 	andeq	r0, r0, #0
     cb8:	00004b00 	andeq	r4, r0, r0, lsl #22
     cbc:	fb010200 	blx	414c6 <__bss_end+0x2b996>
     cc0:	01000d0e 	tsteq	r0, lr, lsl #26
     cc4:	00010101 	andeq	r0, r1, r1, lsl #2
     cc8:	00010000 	andeq	r0, r1, r0
     ccc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     cd0:	2f656d6f 	svccs	0x00656d6f
     cd4:	726f636d 	rsbvc	r6, pc, #-1275068415	; 0xb4000001
     cd8:	6e69742f 	cdpvs	4, 6, cr7, cr9, cr15, {1}
     cdc:	2f6e6e68 	svccs	0x006e6e68
     ce0:	54526950 	ldrbpl	r6, [r2], #-2384	; 0xfffff6b0
     ce4:	442f534f 	strtmi	r5, [pc], #-847	; cec <_start-0x7314>
     ce8:	2f6f6d65 	svccs	0x006f6d65
     cec:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     cf0:	00737265 	rsbseq	r7, r3, r5, ror #4
     cf4:	71726900 	cmnvc	r2, r0, lsl #18
     cf8:	0100632e 	tsteq	r0, lr, lsr #6
     cfc:	72690000 	rsbvc	r0, r9, #0
     d00:	00682e71 	rsbeq	r2, r8, r1, ror lr
     d04:	00000001 	andeq	r0, r0, r1
     d08:	c0020500 	andgt	r0, r2, r0, lsl #10
     d0c:	03000134 	movweq	r0, #308	; 0x134
     d10:	319f011e 	orrscc	r0, pc, lr, lsl r1	; <UNPREDICTABLE>
     d14:	089f8585 	ldmeq	pc, {r0, r2, r7, r8, sl, pc}	; <UNPREDICTABLE>
     d18:	d673035b 			; <UNDEFINED> instruction: 0xd673035b
     d1c:	8a660f03 	bhi	1984930 <__bss_end+0x196ee00>
     d20:	f5674d4b 			; <UNDEFINED> instruction: 0xf5674d4b
     d24:	d767f567 	strble	pc, [r7, -r7, ror #10]!	; <UNPREDICTABLE>
     d28:	852f4b85 	strhi	r4, [pc, #-2949]!	; 1ab <_start-0x7e55>
     d2c:	bb852f4b 	bllt	fe14ca60 <_estack+0xf613ca60>
     d30:	bb832f67 	bllt	fe0ccad4 <_estack+0xf60bcad4>
     d34:	a0838530 	addge	r8, r3, r0, lsr r5
     d38:	0a036767 	beq	daadc <__bss_end+0xc4fac>
     d3c:	2e7803ba 	mrccs	3, 3, r0, cr8, cr10, {5}
     d40:	2ac06767 	bcs	ff01aae4 <_estack+0xf700aae4>
     d44:	bdbc6767 	ldclt	7, cr6, [ip, #412]!	; 0x19c
     d48:	6767a083 	strbvs	sl, [r7, -r3, lsl #1]!
     d4c:	03d60a03 	bicseq	r0, r6, #12288	; 0x3000
     d50:	67672e78 			; <UNDEFINED> instruction: 0x67672e78
     d54:	67672adc 			; <UNDEFINED> instruction: 0x67672adc
     d58:	000c02d8 	ldrdeq	r0, [ip], -r8
     d5c:	00b50101 	adcseq	r0, r5, r1, lsl #2
     d60:	00020000 	andeq	r0, r2, r0
     d64:	0000004d 	andeq	r0, r0, sp, asr #32
     d68:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d6c:	0101000d 	tsteq	r1, sp
     d70:	00000101 	andeq	r0, r0, r1, lsl #2
     d74:	00000100 	andeq	r0, r0, r0, lsl #2
     d78:	6f682f01 	svcvs	0x00682f01
     d7c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; bd0 <_start-0x7430>
     d80:	2f726f63 	svccs	0x00726f63
     d84:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     d88:	502f6e6e 	eorpl	r6, pc, lr, ror #28
     d8c:	4f545269 	svcmi	0x00545269
     d90:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
     d94:	442f6f6d 	strtmi	r6, [pc], #-3949	; d9c <_start-0x7264>
     d98:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     d9c:	00007372 	andeq	r7, r0, r2, ror r3
     da0:	6f697067 	svcvs	0x00697067
     da4:	0100632e 	tsteq	r0, lr, lsr #6
     da8:	70670000 	rsbvc	r0, r7, r0
     dac:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     db0:	00000100 	andeq	r0, r0, r0, lsl #2
     db4:	02050000 	andeq	r0, r5, #0
     db8:	00013860 	andeq	r3, r1, r0, ror #16
     dbc:	0100e803 	tsteq	r0, r3, lsl #16
     dc0:	0884a0a0 	stmeq	r4, {r5, r7, sp, pc}
     dc4:	0859083d 	ldmdaeq	r9, {r0, r2, r3, r4, r5, fp}^
     dc8:	bbbc833d 	bllt	fef21ac4 <_estack+0xf6f11ac4>
     dcc:	679f6883 	ldrvs	r6, [pc, r3, lsl #17]
     dd0:	b00867a0 	andlt	r6, r8, r0, lsr #15
     dd4:	a03e082c 	eorsge	r0, lr, ip, lsr #16
     dd8:	a1590883 	cmpge	r9, r3, lsl #17
     ddc:	086883bb 	stmdaeq	r8!, {r0, r1, r3, r4, r5, r7, r8, r9, pc}^
     de0:	30ad085a 	adccc	r0, sp, sl, asr r8
     de4:	08303d08 	ldmdaeq	r0!, {r3, r8, sl, fp, ip, sp}
     de8:	3d0830ad 	stccc	0, cr3, [r8, #-692]	; 0xfffffd4c
     dec:	30ad0830 	adccc	r0, sp, r0, lsr r8
     df0:	30303d08 	eorscc	r3, r0, r8, lsl #26
     df4:	68bbbba1 	ldmvs	fp!, {r0, r5, r7, r8, r9, fp, ip, sp, pc}
     df8:	ad085a08 	vstrge	s10, [r8, #-32]	; 0xffffffe0
     dfc:	303d0830 	eorscc	r0, sp, r0, lsr r8
     e00:	0830ad08 	ldmdaeq	r0!, {r3, r8, sl, fp, sp, pc}
     e04:	ad08303d 	stcge	0, cr3, [r8, #-244]	; 0xffffff0c
     e08:	303d0830 	eorscc	r0, sp, r0, lsr r8
     e0c:	9f83a130 	svcls	0x0083a130
     e10:	0a029f68 	beq	a8bb8 <__bss_end+0x93088>
     e14:	64010100 	strvs	r0, [r1], #-256	; 0xffffff00
     e18:	02000001 	andeq	r0, r0, #1
     e1c:	0000e800 	andeq	lr, r0, r0, lsl #16
     e20:	fb010200 	blx	4162a <__bss_end+0x2bafa>
     e24:	01000d0e 	tsteq	r0, lr, lsl #26
     e28:	00010101 	andeq	r0, r1, r1, lsl #2
     e2c:	00010000 	andeq	r0, r1, r0
     e30:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     e34:	2f656d6f 	svccs	0x00656d6f
     e38:	726f636d 	rsbvc	r6, pc, #-1275068415	; 0xb4000001
     e3c:	6e69742f 	cdpvs	4, 6, cr7, cr9, cr15, {1}
     e40:	2f6e6e68 	svccs	0x006e6e68
     e44:	54526950 	ldrbpl	r6, [r2], #-2384	; 0xfffff6b0
     e48:	2f2f534f 	svccs	0x002f534f
     e4c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     e50:	534f5452 	movtpl	r5, #62546	; 0xf452
     e54:	756f532f 	strbvc	r5, [pc, #-815]!	; b2d <_start-0x74d3>
     e58:	2f656372 	svccs	0x00656372
     e5c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     e60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     e64:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
     e68:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
     e6c:	73752f00 	cmnvc	r5, #0, 30
     e70:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     e74:	63672f62 	cmnvs	r7, #392	; 0x188
     e78:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     e7c:	6f6e2d6d 	svcvs	0x006e2d6d
     e80:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     e84:	2f696261 	svccs	0x00696261
     e88:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
     e8c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     e90:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     e94:	752f0065 	strvc	r0, [pc, #-101]!	; e37 <_start-0x71c9>
     e98:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     e9c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     ea0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     ea4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     ea8:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     eac:	752f0073 	strvc	r0, [pc, #-115]!	; e41 <_start-0x71bf>
     eb0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     eb4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     eb8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     ebc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     ec0:	68000062 	stmdavs	r0, {r1, r5, r6}
     ec4:	5f706165 	svcpl	0x00706165
     ec8:	00632e34 	rsbeq	r2, r3, r4, lsr lr
     ecc:	73000001 	movwvc	r0, #1
     ed0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     ed4:	00682e66 	rsbeq	r2, r8, r6, ror #28
     ed8:	6c000002 	stcvs	0, cr0, [r0], {2}
     edc:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
     ee0:	00030068 	andeq	r0, r3, r8, rrx
     ee4:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
     ee8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     eec:	00030068 	andeq	r0, r3, r8, rrx
     ef0:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
     ef4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     ef8:	00000300 	andeq	r0, r0, r0, lsl #6
     efc:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
     f00:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
     f04:	00000400 	andeq	r0, r0, r0, lsl #8
     f08:	02050000 	andeq	r0, r5, #0
     f0c:	00013e38 	andeq	r3, r1, r8, lsr lr
     f10:	01019203 	tsteq	r1, r3, lsl #4
     f14:	84324c84 	ldrthi	r4, [r2], #-3204	; 0xfffff37c
     f18:	85a26833 	strhi	r6, [r2, #2099]!	; 0x833
     f1c:	04020086 	streq	r0, [r2], #-134	; 0xffffff7a
     f20:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     f24:	30674b86 	rsbcc	r4, r7, r6, lsl #23
     f28:	0200634b 	andeq	r6, r0, #738197505	; 0x2c000001
     f2c:	9e060104 	adflss	f0, f6, f4
     f30:	a2a28a06 	adcge	r8, r2, #24576	; 0x6000
     f34:	bb86f785 	bllt	fe1bed50 <_estack+0xf61aed50>
     f38:	03da4d69 	bicseq	r4, sl, #6720	; 0x1a40
     f3c:	2fbc2e0c 	svccs	0x00bc2e0c
     f40:	6a4d83da 	bvs	1361eb0 <__bss_end+0x134c380>
     f44:	d7314ca1 	ldrle	r4, [r1, -r1, lsr #25]!
     f48:	4b86304c 	blmi	fe18d080 <_estack+0xf617d080>
     f4c:	864ca24b 	strbhi	sl, [ip], -fp, asr #4
     f50:	67660903 	strbvs	r0, [r6, -r3, lsl #18]!
     f54:	689f836a 	ldmvs	pc, {r1, r3, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
     f58:	9f4b8683 	svcls	0x004b8683
     f5c:	88f6bb85 	ldmhi	r6!, {r0, r2, r7, r8, r9, fp, ip, sp, pc}^
     f60:	03040200 	movweq	r0, #16896	; 0x4200
     f64:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     f68:	06660104 	strbteq	r0, [r6], -r4, lsl #2
     f6c:	d7d84ba5 	ldrble	r4, [r8, r5, lsr #23]
     f70:	bdf44b4f 			; <UNDEFINED> instruction: 0xbdf44b4f
     f74:	89a3bef3 	stmibhi	r3!, {r0, r1, r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}
     f78:	0c026884 	stceq	8, cr6, [r2], {132}	; 0x84
     f7c:	8f010100 	svchi	0x00010100
     f80:	02000000 	andeq	r0, r0, #0
     f84:	00003b00 	andeq	r3, r0, r0, lsl #22
     f88:	fb010200 	blx	41792 <__bss_end+0x2bc62>
     f8c:	01000d0e 	tsteq	r0, lr, lsl #26
     f90:	00010101 	andeq	r0, r1, r1, lsl #2
     f94:	00010000 	andeq	r0, r1, r0
     f98:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     f9c:	2f656d6f 	svccs	0x00656d6f
     fa0:	726f636d 	rsbvc	r6, pc, #-1275068415	; 0xb4000001
     fa4:	6e69742f 	cdpvs	4, 6, cr7, cr9, cr15, {1}
     fa8:	2f6e6e68 	svccs	0x006e6e68
     fac:	54526950 	ldrbpl	r6, [r2], #-2384	; 0xfffff6b0
     fb0:	442f534f 	strtmi	r5, [pc], #-847	; fb8 <_start-0x7048>
     fb4:	006f6d65 	rsbeq	r6, pc, r5, ror #26
     fb8:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     fbc:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     fc0:	00000001 	andeq	r0, r0, r1
     fc4:	fc020500 	stc2	5, cr0, [r2], {-0}
     fc8:	03000142 	movweq	r0, #322	; 0x142
     fcc:	840100c9 	strhi	r0, [r1], #-201	; 0xffffff37
     fd0:	01040200 	mrseq	r0, R12_usr
     fd4:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     fd8:	02006701 	andeq	r6, r0, #262144	; 0x40000
     fdc:	00670104 	rsbeq	r0, r7, r4, lsl #2
     fe0:	48010402 	stmdami	r1, {r1, sl}
     fe4:	02008434 	andeq	r8, r0, #52, 8	; 0x34000000
     fe8:	004c0104 	subeq	r0, ip, r4, lsl #2
     fec:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     ff0:	01040200 	mrseq	r0, R12_usr
     ff4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     ff8:	02006701 	andeq	r6, r0, #262144	; 0x40000
     ffc:	03470104 	movteq	r0, #28932	; 0x7104
    1000:	68672e0f 	stmdavs	r7!, {r0, r1, r2, r3, r9, sl, fp, sp}^
    1004:	92089108 	andls	r9, r8, #8, 2
    1008:	01040200 	mrseq	r0, R12_usr
    100c:	000a0234 	andeq	r0, sl, r4, lsr r2
    1010:	01920101 	orrseq	r0, r2, r1, lsl #2
    1014:	00020000 	andeq	r0, r2, r0
    1018:	0000013a 	andeq	r0, r0, sl, lsr r1
    101c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1020:	0101000d 	tsteq	r1, sp
    1024:	00000101 	andeq	r0, r0, r1, lsl #2
    1028:	00000100 	andeq	r0, r0, r0, lsl #2
    102c:	2f2e2e01 	svccs	0x002e2e01
    1030:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1034:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1038:	2f2e2e2f 	svccs	0x002e2e2f
    103c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    1040:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1044:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1048:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; ec8 <_start-0x7138>
    104c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1050:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    1054:	2e2f6d72 	mcrcs	13, 1, r6, cr15, cr2, {3}
    1058:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    105c:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    1060:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1064:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1068:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    106c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1070:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1074:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1078:	61652d65 	cmnvs	r5, r5, ror #26
    107c:	362f6962 	strtcc	r6, [pc], -r2, ror #18
    1080:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    1084:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1088:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    108c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    1090:	2f646c69 	svccs	0x00646c69
    1094:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1098:	6a2d6269 	bvs	b59a44 <__bss_end+0xb43f14>
    109c:	5778336f 	ldrbpl	r3, [r8, -pc, ror #6]!
    10a0:	656e2f31 	strbvs	r2, [lr, #-3889]!	; 0xfffff0cf
    10a4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    10a8:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    10ac:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    10b0:	30363130 	eorscc	r3, r6, r0, lsr r1
    10b4:	2f373235 	svccs	0x00373235
    10b8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    10bc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; f20 <_start-0x70e0>
    10c0:	2f636269 	svccs	0x00636269
    10c4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    10c8:	2f656475 	svccs	0x00656475
    10cc:	00737973 	rsbseq	r7, r3, r3, ror r9
    10d0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    10d4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    10d8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    10dc:	6f6a2d62 	svcvs	0x006a2d62
    10e0:	31577833 	cmpcc	r7, r3, lsr r8
    10e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    10e8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    10ec:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    10f0:	30322e30 	eorscc	r2, r2, r0, lsr lr
    10f4:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    10f8:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    10fc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1100:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1104:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    1108:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    110c:	00006564 	andeq	r6, r0, r4, ror #10
    1110:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    1114:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    1118:	00000100 	andeq	r0, r0, r0, lsl #2
    111c:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    1120:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1124:	00000200 	andeq	r0, r0, r0, lsl #4
    1128:	6b636f6c 	blvs	18dcee0 <__bss_end+0x18c73b0>
    112c:	0300682e 	movweq	r6, #2094	; 0x82e
    1130:	745f0000 	ldrbvc	r0, [pc], #-0	; 1138 <_start-0x6ec8>
    1134:	73657079 	cmnvc	r5, #121	; 0x79
    1138:	0300682e 	movweq	r6, #2094	; 0x82e
    113c:	65720000 	ldrbvs	r0, [r2, #-0]!
    1140:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1144:	00030068 	andeq	r0, r3, r8, rrx
    1148:	72747300 	rsbsvc	r7, r4, #0, 6
    114c:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    1150:	00040068 	andeq	r0, r4, r8, rrx
    1154:	05000000 	streq	r0, [r0, #-0]
    1158:	01441402 	cmpeq	r4, r2, lsl #8
    115c:	01390300 	teqeq	r9, r0, lsl #6
    1160:	03011503 	movweq	r1, #5379	; 0x1503
    1164:	5e034a1b 			; <UNDEFINED> instruction: 0x5e034a1b
    1168:	2e22032e 	cdpcs	3, 2, cr0, cr2, cr14, {1}
    116c:	2d2f2d67 	stccs	13, cr2, [pc, #-412]!	; fd8 <_start-0x7028>
    1170:	01040200 	mrseq	r0, R12_usr
    1174:	034a6503 	movteq	r6, #42243	; 0xa503
    1178:	1503666b 	strne	r6, [r3, #-1643]	; 0xfffff995
    117c:	2f2f6e2e 	svccs	0x002f6e2e
    1180:	7a032f2f 	bvc	cce44 <__bss_end+0xb7314>
    1184:	2f2f302e 	svccs	0x002f302e
    1188:	0a03612f 	beq	d964c <__bss_end+0xc3b1c>
    118c:	4d337d9e 	ldcmi	13, cr7, [r3, #-632]!	; 0xfffffd88
    1190:	2c302c2d 	ldccs	12, cr2, [r0], #-180	; 0xffffff4c
    1194:	66090384 	strvs	r0, [r9], -r4, lsl #7
    1198:	2d2f2d83 	stccs	13, cr2, [pc, #-524]!	; f94 <_start-0x706c>
    119c:	4a590333 	bmi	1641e70 <__bss_end+0x162c340>
    11a0:	02661703 	rsbeq	r1, r6, #786432	; 0xc0000
    11a4:	01010004 	tsteq	r1, r4
    11a8:	0000016e 	andeq	r0, r0, lr, ror #2
    11ac:	01250002 			; <UNDEFINED> instruction: 0x01250002
    11b0:	01020000 	mrseq	r0, (UNDEF: 2)
    11b4:	000d0efb 	strdeq	r0, [sp], -fp
    11b8:	01010101 	tsteq	r1, r1, lsl #2
    11bc:	01000000 	mrseq	r0, (UNDEF: 0)
    11c0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    11c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    11c8:	2f2e2e2f 	svccs	0x002e2e2f
    11cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    11d0:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    11d4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    11d8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    11dc:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    11e0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    11e4:	73752f00 	cmnvc	r5, #0, 30
    11e8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    11ec:	63672f62 	cmnvs	r7, #392	; 0x188
    11f0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    11f4:	6f6e2d6d 	svcvs	0x006e2d6d
    11f8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    11fc:	2f696261 	svccs	0x00696261
    1200:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
    1204:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    1208:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    120c:	622f0065 	eorvs	r0, pc, #101	; 0x65
    1210:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    1214:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1218:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    121c:	78336f6a 	ldmdavc	r3!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1220:	6e2f3157 	mcrvs	1, 1, r3, cr15, cr7, {2}
    1224:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1228:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    122c:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    1230:	36313032 			; <UNDEFINED> instruction: 0x36313032
    1234:	37323530 			; <UNDEFINED> instruction: 0x37323530
    1238:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    123c:	2f62696c 	svccs	0x0062696c
    1240:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    1244:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1248:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    124c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    1250:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    1254:	2f646c69 	svccs	0x00646c69
    1258:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    125c:	6a2d6269 	bvs	b59c08 <__bss_end+0xb440d8>
    1260:	5778336f 	ldrbpl	r3, [r8, -pc, ror #6]!
    1264:	656e2f31 	strbvs	r2, [lr, #-3889]!	; 0xfffff0cf
    1268:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    126c:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    1270:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    1274:	30363130 	eorscc	r3, r6, r0, lsr r1
    1278:	2f373235 	svccs	0x00373235
    127c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1280:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 10e4 <_start-0x6f1c>
    1284:	2f636269 	svccs	0x00636269
    1288:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    128c:	00656475 	rsbeq	r6, r5, r5, ror r4
    1290:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1294:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    1298:	00010063 	andeq	r0, r1, r3, rrx
    129c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    12a0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    12a4:	00020068 	andeq	r0, r2, r8, rrx
    12a8:	636f6c00 	cmnvs	pc, #0, 24
    12ac:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    12b0:	5f000003 	svcpl	0x00000003
    12b4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    12b8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    12bc:	72000003 	andvc	r0, r0, #3
    12c0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    12c4:	0300682e 	movweq	r6, #2094	; 0x82e
    12c8:	74730000 	ldrbtvc	r0, [r3], #-0
    12cc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    12d0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    12d4:	00000000 	andeq	r0, r0, r0
    12d8:	45280205 	strmi	r0, [r8, #-517]!	; 0xfffffdfb
    12dc:	30030001 	andcc	r0, r3, r1
    12e0:	010a0301 	tsteq	sl, r1, lsl #6
    12e4:	2b21084c 	blcs	84341c <__bss_end+0x82d8ec>
    12e8:	4a6e0352 	bmi	1b82038 <__bss_end+0x1b6c508>
    12ec:	2e120335 	mrccs	3, 0, r0, cr2, cr5, {1}
    12f0:	6c332934 			; <UNDEFINED> instruction: 0x6c332934
    12f4:	302e7a03 	eorcc	r7, lr, r3, lsl #20
    12f8:	452f2f2f 	strmi	r2, [pc, #-3887]!	; 3d1 <_start-0x7c2f>
    12fc:	039e0903 	orrseq	r0, lr, #49152	; 0xc000
    1300:	0c036677 	stceq	6, cr6, [r3], {119}	; 0x77
    1304:	2c302b4a 			; <UNDEFINED> instruction: 0x2c302b4a
    1308:	4a090384 	bmi	242120 <__bss_end+0x22c5f0>
    130c:	464e2d83 	strbmi	r2, [lr], -r3, lsl #27
    1310:	4e032d83 	cdpmi	13, 0, cr2, cr3, cr3, {4}
    1314:	00040266 	andeq	r0, r4, r6, ror #4
    1318:	01630101 	cmneq	r3, r1, lsl #2
    131c:	00020000 	andeq	r0, r2, r0
    1320:	00000126 	andeq	r0, r0, r6, lsr #2
    1324:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1328:	0101000d 	tsteq	r1, sp
    132c:	00000101 	andeq	r0, r0, r1, lsl #2
    1330:	00000100 	andeq	r0, r0, r0, lsl #2
    1334:	2f2e2e01 	svccs	0x002e2e01
    1338:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    133c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1340:	2f2e2e2f 	svccs	0x002e2e2f
    1344:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1348:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 11ac <_start-0x6e54>
    134c:	2f636269 	svccs	0x00636269
    1350:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1354:	2f00676e 	svccs	0x0000676e
    1358:	2f727375 	svccs	0x00727375
    135c:	2f62696c 	svccs	0x0062696c
    1360:	2f636367 	svccs	0x00636367
    1364:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1368:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    136c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1370:	2e362f69 	cdpcs	15, 3, cr2, cr6, cr9, {3}
    1374:	2f312e33 	svccs	0x00312e33
    1378:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    137c:	00656475 	rsbeq	r6, r5, r5, ror r4
    1380:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1384:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    1388:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    138c:	6f6a2d62 	svcvs	0x006a2d62
    1390:	31577833 	cmpcc	r7, r3, lsr r8
    1394:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1398:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    139c:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    13a0:	30322e30 	eorscc	r2, r2, r0, lsr lr
    13a4:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    13a8:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    13ac:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    13b0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    13b4:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    13b8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    13bc:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    13c0:	2f007379 	svccs	0x00007379
    13c4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    13c8:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    13cc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    13d0:	336f6a2d 	cmncc	pc, #184320	; 0x2d000
    13d4:	2f315778 	svccs	0x00315778
    13d8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    13dc:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    13e0:	302e342e 	eorcc	r3, lr, lr, lsr #8
    13e4:	3130322e 	teqcc	r0, lr, lsr #4
    13e8:	32353036 	eorscc	r3, r5, #54	; 0x36
    13ec:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    13f0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    13f4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    13f8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    13fc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1400:	73000065 	movwvc	r0, #101	; 0x65
    1404:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    1408:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    140c:	00000100 	andeq	r0, r0, r0, lsl #2
    1410:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    1414:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1418:	00000200 	andeq	r0, r0, r0, lsl #4
    141c:	6b636f6c 	blvs	18dd1d4 <__bss_end+0x18c76a4>
    1420:	0300682e 	movweq	r6, #2094	; 0x82e
    1424:	745f0000 	ldrbvc	r0, [pc], #-0	; 142c <_start-0x6bd4>
    1428:	73657079 	cmnvc	r5, #121	; 0x79
    142c:	0300682e 	movweq	r6, #2094	; 0x82e
    1430:	65720000 	ldrbvs	r0, [r2, #-0]!
    1434:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1438:	00030068 	andeq	r0, r3, r8, rrx
    143c:	72747300 	rsbsvc	r7, r4, #0, 6
    1440:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    1444:	00040068 	andeq	r0, r4, r8, rrx
    1448:	05000000 	streq	r0, [r0, #-0]
    144c:	01463c02 	cmpeq	r6, r2, lsl #24
    1450:	00c80300 	sbceq	r0, r8, r0, lsl #6
    1454:	01180301 	tsteq	r8, r1, lsl #6
    1458:	03f26803 	mvnseq	r6, #196608	; 0x30000
    145c:	00354a18 	eorseq	r4, r5, r8, lsl sl
    1460:	06010402 	streq	r0, [r1], -r2, lsl #8
    1464:	2ca00666 	stccs	6, cr0, [r0], #408	; 0x198
    1468:	0a032b31 	beq	cc134 <__bss_end+0xb6604>
    146c:	2f654d2e 	svccs	0x00654d2e
    1470:	03472fb9 	movteq	r2, #32697	; 0x7fb9
    1474:	2f454a0c 	svccs	0x00454a0c
    1478:	4f2d2f49 	svcmi	0x002d2f49
    147c:	01000c02 	tsteq	r0, r2, lsl #24
    1480:	Address 0x0000000000001480 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      10:	6b636954 	blvs	18da568 <__bss_end+0x18c4a38>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      18:	76727000 	ldrbtvc	r7, [r2], -r0
      1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
      20:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
      24:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
      28:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
      2c:	00747075 	rsbseq	r7, r4, r5, ror r0
      30:	72615070 	rsbvc	r5, r1, #112	; 0x70
      34:	70006d61 	andvc	r6, r0, r1, ror #26
      38:	69724f78 	ldmdbvs	r2!, {r3, r4, r5, r6, r8, r9, sl, fp, lr}^
      3c:	616e6967 	cmnvs	lr, r7, ror #18
      40:	534f546c 	movtpl	r5, #62572	; 0xf46c
      44:	43425f00 	movtmi	r5, #12032	; 0x2f00
      48:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
      4c:	49545f35 	ldmdbmi	r4, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      50:	5f52454d 	svcpl	0x0052454d
      54:	53474552 	movtpl	r4, #30034	; 0x7552
      58:	6f687300 	svcvs	0x00687300
      5c:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
      60:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      64:	2064656e 	rsbcs	r6, r4, lr, ror #10
      68:	00746e69 	rsbseq	r6, r4, r9, ror #28
      6c:	41546470 	cmpmi	r4, r0, ror r4
      70:	435f4b53 	cmpmi	pc, #84992	; 0x14c00
      74:	0045444f 	subeq	r4, r5, pc, asr #8
      78:	726f5076 	rsbvc	r5, pc, #118	; 0x76
      7c:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
      80:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
      84:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
      88:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
      8c:	2f656d6f 	svccs	0x00656d6f
      90:	726f636d 	rsbvc	r6, pc, #-1275068415	; 0xb4000001
      94:	6e69742f 	cdpvs	4, 6, cr7, cr9, cr15, {1}
      98:	2f6e6e68 	svccs	0x006e6e68
      9c:	54526950 	ldrbpl	r6, [r2], #-2384	; 0xfffff6b0
      a0:	462f534f 	strtmi	r5, [pc], -pc, asr #6
      a4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      a8:	2f534f54 	svccs	0x00534f54
      ac:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
      b0:	702f6563 	eorvc	r6, pc, r3, ror #10
      b4:	6174726f 	cmnvs	r4, pc, ror #4
      b8:	2f656c62 	svccs	0x00656c62
      bc:	2f434347 	svccs	0x00434347
      c0:	70736152 	rsbsvc	r6, r3, r2, asr r1
      c4:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      c8:	2f695079 	svccs	0x00695079
      cc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      d0:	7600632e 	strvc	r6, [r0], -lr, lsr #6
      d4:	6b636954 	blvs	18da62c <__bss_end+0x18c4afc>
      d8:	00525349 	subseq	r5, r2, r9, asr #6
      dc:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
      e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
      e4:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      e8:	31314320 	teqcc	r1, r0, lsr #6
      ec:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
      f0:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      f4:	30373130 	eorscc	r3, r7, r0, lsr r1
      f8:	20303236 	eorscs	r3, r0, r6, lsr r2
      fc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     100:	613d6863 	teqvs	sp, r3, ror #16
     104:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     108:	6d2d207a 	stcvs	0, cr2, [sp, #-488]!	; 0xfffffe18
     10c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     110:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     114:	207a3676 	rsbscs	r3, sl, r6, ror r6
     118:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     11c:	613d6863 	teqvs	sp, r3, ror #16
     120:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     124:	672d207a 			; <UNDEFINED> instruction: 0x672d207a
     128:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     12c:	6c00672d 	stcvs	7, cr6, [r0], {45}	; 0x2d
     130:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     134:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     138:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     13c:	50767000 	rsbspl	r7, r6, r0
     140:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     144:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     148:	52700073 	rsbspl	r0, r0, #115	; 0x73
     14c:	00736765 	rsbseq	r6, r3, r5, ror #14
     150:	6f547870 	svcvs	0x00547870
     154:	53664f70 	cmnpl	r6, #112, 30	; 0x1c0
     158:	6b636174 	blvs	18d8730 <__bss_end+0x18c2c00>
     15c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     160:	6f642067 	svcvs	0x00642067
     164:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
     168:	6f507800 	svcvs	0x00507800
     16c:	74537472 	ldrbvc	r7, [r3], #-1138	; 0xfffffb8e
     170:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     174:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     178:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     17c:	50787000 	rsbspl	r7, r8, r0
     180:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     184:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     188:	73696c61 	cmnvc	r9, #24832	; 0x6100
     18c:	61745365 	cmnvs	r4, r5, ror #6
     190:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
     194:	6d6f436c 	stclvs	3, cr4, [pc, #-432]!	; ffffffec <_estack+0xf7feffec>
     198:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
     19c:	6374614d 	cmnvs	r4, #1073741843	; 0x40000013
     1a0:	50760068 	rsbspl	r0, r6, r8, rrx
     1a4:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     1a8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1ac:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     1b0:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     1b4:	6f682f00 	svcvs	0x00682f00
     1b8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; c <_start-0x7ff4>
     1bc:	2f726f63 	svccs	0x00726f63
     1c0:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     1c4:	502f6e6e 	eorpl	r6, pc, lr, ror #28
     1c8:	4f545269 	svcmi	0x00545269
     1cc:	72462f53 	subvc	r2, r6, #332	; 0x14c
     1d0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     1d4:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     1d8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     1dc:	6f702f65 	svcvs	0x00702f65
     1e0:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     1e4:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     1e8:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     1ec:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     1f0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     1f4:	702f6950 	eorvc	r6, pc, r0, asr r9	; <UNPREDICTABLE>
     1f8:	6974726f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     1fc:	632e7273 			; <UNDEFINED> instruction: 0x632e7273
     200:	436c7500 	cmnmi	ip, #0, 10
     204:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     208:	4e6c6163 	powmiez	f6, f4, f3
     20c:	69747365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     210:	7600676e 	strvc	r6, [r0], -lr, ror #14
     214:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     218:	74697845 	strbtvc	r7, [r9], #-2117	; 0xfffff7bb
     21c:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     220:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     224:	6f507600 	svcvs	0x00507600
     228:	53497472 	movtpl	r7, #38002	; 0x9472
     22c:	61745352 	cmnvs	r4, r2, asr r3
     230:	69467472 	stmdbvs	r6, {r1, r4, r5, r6, sl, ip, sp, lr}^
     234:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
     238:	006b7361 	rsbeq	r7, fp, r1, ror #6
     23c:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     240:	65695974 	strbvs	r5, [r9, #-2420]!	; 0xfffff68c
     244:	7250646c 	subsvc	r6, r0, #108, 8	; 0x6c000000
     248:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     24c:	00726f73 	rsbseq	r6, r2, r3, ror pc
     250:	65724676 	ldrbvs	r4, [r2, #-1654]!	; 0xfffff98a
     254:	4f545265 	svcmi	0x00545265
     258:	53495f53 	movtpl	r5, #40787	; 0x9f53
     25c:	5f670052 	svcpl	0x00670052
     260:	61745362 	cmnvs	r4, r2, ror #6
     264:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
     268:	43787000 	cmnmi	r8, #0
     26c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     270:	4354746e 	cmpmi	r4, #1845493760	; 0x6e000000
     274:	78700042 	ldmdavc	r0!, {r1, r6}^
     278:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     27c:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     280:	43524364 	cmpmi	r2, #100, 6	; 0x90000001
     284:	78700042 	ldmdavc	r0!, {r1, r6}^
     288:	706d6554 	rsbvc	r6, sp, r4, asr r5
     28c:	6f437600 	svcvs	0x00437600
     290:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     294:	41656e69 	cmnmi	r5, r9, ror #28
     298:	6f546464 	svcvs	0x00546464
     29c:	616c6544 	cmnvs	ip, r4, asr #10
     2a0:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
     2a4:	00747369 	rsbseq	r7, r4, r9, ror #6
     2a8:	6f437670 	svcvs	0x00437670
     2ac:	6961746e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     2b0:	0072656e 	rsbseq	r6, r2, lr, ror #10
     2b4:	6f437870 	svcvs	0x00437870
     2b8:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     2bc:	46656e69 	strbtmi	r6, [r5], -r9, ror #28
     2c0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     2c4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     2c8:	73615078 	cmnvc	r1, #120	; 0x78
     2cc:	54646573 	strbtpl	r6, [r4], #-1395	; 0xfffffa8d
     2d0:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     2d4:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     2d8:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     2dc:	74497800 	strbvc	r7, [r9], #-2048	; 0xfffff800
     2e0:	61566d65 	cmpvs	r6, r5, ror #26
     2e4:	0065756c 	rsbeq	r7, r5, ip, ror #10
     2e8:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     2ec:	6f54736b 	svcvs	0x0054736b
     2f0:	616c6544 	cmnvs	ip, r4, asr #10
     2f4:	4c780079 	ldclmi	0, cr0, [r8], #-484	; 0xfffffe1c
     2f8:	45747369 	ldrbmi	r7, [r4, #-873]!	; 0xfffffc97
     2fc:	7000646e 	andvc	r6, r0, lr, ror #8
     300:	6e774f76 	mrcvs	15, 3, r4, cr7, cr6, {3}
     304:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     308:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
     30c:	6b636954 	blvs	18da864 <__bss_end+0x18c4d34>
     310:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     314:	43780074 	cmnmi	r8, #116	; 0x74
     318:	756f526f 	strbvc	r5, [pc, #-623]!	; b1 <_start-0x7f4f>
     31c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     320:	6b636954 	blvs	18da878 <__bss_end+0x18c4d48>
     324:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     328:	4c780074 	ldclmi	0, cr0, [r8], #-464	; 0xfffffe30
     32c:	5f545349 	svcpl	0x00545349
     330:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     334:	43787000 	cmnmi	r8, #0
     338:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     33c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     340:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     344:	6f43706f 	svcvs	0x0043706f
     348:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     34c:	52656e69 	rsbpl	r6, r5, #1680	; 0x690
     350:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     354:	6f697250 	svcvs	0x00697250
     358:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     35c:	65447800 	strbvs	r7, [r4, #-2048]	; 0xfffff800
     360:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     364:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
     368:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     36c:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     370:	00317473 	eorseq	r7, r1, r3, ror r4
     374:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     378:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     37c:	6f526f43 	svcvs	0x00526f43
     380:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     384:	73694c65 	cmnvc	r9, #25856	; 0x6500
     388:	63003274 	movwvs	r3, #628	; 0x274
     38c:	5243726f 	subpl	r7, r3, #-268435450	; 0xf0000006
     390:	70004243 	andvc	r4, r0, r3, asr #4
     394:	43524378 	cmpmi	r2, #120, 6	; 0xe0000001
     398:	682f0042 	stmdavs	pc!, {r1, r6}	; <UNPREDICTABLE>
     39c:	2f656d6f 	svccs	0x00656d6f
     3a0:	726f636d 	rsbvc	r6, pc, #-1275068415	; 0xb4000001
     3a4:	6e69742f 	cdpvs	4, 6, cr7, cr9, cr15, {1}
     3a8:	2f6e6e68 	svccs	0x006e6e68
     3ac:	54526950 	ldrbpl	r6, [r2], #-2384	; 0xfffff6b0
     3b0:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     3b4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     3b8:	2f534f54 	svccs	0x00534f54
     3bc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3c0:	632f6563 			; <UNDEFINED> instruction: 0x632f6563
     3c4:	74756f72 	ldrbtvc	r6, [r5], #-3954	; 0xfffff08e
     3c8:	2e656e69 	cdpcs	14, 6, cr6, cr5, cr9, {3}
     3cc:	78700063 	ldmdavc	r0!, {r0, r1, r5, r6}^
     3d0:	76657250 			; <UNDEFINED> instruction: 0x76657250
     3d4:	73756f69 	cmnvc	r5, #420	; 0x1a4
     3d8:	43787000 	cmnmi	r8, #0
     3dc:	756f526f 	strbvc	r5, [pc, #-623]!	; 175 <_start-0x7e8b>
     3e0:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     3e4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     3e8:	726f6300 	rsbvc	r6, pc, #0, 6
     3ec:	6f526f43 	svcvs	0x00526f43
     3f0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3f4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     3f8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 230 <_start-0x7dd0>
     3fc:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     400:	4378006b 	cmnmi	r8, #107	; 0x6b
     404:	756f526f 	strbvc	r5, [pc, #-623]!	; 19d <_start-0x7e63>
     408:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     40c:	6f6d6552 	svcvs	0x006d6552
     410:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
     414:	76456d6f 	strbvc	r6, [r5], -pc, ror #26
     418:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
     41c:	00747369 	rsbseq	r7, r4, r9, ror #6
     420:	65527870 	ldrbvs	r7, [r2, #-2160]	; 0xfffff790
     424:	43796461 	cmnmi	r9, #1627389952	; 0x61000000
     428:	756f526f 	strbvc	r5, [pc, #-623]!	; 1c1 <_start-0x7e3f>
     42c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     430:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     434:	78750073 	ldmdavc	r5!, {r0, r1, r4, r5, r6}^
     438:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     43c:	4d780078 	ldclmi	0, cr0, [r8, #-480]!	; 0xfffffe20
     440:	4c696e69 	stclmi	14, cr6, [r9], #-420	; 0xfffffe5c
     444:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     448:	006d6574 	rsbeq	r6, sp, r4, ror r5
     44c:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     450:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     454:	7243656e 	subvc	r6, r3, #461373440	; 0x1b800000
     458:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     45c:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
     460:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     464:	49664f72 	stmdbmi	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, lr}^
     468:	736d6574 	cmnvc	sp, #116, 10	; 0x1d000000
     46c:	43787000 	cmnmi	r8, #0
     470:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     474:	6f43746e 	svcvs	0x0043746e
     478:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     47c:	00656e69 	rsbeq	r6, r5, r9, ror #28
     480:	72507875 	subsvc	r7, r0, #7667712	; 0x750000
     484:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     488:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     48c:	6f526f43 	svcvs	0x00526f43
     490:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     494:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
     498:	00656c64 	rsbeq	r6, r5, r4, ror #24
     49c:	6e655078 	mcrvs	0, 3, r5, cr5, cr8, {3}
     4a0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     4a4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     4a8:	526f4379 	rsbpl	r4, pc, #-469762047	; 0xe4000001
     4ac:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4b0:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     4b4:	70007473 	andvc	r7, r0, r3, ror r4
     4b8:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     4bc:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     4c0:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     4c4:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     4c8:	4c780074 	ldclmi	0, cr0, [r8], #-464	; 0xfffffe30
     4cc:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     4d0:	006d6574 	rsbeq	r6, sp, r4, ror r5
     4d4:	526f4376 	rsbpl	r4, pc, #-671088639	; 0xd8000001
     4d8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4dc:	6353656e 	cmpvs	r3, #461373440	; 0x1b800000
     4e0:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     4e4:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     4e8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     4ec:	61576f54 	cmpvs	r7, r4, asr pc
     4f0:	7000656b 	andvc	r6, r0, fp, ror #10
     4f4:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     4f8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4fc:	7500656e 	strvc	r6, [r0, #-1390]	; 0xfffffa92
     500:	61745378 	cmnvs	r4, r8, ror r3
     504:	70006574 	andvc	r6, r0, r4, ror r5
     508:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     50c:	6f6c6672 	svcvs	0x006c6672
     510:	6c654477 	cfstrdvs	mvd4, [r5], #-476	; 0xfffffe24
     514:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     518:	6f526f43 	svcvs	0x00526f43
     51c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     520:	73694c65 	cmnvc	r9, #25856	; 0x6500
     524:	4d780074 	ldclmi	0, cr0, [r8, #-464]!	; 0xfffffe30
     528:	5f494e49 	svcpl	0x00494e49
     52c:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
     530:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0xfffff6a1
     534:	4c78004d 	ldclmi	0, cr0, [r8], #-308	; 0xfffffecc
     538:	00545349 	subseq	r5, r4, r9, asr #6
     53c:	65447870 	strbvs	r7, [r4, #-2160]	; 0xfffff790
     540:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     544:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
     548:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     54c:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     550:	70007473 	andvc	r7, r0, r3, ror r4
     554:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     558:	506b6365 	rsbpl	r6, fp, r5, ror #6
     55c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     560:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     564:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
     568:	00747369 	rsbseq	r7, r4, r9, ror #6
     56c:	6e654778 	mcrvs	7, 3, r4, cr5, cr8, {3}
     570:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     574:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     578:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     57c:	76727000 	ldrbtvc	r7, [r2], -r0
     580:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     584:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     588:	6f436573 	svcvs	0x00436573
     58c:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     590:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     594:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     598:	76457800 	strbvc	r7, [r5], -r0, lsl #16
     59c:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
     5a0:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     5a4:	006d6574 	rsbeq	r6, sp, r4, ror r5
     5a8:	43767270 	cmnmi	r6, #112, 4
     5ac:	6b636568 	blvs	18d9b54 <__bss_end+0x18c4024>
     5b0:	616c6544 	cmnvs	ip, r4, asr #10
     5b4:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
     5b8:	00747369 	rsbseq	r7, r4, r9, ror #6
     5bc:	4f437263 	svcmi	0x00437263
     5c0:	54554f52 	ldrbpl	r4, [r5], #-3922	; 0xfffff0ae
     5c4:	5f454e49 	svcpl	0x00454e49
     5c8:	45444f43 	strbmi	r4, [r4, #-3907]	; 0xfffff0bd
     5cc:	73645f00 	cmnvc	r4, #0, 30
     5d0:	61685f6f 	cmnvs	r8, pc, ror #30
     5d4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     5d8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     5dc:	5f00657a 	svcpl	0x0000657a
     5e0:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     5e4:	5f003834 	svcpl	0x00003834
     5e8:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
     5ec:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
     5f0:	645f0079 	ldrbvs	r0, [pc], #-121	; 5f8 <_start-0x7a08>
     5f4:	00617461 	rsbeq	r7, r1, r1, ror #8
     5f8:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
     5fc:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     600:	6174735f 	cmnvs	r4, pc, asr r3
     604:	5f006574 	svcpl	0x00006574
     608:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
     60c:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     610:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     614:	00657461 	rsbeq	r7, r5, r1, ror #8
     618:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     61c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     620:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     624:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     628:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     62c:	5f00746e 	svcpl	0x0000746e
     630:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
     634:	00657a69 	rsbeq	r7, r5, r9, ror #20
     638:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
     63c:	73694c77 	cmnvc	r9, #30464	; 0x7700
     640:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     644:	6d5f006d 	ldclvs	0, cr0, [pc, #-436]	; 498 <_start-0x7b68>
     648:	6f747262 	svcvs	0x00747262
     64c:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
     650:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     654:	63775f00 	cmnvs	r7, #0, 30
     658:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     65c:	6174735f 	cmnvs	r4, pc, asr r3
     660:	5f006574 	svcpl	0x00006574
     664:	5f6d745f 	svcpl	0x006d745f
     668:	00636573 	rsbeq	r6, r3, r3, ror r5
     66c:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
     670:	625f0066 	subsvs	r0, pc, #102	; 0x66
     674:	00657361 	rsbeq	r7, r5, r1, ror #6
     678:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     67c:	756f685f 	strbvc	r6, [pc, #-2143]!	; fffffe25 <_estack+0xf7fefe25>
     680:	5f5f0072 	svcpl	0x005f0072
     684:	5f006673 	svcpl	0x00006673
     688:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff821 <_estack+0xf7fef821>
     68c:	5f746978 	svcpl	0x00746978
     690:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     694:	6f635f00 	svcvs	0x00635f00
     698:	65696b6f 	strbvs	r6, [r9, #-2927]!	; 0xfffff491
     69c:	735f5f00 	cmpvc	pc, #0, 30
     6a0:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
     6a4:	6c665f00 	stclvs	15, cr5, [r6], #-0
     6a8:	00736761 	rsbseq	r6, r3, r1, ror #14
     6ac:	5f73695f 	svcpl	0x0073695f
     6b0:	00617863 	rsbeq	r7, r1, r3, ror #16
     6b4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     6b8:	5f006e69 	svcpl	0x00006e69
     6bc:	736b6c62 	cmnvc	fp, #25088	; 0x6200
     6c0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     6c4:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     6c8:	00667562 	rsbeq	r7, r6, r2, ror #10
     6cc:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     6d0:	00746573 	rsbseq	r6, r4, r3, ror r5
     6d4:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
     6d8:	76006d65 	strvc	r6, [r0], -r5, ror #26
     6dc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     6e0:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
     6e4:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
     6e8:	6d5f0064 	ldclvs	0, cr0, [pc, #-400]	; 560 <_start-0x7aa0>
     6ec:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
     6f0:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
     6f4:	6174735f 	cmnvs	r4, pc, asr r3
     6f8:	5f006574 	svcpl	0x00006574
     6fc:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
     700:	735f6e65 	cmpvc	pc, #1616	; 0x650
     704:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     708:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     70c:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     710:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     714:	4c760073 	ldclmi	0, cr0, [r6], #-460	; 0xfffffe34
     718:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     71c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     720:	73696c61 	cmnvc	r9, #24832	; 0x6100
     724:	65744965 	ldrbvs	r4, [r4, #-2405]!	; 0xfffff69b
     728:	735f006d 	cmpvc	pc, #109	; 0x6d
     72c:	006e6769 	rsbeq	r6, lr, r9, ror #14
     730:	6f6c665f 	svcvs	0x006c665f
     734:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 73c <_start-0x78c4>
     738:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     73c:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
     740:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
     744:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
     748:	61675f00 	cmnvs	r7, r0, lsl #30
     74c:	5f616d6d 	svcpl	0x00616d6d
     750:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     754:	006d6167 	rsbeq	r6, sp, r7, ror #2
     758:	6165725f 	cmnvs	r5, pc, asr r2
     75c:	725f0064 	subsvc	r0, pc, #100	; 0x64
     760:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     764:	006b5f74 	rsbeq	r5, fp, r4, ror pc
     768:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     76c:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
     770:	00626863 	rsbeq	r6, r2, r3, ror #16
     774:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     778:	0074756f 	rsbseq	r7, r4, pc, ror #10
     77c:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     780:	006e656c 	rsbeq	r6, lr, ip, ror #10
     784:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
     788:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     78c:	73626f69 	cmnvc	r2, #420	; 0x1a4
     790:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
     794:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
     798:	735f0030 	cmpvc	pc, #48	; 0x30
     79c:	616e6769 	cmnvs	lr, r9, ror #14
     7a0:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
     7a4:	615f0066 	cmpvs	pc, r6, rrx
     7a8:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     7ac:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     7b0:	5f006675 	svcpl	0x00006675
     7b4:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
     7b8:	5f00746c 	svcpl	0x0000746c
     7bc:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     7c0:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
     7c4:	00745f74 	rsbseq	r5, r4, r4, ror pc
     7c8:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     7cc:	4c76006b 	ldclmi	0, cr0, [r6], #-428	; 0xfffffe54
     7d0:	52747369 	rsbspl	r7, r4, #-1543503871	; 0xa4000001
     7d4:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     7d8:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     7dc:	7367616c 	cmnvc	r7, #108, 2
     7e0:	775f0032 	smmlarvc	pc, r2, r0, r0	; <UNPREDICTABLE>
     7e4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     7e8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 7f0 <_start-0x7810>
     7ec:	65795f6d 	ldrbvs	r5, [r9, #-3949]!	; 0xfffff093
     7f0:	2f007261 	svccs	0x00007261
     7f4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     7f8:	6f636d2f 	svcvs	0x00636d2f
     7fc:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     800:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
     804:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
     808:	2f534f54 	svccs	0x00534f54
     80c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     810:	534f5452 	movtpl	r5, #62546	; 0xf452
     814:	756f532f 	strbvc	r5, [pc, #-815]!	; 4ed <_start-0x7b13>
     818:	2f656372 	svccs	0x00656372
     81c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     820:	7000632e 	andvc	r6, r0, lr, lsr #6
     824:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     828:	526f546d 	rsbpl	r5, pc, #1828716544	; 0x6d000000
     82c:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     830:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     834:	66747865 	ldrbtvs	r7, [r4], -r5, ror #16
     838:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 840 <_start-0x77c0>
     83c:	6f6d5f6d 	svcvs	0x006d5f6d
     840:	615f006e 	cmpvs	pc, lr, rrx
     844:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     848:	75730074 	ldrbvc	r0, [r3, #-116]!	; 0xffffff8c
     84c:	74706f62 	ldrbtvc	r6, [r0], #-3938	; 0xfffff09e
     850:	00677261 	rsbeq	r7, r7, r1, ror #4
     854:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
     858:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
     85c:	5f007469 	svcpl	0x00007469
     860:	5f66666f 	svcpl	0x0066666f
     864:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     868:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
     86c:	00747369 	rsbseq	r7, r4, r9, ror #6
     870:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
     874:	45525f4b 	ldrbmi	r5, [r2, #-3915]	; 0xfffff0b5
     878:	53525543 	cmppl	r2, #281018368	; 0x10c00000
     87c:	5f455649 	svcpl	0x00455649
     880:	6e750054 	mrcvs	0, 3, r0, cr5, cr4, {2}
     884:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     888:	63206465 			; <UNDEFINED> instruction: 0x63206465
     88c:	00726168 	rsbseq	r6, r2, r8, ror #2
     890:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     894:	5f685f00 	svcpl	0x00685f00
     898:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
     89c:	6873006f 	ldmdavs	r3!, {r0, r1, r2, r3, r5, r6}^
     8a0:	2074726f 	rsbscs	r7, r4, pc, ror #4
     8a4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     8a8:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     8ac:	6164795f 	cmnvs	r4, pc, asr r9
     8b0:	5f5f0079 	svcpl	0x005f0079
     8b4:	66756273 			; <UNDEFINED> instruction: 0x66756273
     8b8:	6f695f00 	svcvs	0x00695f00
     8bc:	5f007362 	svcpl	0x00007362
     8c0:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
     8c4:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 7b8 <_start-0x7848>
     8c8:	61747362 	cmnvs	r4, r2, ror #6
     8cc:	745f6574 	ldrbvc	r6, [pc], #-1396	; 8d4 <_start-0x772c>
     8d0:	735f5f00 	cmpvc	pc, #0, 30
     8d4:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     8d8:	626d5f00 	rsbvs	r5, sp, #0, 30
     8dc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     8e0:	725f0065 	subsvc	r0, pc, #101	; 0x65
     8e4:	5f646e61 	svcpl	0x00646e61
     8e8:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     8ec:	626d5f00 	rsbvs	r5, sp, #0, 30
     8f0:	5f6e656c 	svcpl	0x006e656c
     8f4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     8f8:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
     8fc:	5f00636e 	svcpl	0x0000636e
     900:	00646e69 	rsbeq	r6, r4, r9, ror #28
     904:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
     908:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     90c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     910:	00656c61 	rsbeq	r6, r5, r1, ror #24
     914:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
     918:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
     91c:	6d5f0070 	ldclvs	0, cr0, [pc, #-448]	; 764 <_start-0x789c>
     920:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
     924:	725f0073 	subsvc	r0, pc, #115	; 0x73
     928:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     92c:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
     930:	5f006465 	svcpl	0x00006465
     934:	756f635f 	strbvc	r6, [pc, #-863]!	; 5dd <_start-0x7a23>
     938:	5f00746e 	svcpl	0x0000746e
     93c:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
     940:	5f006575 	svcpl	0x00006575
     944:	6b656573 	blvs	1959f18 <__bss_end+0x19443e8>
     948:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     94c:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     950:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
     954:	70665f00 	rsbvc	r5, r6, r0, lsl #30
     958:	745f736f 	ldrbvc	r7, [pc], #-879	; 960 <_start-0x76a0>
     95c:	4c787000 	ldclmi	0, cr7, [r8], #-0
     960:	00747369 	rsbseq	r7, r4, r9, ror #6
     964:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     968:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
     96c:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
     970:	5f00746c 	svcpl	0x0000746c
     974:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
     978:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
     97c:	00747361 	rsbseq	r7, r4, r1, ror #6
     980:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
     984:	73657079 	cmnvc	r5, #121	; 0x79
     988:	64615f00 	strbtvs	r5, [r1], #-3840	; 0xfffff100
     98c:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
     990:	72657449 	rsbvc	r7, r5, #1224736768	; 0x49000000
     994:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
     998:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffffaa0 <_estack+0xf7fefaa0>
     99c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
     9a0:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
     9a4:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
     9a8:	72655f65 	rsbvc	r5, r5, #404	; 0x194
     9ac:	675f0072 			; <UNDEFINED> instruction: 0x675f0072
     9b0:	61626f6c 	cmnvs	r2, ip, ror #30
     9b4:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
     9b8:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
     9bc:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     9c0:	75635f00 	strbvc	r5, [r3, #-3840]!	; 0xfffff100
     9c4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     9c8:	61635f74 	smcvs	13812	; 0x35f4
     9cc:	6f676574 	svcvs	0x00676574
     9d0:	5f007972 	svcpl	0x00007972
     9d4:	73756e75 	cmnvc	r5, #1872	; 0x750
     9d8:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
     9dc:	00646e61 	rsbeq	r6, r4, r1, ror #28
     9e0:	73694c76 	cmnvc	r9, #30208	; 0x7600
     9e4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     9e8:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     9ec:	00657369 	rsbeq	r7, r5, r9, ror #6
     9f0:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
     9f4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 9fc <_start-0x7604>
     9f8:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
     9fc:	5f007961 	svcpl	0x00007961
     a00:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
     a04:	6d6e5f00 	stclvs	15, cr5, [lr, #-0]
     a08:	6f6c6c61 	svcvs	0x006c6c61
     a0c:	6c5f0063 	mrrcvs	0, 6, r0, pc, cr3	; <UNPREDICTABLE>
     a10:	5f613436 	svcpl	0x00613436
     a14:	00667562 	rsbeq	r7, r6, r2, ror #10
     a18:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     a1c:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
     a20:	56780063 	ldrbtpl	r0, [r8], -r3, rrx
     a24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     a28:	6e49664f 	cdpvs	6, 4, cr6, cr9, cr15, {2}
     a2c:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
     a30:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     a34:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
     a38:	755f0066 	ldrbvc	r0, [pc, #-102]	; 9da <_start-0x7626>
     a3c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     a40:	5f5f0064 	svcpl	0x005f0064
     a44:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     a48:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
     a4c:	6f6c5f00 	svcvs	0x006c5f00
     a50:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
     a54:	5f656d69 	svcpl	0x00656d69
     a58:	00667562 	rsbeq	r7, r6, r2, ror #10
     a5c:	6f6c635f 	svcvs	0x006c635f
     a60:	5f006573 	svcpl	0x00006573
     a64:	00383472 	eorseq	r3, r8, r2, ror r4
     a68:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
     a6c:	5f63776f 	svcpl	0x0063776f
     a70:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     a74:	705f0065 	subsvc	r0, pc, r5, rrx
     a78:	5f007335 	svcpl	0x00007335
     a7c:	5f6d745f 	svcpl	0x006d745f
     a80:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
     a84:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     a88:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     a8c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     a90:	65536369 	ldrbvs	r6, [r3, #-873]	; 0xfffffc97
     a94:	7246646e 	subvc	r6, r6, #1845493760	; 0x6e000000
     a98:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     a9c:	63750052 	cmnvs	r5, #82	; 0x52
     aa0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     aa4:	70795465 	rsbsvc	r5, r9, r5, ror #8
     aa8:	51780065 	cmnpl	r8, r5, rrx
     aac:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     ab0:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
     ab4:	46657565 	strbtmi	r7, [r5], -r5, ror #10
     ab8:	466c6c75 			; <UNDEFINED> instruction: 0x466c6c75
     abc:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     ac0:	75005253 	strvc	r5, [r0, #-595]	; 0xfffffdad
     ac4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     ac8:	654d6575 	strbvs	r6, [sp, #-1397]	; 0xfffffa8b
     acc:	67617373 			; <UNDEFINED> instruction: 0x67617373
     ad0:	61577365 	cmpvs	r7, r5, ror #6
     ad4:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     ad8:	78700067 	ldmdavc	r0!, {r0, r1, r2, r5, r6}^
     adc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     ae0:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
     ae4:	745f657a 	ldrbvc	r6, [pc], #-1402	; aec <_start-0x7514>
     ae8:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     aec:	49657565 	stmdbmi	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
     af0:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     af4:	6d456575 	cfstr64vs	mvdx6, [r5, #-468]	; 0xfffffe2c
     af8:	46797470 			; <UNDEFINED> instruction: 0x46797470
     afc:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     b00:	78005253 	stmdavc	r0, {r0, r1, r4, r6, r9, ip, lr}
     b04:	6f4c7854 	svcvs	0x004c7854
     b08:	76006b63 	strvc	r6, [r0], -r3, ror #22
     b0c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     b10:	6c654465 	cfstrdvs	mvd4, [r5], #-404	; 0xfffffe6c
     b14:	00657465 	rsbeq	r7, r5, r5, ror #8
     b18:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     b1c:	6157736b 	cmpvs	r7, fp, ror #6
     b20:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     b24:	526f5467 	rsbpl	r5, pc, #1728053248	; 0x67000000
     b28:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     b2c:	2f006576 	svccs	0x00006576
     b30:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     b34:	6f636d2f 	svcvs	0x00636d2f
     b38:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     b3c:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
     b40:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
     b44:	2f534f54 	svccs	0x00534f54
     b48:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     b4c:	534f5452 	movtpl	r5, #62546	; 0xf452
     b50:	756f532f 	strbvc	r5, [pc, #-815]!	; 829 <_start-0x77d7>
     b54:	2f656372 	svccs	0x00656372
     b58:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
     b5c:	00632e65 	rsbeq	r2, r3, r5, ror #28
     b60:	43767270 	cmnmi	r6, #112, 4
     b64:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
     b68:	54617461 	strbtpl	r7, [r1], #-1121	; 0xfffffb9f
     b6c:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
     b70:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     b74:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     b78:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     b7c:	52637000 	rsbpl	r7, r3, #0
     b80:	46646165 	strbtmi	r6, [r4], -r5, ror #2
     b84:	006d6f72 	rsbeq	r6, sp, r2, ror pc
     b88:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     b8c:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     b90:	75466575 	strbvc	r6, [r6, #-1397]	; 0xfffffa8b
     b94:	78006c6c 	stmdavc	r0, {r2, r3, r5, r6, sl, fp, sp, lr}
     b98:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
     b9c:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     ba0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     ba4:	51780074 	cmnpl	r8, r4, ror r0
     ba8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     bac:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     bb0:	52636972 	rsbpl	r6, r3, #1867776	; 0x1c8000
     bb4:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     bb8:	75006576 	strvc	r6, [r0, #-1398]	; 0xfffffa8a
     bbc:	76615378 			; <UNDEFINED> instruction: 0x76615378
     bc0:	6e496465 	cdpvs	4, 4, cr6, cr9, cr5, {3}
     bc4:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     bc8:	53747075 	cmnpl	r4, #117	; 0x75
     bcc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     bd0:	63700073 	cmnvs	r0, #115	; 0x73
     bd4:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
     bd8:	754a7800 	strbvc	r7, [sl, #-2048]	; 0xfffff800
     bdc:	65507473 	ldrbvs	r7, [r0, #-1139]	; 0xfffffb8d
     be0:	6e696b65 	vnmulvs.f64	d22, d9, d21
     be4:	72700067 	rsbsvc	r0, r0, #103	; 0x67
     be8:	51734976 	cmnpl	r3, r6, ror r9
     bec:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     bf0:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xfffff2bb
     bf4:	51780079 	cmnpl	r8, r9, ror r0
     bf8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     bfc:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     c00:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
     c04:	00646e65 	rsbeq	r6, r4, r5, ror #28
     c08:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     c0c:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
     c10:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     c14:	52787500 	rsbspl	r7, r8, #0, 10
     c18:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     c1c:	5178006e 	cmnpl	r8, lr, rrx
     c20:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     c24:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     c28:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     c2c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     c30:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
     c34:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     c38:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; b28 <_start-0x74d8>
     c3c:	00525349 	subseq	r5, r2, r9, asr #6
     c40:	654c7875 	strbvs	r7, [ip, #-2165]	; 0xfffff78b
     c44:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     c48:	4f637000 	svcmi	0x00637000
     c4c:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c50:	526c616e 	rsbpl	r6, ip, #-2147483621	; 0x8000001b
     c54:	50646165 	rsbpl	r6, r4, r5, ror #2
     c58:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     c5c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     c60:	69487870 	stmdbvs	r8, {r4, r5, r6, fp, ip, sp, lr}^
     c64:	72656867 	rsbvc	r6, r5, #6750208	; 0x670000
     c68:	6f697250 	svcvs	0x00697250
     c6c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c70:	6b736154 	blvs	1cd91c8 <__bss_end+0x1cc3698>
     c74:	656b6f57 	strbvs	r6, [fp, #-3927]!	; 0xfffff0a9
     c78:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
     c7c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     c80:	6e654c65 	cdpvs	12, 6, cr4, cr5, cr5, {3}
     c84:	00687467 	rsbeq	r7, r8, r7, ror #8
     c88:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
     c8c:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
     c90:	61737365 	cmnvs	r3, r5, ror #6
     c94:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     c98:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     c9c:	7246676e 	subvc	r6, r6, #28835840	; 0x1b80000
     ca0:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     ca4:	76700052 			; <UNDEFINED> instruction: 0x76700052
     ca8:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     cac:	75516f54 	ldrbvc	r6, [r1, #-3924]	; 0xfffff0ac
     cb0:	00657565 	rsbeq	r7, r5, r5, ror #10
     cb4:	45555178 	ldrbmi	r5, [r5, #-376]	; 0xfffffe88
     cb8:	78004555 	stmdavc	r0, {r0, r2, r4, r6, r8, sl, lr}
     cbc:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
     cc0:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
     cc4:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
     cc8:	65755100 	ldrbvs	r5, [r5, #-256]!	; 0xffffff00
     ccc:	65446575 	strbvs	r6, [r4, #-1397]	; 0xfffffa8b
     cd0:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
     cd4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     cd8:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     cdc:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0xfffff89b
     ce0:	00657565 	rsbeq	r7, r5, r5, ror #10
     ce4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     ce8:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     cec:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     cf0:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0xfffffc9d
     cf4:	00657461 	rsbeq	r7, r5, r1, ror #8
     cf8:	43767270 	cmnmi	r6, #112, 4
     cfc:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
     d00:	46617461 	strbtmi	r7, [r1], -r1, ror #8
     d04:	516d6f72 	smcpl	55026	; 0xd6f2
     d08:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     d0c:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
     d10:	61737365 	cmnvs	r3, r5, ror #6
     d14:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     d18:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     d1c:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     d20:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     d24:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     d28:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     d2c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     d30:	43780074 	cmnmi	r8, #116	; 0x74
     d34:	5079706f 	rsbspl	r7, r9, pc, rrx
     d38:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     d3c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     d40:	55767270 	ldrbpl	r7, [r6, #-624]!	; 0xfffffd90
     d44:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
     d48:	6575516b 	ldrbvs	r5, [r5, #-363]!	; 0xfffffe95
     d4c:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     d50:	6f4c7852 	svcvs	0x004c7852
     d54:	70006b63 	andvc	r6, r0, r3, ror #22
     d58:	69615463 	stmdbvs	r1!, {r0, r1, r5, r6, sl, ip, lr}^
     d5c:	5078006c 	rsbspl	r0, r8, ip, rrx
     d60:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     d64:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     d68:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     d6c:	6157736b 	cmpvs	r7, fp, ror #6
     d70:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     d74:	536f5467 	cmnpl	pc, #1728053248	; 0x67000000
     d78:	00646e65 	rsbeq	r6, r4, r5, ror #28
     d7c:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     d80:	69536575 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     d84:	6e49657a 	mcrvs	5, 2, r6, cr9, cr10, {3}
     d88:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
     d8c:	63700073 	cmnvs	r0, #115	; 0x73
     d90:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
     d94:	006f5465 	rsbeq	r5, pc, r5, ror #8
     d98:	74497875 	strbvc	r7, [r9], #-2165	; 0xfffff78b
     d9c:	69536d65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
     da0:	7800657a 	stmdavc	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
     da4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     da8:	6e456e4f 	cdpvs	14, 4, cr6, cr5, cr15, {2}
     dac:	69726574 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     db0:	7000676e 	andvc	r6, r0, lr, ror #14
     db4:	66754276 			; <UNDEFINED> instruction: 0x66754276
     db8:	00726566 	rsbseq	r6, r2, r6, ror #10
     dbc:	61546370 	cmpvs	r4, r0, ror r3
     dc0:	614e6b73 	hvcvs	59059	; 0xe6b3
     dc4:	7600656d 	strvc	r6, [r0], -sp, ror #10
     dc8:	6b736154 	blvs	1cd9320 <__bss_end+0x1cc37f0>
     dcc:	53646e45 	cmnpl	r4, #1104	; 0x450
     dd0:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     dd4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     dd8:	6b737400 	blvs	1cddde0 <__bss_end+0x1cc82b0>
     ddc:	6b736154 	blvs	1cd9334 <__bss_end+0x1cc3804>
     de0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     de4:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     de8:	6b636f6c 	blvs	18dcba0 <__bss_end+0x18c7070>
     dec:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     df0:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     df4:	754e7465 	strbvc	r7, [lr, #-1125]	; 0xfffffb9b
     df8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     dfc:	6154664f 	cmpvs	r4, pc, asr #12
     e00:	00736b73 	rsbseq	r6, r3, r3, ror fp
     e04:	6f547875 	svcvs	0x00547875
     e08:	61655270 	smcvs	21792	; 0x5520
     e0c:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     e10:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e14:	75007974 	strvc	r7, [r0, #-2420]	; 0xfffff68c
     e18:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     e1c:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
     e20:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     e24:	74654779 	strbtvc	r4, [r5], #-1913	; 0xfffff887
     e28:	63537800 	cmpvs	r3, #0, 16
     e2c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     e30:	5272656c 	rsbspl	r6, r2, #108, 10	; 0x1b000000
     e34:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     e38:	7000676e 	andvc	r6, r0, lr, ror #14
     e3c:	61655278 	smcvs	21800	; 0x5528
     e40:	61547964 	cmpvs	r4, r4, ror #18
     e44:	4c736b73 			; <UNDEFINED> instruction: 0x4c736b73
     e48:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     e4c:	506c7500 	rsbpl	r7, ip, r0, lsl #10
     e50:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     e54:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     e58:	54760073 	ldrbtpl	r0, [r6], #-115	; 0xffffff8d
     e5c:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     e60:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     e64:	754f656d 	strbvc	r6, [pc, #-1389]	; 8ff <_start-0x7701>
     e68:	61745374 	cmnvs	r4, r4, ror r3
     e6c:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
     e70:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     e74:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     e78:	6f697250 	svcvs	0x00697250
     e7c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e80:	65447800 	strbvs	r7, [r4, #-2048]	; 0xfffff800
     e84:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     e88:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
     e8c:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
     e90:	78003174 	stmdavc	r0, {r2, r4, r5, r6, r8, ip, sp}
     e94:	616c6544 	cmnvs	ip, r4, asr #10
     e98:	54646579 	strbtpl	r6, [r4], #-1401	; 0xfffffa87
     e9c:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
     ea0:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
     ea4:	6f682f00 	svcvs	0x00682f00
     ea8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; cfc <_start-0x7304>
     eac:	2f726f63 	svccs	0x00726f63
     eb0:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
     eb4:	502f6e6e 	eorpl	r6, pc, lr, ror #28
     eb8:	4f545269 	svcmi	0x00545269
     ebc:	54760053 	ldrbtpl	r0, [r6], #-83	; 0xffffffad
     ec0:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     ec4:	70417465 	subvc	r7, r1, r5, ror #8
     ec8:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
     ecc:	6f697461 	svcvs	0x00697461
     ed0:	7361546e 	cmnvc	r1, #1845493760	; 0x6e000000
     ed4:	6761546b 	strbvs	r5, [r1, -fp, ror #8]!
     ed8:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
     edc:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
     ee0:	63695464 	cmnvs	r9, #100, 8	; 0x64000000
     ee4:	7000736b 	andvc	r7, r0, fp, ror #6
     ee8:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     eec:	526f546b 	rsbpl	r5, pc, #1795162112	; 0x6b000000
     ef0:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     ef4:	59780065 	ldmdbpl	r8!, {r0, r2, r5, r6}^
     ef8:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
     efc:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
     f00:	64657269 	strbtvs	r7, [r5], #-617	; 0xfffffd97
     f04:	53787500 	cmnpl	r8, #0, 10
     f08:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     f0c:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     f10:	70737553 	rsbsvc	r7, r3, r3, asr r5
     f14:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     f18:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
     f1c:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     f20:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     f24:	42435464 	submi	r5, r3, #100, 8	; 0x64000000
     f28:	76727000 	ldrbtvc	r7, [r2], -r0
     f2c:	6f6c6c41 	svcvs	0x006c6c41
     f30:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
     f34:	41424354 	cmpmi	r2, r4, asr r3
     f38:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
     f3c:	006b6361 	rsbeq	r6, fp, r1, ror #6
     f40:	73755378 	cmnvc	r5, #120, 6	; 0xe0000001
     f44:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
     f48:	61546465 	cmpvs	r4, r5, ror #8
     f4c:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     f50:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     f54:	6b736154 	blvs	1cd94ac <__bss_end+0x1cc397c>
     f58:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
     f5c:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     f60:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     f64:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; e54 <_start-0x71ac>
     f68:	00525349 	subseq	r5, r2, r9, asr #6
     f6c:	6e655078 	mcrvs	0, 3, r5, cr5, cr8, {3}
     f70:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     f74:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     f78:	73694c79 	cmnvc	r9, #30976	; 0x7900
     f7c:	54780074 	ldrbtpl	r0, [r8], #-116	; 0xffffff8c
     f80:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     f84:	73615473 	cmnvc	r1, #1929379840	; 0x73000000
     f88:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
     f8c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
     f90:	70006465 	andvc	r6, r0, r5, ror #8
     f94:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
     f98:	61697469 	cmnvs	r9, r9, ror #8
     f9c:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
     fa0:	6b736154 	blvs	1cd94f8 <__bss_end+0x1cc39c8>
     fa4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     fa8:	54780073 	ldrbtpl	r0, [r8], #-115	; 0xffffff8d
     fac:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     fb0:	70417465 	subvc	r7, r1, r5, ror #8
     fb4:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
     fb8:	6f697461 	svcvs	0x00697461
     fbc:	7361546e 	cmnvc	r1, #1845493760	; 0x6e000000
     fc0:	6761546b 	strbvs	r5, [r1, -fp, ror #8]!
     fc4:	61547800 	cmpvs	r4, r0, lsl #16
     fc8:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
     fcc:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     fd0:	6554676e 	ldrbvs	r6, [r4, #-1902]	; 0xfffff892
     fd4:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
     fd8:	6f697461 	svcvs	0x00697461
     fdc:	4d78006e 	ldclmi	0, cr0, [r8, #-440]!	; 0xfffffe48
     fe0:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
     fe4:	65695964 	strbvs	r5, [r9, #-2404]!	; 0xfffff69c
     fe8:	7600646c 	strvc	r6, [r0], -ip, ror #8
     fec:	6b736154 	blvs	1cd9544 <__bss_end+0x1cc3a14>
     ff0:	70737553 	rsbsvc	r7, r3, r3, asr r5
     ff4:	41646e65 	cmnmi	r4, r5, ror #28
     ff8:	78006c6c 	stmdavc	r0, {r2, r3, r5, r6, sl, fp, sp, lr}
     ffc:	6b736154 	blvs	1cd9554 <__bss_end+0x1cc3a24>
    1000:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1004:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    1008:	43546b73 	cmpmi	r4, #117760	; 0x1cc00
    100c:	78700042 	ldmdavc	r0!, {r1, r6}^
    1010:	6b636954 	blvs	18db568 <__bss_end+0x18c5a38>
    1014:	576f5473 			; <UNDEFINED> instruction: 0x576f5473
    1018:	00746961 	rsbseq	r6, r4, r1, ror #18
    101c:	61547875 	cmpvs	r4, r5, ror r8
    1020:	44736b73 	ldrbtmi	r6, [r3], #-2931	; 0xfffff48d
    1024:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    1028:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    102c:	6b636954 	blvs	18db584 <__bss_end+0x18c5a54>
    1030:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1034:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    1038:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    103c:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    1040:	616c6544 	cmnvs	ip, r4, asr #10
    1044:	54646579 	strbtpl	r6, [r4], #-1401	; 0xfffffa87
    1048:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    104c:	00747369 	rsbseq	r7, r4, r9, ror #6
    1050:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1054:	616c506b 	cmnvs	ip, fp, rrx
    1058:	6e4f6563 	cdpvs	5, 4, cr6, cr15, cr3, {3}
    105c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    1060:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
    1064:	54760074 	ldrbtpl	r0, [r6], #-116	; 0xffffff8c
    1068:	446b7361 	strbtmi	r7, [fp], #-865	; 0xfffffc9f
    106c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1070:	54787000 	ldrbtpl	r7, [r8], #-0
    1074:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1078:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    107c:	6d65526b 	sfmvs	f5, 2, [r5, #-428]!	; 0xfffffe54
    1080:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
    1084:	456d6f72 	strbmi	r6, [sp, #-3954]!	; 0xfffff08e
    1088:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    108c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1090:	68537800 	ldmdavs	r3, {fp, ip, sp, lr}^
    1094:	646c756f 	strbtvs	r7, [ip], #-1391	; 0xfffffa91
    1098:	616c6544 	cmnvs	ip, r4, asr #10
    109c:	72700079 	rsbsvc	r0, r0, #121	; 0x79
    10a0:	6c644976 			; <UNDEFINED> instruction: 0x6c644976
    10a4:	73615465 	cmnvc	r1, #1694498816	; 0x65000000
    10a8:	6470006b 	ldrbtvs	r0, [r0], #-107	; 0xffffff95
    10ac:	4b534154 	blmi	14d1604 <__bss_end+0x14bbad4>
    10b0:	4f4f485f 	svcmi	0x004f485f
    10b4:	4f435f4b 	svcmi	0x00435f4b
    10b8:	78004544 	stmdavc	r0, {r2, r6, r8, sl, lr}
    10bc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    10c0:	6d457349 	stclvs	3, cr7, [r5, #-292]	; 0xfffffedc
    10c4:	00797470 	rsbseq	r7, r9, r0, ror r4
    10c8:	6f487870 	svcvs	0x00487870
    10cc:	75466b6f 	strbvc	r6, [r6, #-2927]	; 0xfffff491
    10d0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    10d4:	70006e6f 	andvc	r6, r0, pc, ror #28
    10d8:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    10dc:	00424354 	subeq	r4, r2, r4, asr r3
    10e0:	61547870 	cmpvs	r4, r0, ror r8
    10e4:	6f436b73 	svcvs	0x00436b73
    10e8:	78006564 	stmdavc	r0, {r2, r5, r6, r8, sl, sp, lr}
    10ec:	6b736154 	blvs	1cd9644 <__bss_end+0x1cc3b14>
    10f0:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    10f4:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    10f8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    10fc:	654e7800 	strbvs	r7, [lr, #-2048]	; 0xfffff800
    1100:	61547478 	cmpvs	r4, r8, ror r4
    1104:	6e556b73 	vmovvs.s8	r6, d5[3]
    1108:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    110c:	6d69546b 	cfstrdvs	mvd5, [r9, #-428]!	; 0xfffffe54
    1110:	73750065 	cmnvc	r5, #101	; 0x65
    1114:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    1118:	7065446b 	rsbvc	r4, r5, fp, ror #8
    111c:	78006874 	stmdavc	r0, {r2, r4, r5, r6, fp, sp, lr}
    1120:	6b636954 	blvs	18db678 <__bss_end+0x18c5b48>
    1124:	78750073 	ldmdavc	r5!, {r0, r1, r4, r5, r6}^
    1128:	5077654e 	rsbspl	r6, r7, lr, asr #10
    112c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1130:	00797469 	rsbseq	r7, r9, r9, ror #8
    1134:	614e6370 	hvcvs	58928	; 0xe630
    1138:	7000656d 	andvc	r6, r0, sp, ror #10
    113c:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    1140:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
    1144:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
    1148:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    114c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    1150:	54760072 	ldrbtpl	r0, [r6], #-114	; 0xffffff8e
    1154:	506b7361 	rsbpl	r7, fp, r1, ror #6
    1158:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    115c:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    1160:	78007465 	stmdavc	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
    1164:	6f6d654d 	svcvs	0x006d654d
    1168:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0xfffff68e
    116c:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    1170:	61547600 	cmpvs	r4, r0, lsl #12
    1174:	6e496b73 	vmovvs.8	d9[3], r6
    1178:	6d657263 	sfmvs	f7, 2, [r5, #-396]!	; 0xfffffe74
    117c:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    1180:	006b6369 	rsbeq	r6, fp, r9, ror #6
    1184:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    1188:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    118c:	73696c61 	cmnvc	r9, #24832	; 0x6100
    1190:	42435465 	submi	r5, r3, #1694498816	; 0x65000000
    1194:	69726156 	ldmdbvs	r2!, {r1, r2, r4, r6, r8, sp, lr}^
    1198:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    119c:	4d780073 	ldclmi	0, cr0, [r8, #-460]!	; 0xfffffe34
    11a0:	524f4d45 	subpl	r4, pc, #4416	; 0x1140
    11a4:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xfffff0a7
    11a8:	4e4f4947 	vmlsmi.f16	s9, s30, s14	; <UNPREDICTABLE>
    11ac:	61547600 	cmpvs	r4, r0, lsl #12
    11b0:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xfffff48d
    11b4:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    11b8:	61547800 	cmpvs	r4, r0, lsl #16
    11bc:	61436b73 	hvcvs	14003	; 0x36b3
    11c0:	70416c6c 	subvc	r6, r1, ip, ror #24
    11c4:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
    11c8:	6f697461 	svcvs	0x00697461
    11cc:	7361546e 	cmnvc	r1, #1845493760	; 0x6e000000
    11d0:	6f6f486b 	svcvs	0x006f486b
    11d4:	5478006b 	ldrbtpl	r0, [r8], #-107	; 0xffffff95
    11d8:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    11dc:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    11e0:	72436369 	subvc	r6, r3, #-1543503871	; 0xa4000001
    11e4:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    11e8:	61547600 	cmpvs	r4, r0, lsl #12
    11ec:	77536b73 			; <UNDEFINED> instruction: 0x77536b73
    11f0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    11f4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    11f8:	00747865 	rsbseq	r7, r4, r5, ror #16
    11fc:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
    1200:	764f664f 	strbvc	r6, [pc], -pc, asr #12
    1204:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
    1208:	0073776f 	rsbseq	r7, r3, pc, ror #14
    120c:	61547870 	cmpvs	r4, r0, ror r8
    1210:	61546b73 	cmpvs	r4, r3, ror fp
    1214:	78700067 	ldmdavc	r0!, {r0, r1, r2, r5, r6}^
    1218:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    121c:	5478006b 	ldrbtpl	r0, [r8], #-107	; 0xffffff95
    1220:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    1224:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
    1228:	6c6c4165 	stfvse	f4, [ip], #-404	; 0xfffffe6c
    122c:	44787000 	ldrbtmi	r7, [r8], #-0
    1230:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1234:	61546465 	cmpvs	r4, r5, ror #8
    1238:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    123c:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
    1240:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
    1244:	64657355 	strbtvs	r7, [r5], #-853	; 0xfffffcab
    1248:	6f697250 	svcvs	0x00697250
    124c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1250:	61547800 	cmpvs	r4, r0, lsl #16
    1254:	68436b73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1258:	466b6365 	strbtmi	r6, [fp], -r5, ror #6
    125c:	6954726f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1260:	754f656d 	strbvc	r6, [pc, #-1389]	; cfb <_start-0x7305>
    1264:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    1268:	6b736154 	blvs	1cd97c0 <__bss_end+0x1cc3c90>
    126c:	75536f54 	ldrbvc	r6, [r3, #-3924]	; 0xfffff0ac
    1270:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    1274:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
    1278:	76657250 			; <UNDEFINED> instruction: 0x76657250
    127c:	73756f69 	cmnvc	r5, #420	; 0x1a4
    1280:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1284:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1288:	54787000 	ldrbtpl	r7, [r8], #-0
    128c:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    1290:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
    1294:	00657465 	rsbeq	r7, r5, r5, ror #8
    1298:	654c6c75 	strbvs	r6, [ip, #-3189]	; 0xfffff38b
    129c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    12a0:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
    12a4:	00736574 	rsbseq	r6, r3, r4, ror r5
    12a8:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    12ac:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
    12b0:	46656d75 			; <UNDEFINED> instruction: 0x46656d75
    12b4:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    12b8:	76005253 			; <UNDEFINED> instruction: 0x76005253
    12bc:	6b736154 	blvs	1cd9814 <__bss_end+0x1cc3ce4>
    12c0:	7373694d 	cmnvc	r3, #1261568	; 0x134000
    12c4:	69596465 	ldmdbvs	r9, {r0, r2, r5, r6, sl, sp, lr}^
    12c8:	00646c65 	rsbeq	r6, r4, r5, ror #24
    12cc:	53787570 	cmnpl	r8, #112, 10	; 0x1c000000
    12d0:	6b636174 	blvs	18d98a8 <__bss_end+0x18c3d78>
    12d4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    12d8:	76007265 	strvc	r7, [r0], -r5, ror #4
    12dc:	6b736154 	blvs	1cd9834 <__bss_end+0x1cc3d04>
    12e0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    12e4:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
    12e8:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    12ec:	70007265 	andvc	r7, r0, r5, ror #4
    12f0:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
    12f4:	546b6365 	strbtpl	r6, [fp], #-869	; 0xfffffc9b
    12f8:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    12fc:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    1300:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
    1304:	696d7265 	stmdbvs	sp!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1308:	6974616e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    130c:	70006e6f 	andvc	r6, r0, pc, ror #28
    1310:	73614276 	cmnvc	r1, #1610612743	; 0x60000007
    1314:	64644165 	strbtvs	r4, [r4], #-357	; 0xfffffe9b
    1318:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    131c:	61547600 	cmpvs	r4, r0, lsl #12
    1320:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xfffff48d
    1324:	5579616c 	ldrbpl	r6, [r9, #-364]!	; 0xfffffe94
    1328:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    132c:	76727000 	ldrbtvc	r7, [r2], -r0
    1330:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    1334:	43546574 	cmpmi	r4, #116, 10	; 0x1d000000
    1338:	54760042 	ldrbtpl	r0, [r6], #-66	; 0xffffffbe
    133c:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
    1340:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
    1344:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
    1348:	65726c41 	ldrbvs	r6, [r2, #-3137]!	; 0xfffff3bf
    134c:	59796461 	ldmdbpl	r9!, {r0, r5, r6, sl, sp, lr}^
    1350:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    1354:	70006465 	andvc	r6, r0, r5, ror #8
    1358:	72615076 	rsbvc	r5, r1, #118	; 0x76
    135c:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
    1360:	2f007265 	svccs	0x00007265
    1364:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1368:	6f636d2f 	svcvs	0x00636d2f
    136c:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1370:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
    1374:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
    1378:	2f534f54 	svccs	0x00534f54
    137c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1380:	534f5452 	movtpl	r5, #62546	; 0xf452
    1384:	756f532f 	strbvc	r5, [pc, #-815]!	; 105d <_start-0x6fa3>
    1388:	2f656372 	svccs	0x00656372
    138c:	6b736174 	blvs	1cd9964 <__bss_end+0x1cc3e34>
    1390:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1394:	67655278 			; <UNDEFINED> instruction: 0x67655278
    1398:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    139c:	76727000 	ldrbtvc	r7, [r2], -r0
    13a0:	43646441 	cmnmi	r4, #1090519040	; 0x41000000
    13a4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    13a8:	6154746e 	cmpvs	r4, lr, ror #8
    13ac:	6f546b73 	svcvs	0x00546b73
    13b0:	616c6544 	cmnvs	ip, r4, asr #10
    13b4:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
    13b8:	00747369 	rsbseq	r7, r4, r9, ror #6
    13bc:	75437875 	strbvc	r7, [r3, #-2165]	; 0xfffff78b
    13c0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    13c4:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
    13c8:	4f726562 	svcmi	0x00726562
    13cc:	73615466 	cmnvc	r1, #1711276032	; 0x66000000
    13d0:	7800736b 	stmdavc	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    13d4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    13d8:	72636e49 	rsbvc	r6, r3, #1168	; 0x490
    13dc:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    13e0:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    13e4:	00424354 	subeq	r4, r2, r4, asr r3
    13e8:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    13ec:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
    13f0:	00656d75 	rsbeq	r6, r5, r5, ror sp
    13f4:	72437870 	subvc	r7, r3, #112, 16	; 0x700000
    13f8:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    13fc:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    1400:	6550006b 	ldrbvs	r0, [r0, #-107]	; 0xffffff95
    1404:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1408:	50003167 	andpl	r3, r0, r7, ror #2
    140c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1410:	0032676e 	eorseq	r6, r2, lr, ror #14
    1414:	61736944 	cmnvs	r3, r4, asr #18
    1418:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    141c:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
    1420:	4d434200 	sfmmi	f4, 2, [r3, #-0]
    1424:	35333832 	ldrcc	r3, [r3, #-2098]!	; 0xfffff7ce
    1428:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    142c:	45525f43 	ldrbmi	r5, [r2, #-3907]	; 0xfffff0bd
    1430:	46005347 	strmi	r5, [r0], -r7, asr #6
    1434:	74435149 	strbvc	r5, [r3], #-329	; 0xfffffeb7
    1438:	69006c72 	stmdbvs	r0, {r1, r4, r5, r6, sl, fp, sp, lr}
    143c:	65527172 	ldrbvs	r7, [r2, #-370]	; 0xfffffe8e
    1440:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0xfffff699
    1444:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1448:	6c427172 	stfvse	f7, [r2], {114}	; 0x72
    144c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1450:	614d6c75 	hvcvs	54981	; 0xd6c5
    1454:	64656b73 	strbtvs	r6, [r5], #-2931	; 0xfffff48d
    1458:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    145c:	65007375 	strvs	r7, [r0, #-885]	; 0xfffffc8b
    1460:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1464:	70006465 	andvc	r6, r0, r5, ror #8
    1468:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    146c:	6800676e 	stmdavs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1470:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1474:	6e615265 	cdpvs	2, 6, cr5, cr1, cr5, {3}
    1478:	69006567 	stmdbvs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    147c:	6e557172 	mrcvs	1, 2, r7, cr5, cr2, {3}
    1480:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1484:	6e45006b 	cdpvs	0, 4, cr0, cr5, cr11, {3}
    1488:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    148c:	616d0032 	cmnvs	sp, r2, lsr r0
    1490:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    1494:	69447172 	stmdbvs	r4, {r1, r4, r5, r6, r8, ip, sp, lr}^
    1498:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    149c:	66700065 	ldrbtvs	r0, [r0], -r5, rrx
    14a0:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
    14a4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    14a8:	71726900 	cmnvc	r2, r0, lsl #18
    14ac:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    14b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    14b4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1400 <_start-0x6c00>
    14b8:	636d2f65 	cmnvs	sp, #404	; 0x194
    14bc:	742f726f 	strtvc	r7, [pc], #-623	; 14c4 <_start-0x6b3c>
    14c0:	6e686e69 	cdpvs	14, 6, cr6, cr8, cr9, {3}
    14c4:	69502f6e 	ldmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    14c8:	534f5452 	movtpl	r5, #62546	; 0xf452
    14cc:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    14d0:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    14d4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    14d8:	72692f73 	rsbvc	r2, r9, #460	; 0x1cc
    14dc:	00632e71 	rsbeq	r2, r3, r1, ror lr
    14e0:	61736944 	cmnvs	r3, r4, asr #18
    14e4:	31656c62 	cmncc	r5, r2, ror #24
    14e8:	73694400 	cmnvc	r9, #0, 8
    14ec:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    14f0:	5f670032 	svcpl	0x00670032
    14f4:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    14f8:	6154726f 	cmpvs	r4, pc, ror #4
    14fc:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1500:	45717269 	ldrbmi	r7, [r1, #-617]!	; 0xfffffd97
    1504:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1508:	4e460065 	cdpmi	0, 4, cr0, cr6, cr5, {3}
    150c:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    1510:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    1514:	485f5450 	ldmdami	pc, {r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1518:	4c444e41 	mcrrmi	14, 4, r4, r4, cr1
    151c:	49005245 	stmdbmi	r0, {r0, r2, r6, r9, ip, lr}
    1520:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    1524:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    1528:	4345565f 	movtmi	r5, #22111	; 0x565f
    152c:	00524f54 	subseq	r4, r2, r4, asr pc
    1530:	42515249 	subsmi	r5, r1, #-1879048188	; 0x90000004
    1534:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
    1538:	616e4500 	cmnvs	lr, r0, lsl #10
    153c:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    1540:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
    1544:	616e4500 	cmnvs	lr, r0, lsl #10
    1548:	31656c62 	cmncc	r5, r2, ror #24
    154c:	53504700 	cmppl	r0, #0, 14
    1550:	42005445 	andmi	r5, r0, #1157627904	; 0x45000000
    1554:	38324d43 	ldmdacc	r2!, {r0, r1, r6, r8, sl, fp, lr}
    1558:	475f3533 	smmlarmi	pc, r3, r5, r3	; <UNPREDICTABLE>
    155c:	5f4f4950 	svcpl	0x004f4950
    1560:	53474552 	movtpl	r4, #30034	; 0x7552
    1564:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
    1568:	6970006d 	ldmdbvs	r0!, {r0, r2, r3, r5, r6}^
    156c:	6d754e6e 	ldclvs	14, cr4, [r5, #-440]!	; 0xfffffe48
    1570:	61655200 	cmnvs	r5, r0, lsl #4
    1574:	69704764 	ldmdbvs	r0!, {r2, r5, r6, r8, r9, sl, lr}^
    1578:	6553006f 	ldrbvs	r0, [r3, #-111]	; 0xffffff91
    157c:	69704774 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, lr}^
    1580:	7269446f 	rsbvc	r4, r9, #1862270976	; 0x6f000000
    1584:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1588:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    158c:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
    1590:	48504700 	ldmdami	r0, {r8, r9, sl, lr}^
    1594:	44004e45 	strmi	r4, [r0], #-3653	; 0xfffff1bb
    1598:	43455445 	movtmi	r5, #21573	; 0x5445
    159c:	49525f54 	ldmdbmi	r2, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    15a0:	474e4953 	smlsldmi	r4, lr, r3, r9
    15a4:	5953415f 	ldmdbpl	r3, {r0, r1, r2, r3, r4, r6, r8, lr}^
    15a8:	4400434e 	strmi	r4, [r0], #-846	; 0xfffffcb2
    15ac:	43455445 	movtmi	r5, #21573	; 0x5445
    15b0:	41465f54 	cmpmi	r6, r4, asr pc
    15b4:	4e494c4c 	cdpmi	12, 4, cr4, cr9, cr12, {2}
    15b8:	53415f47 	movtpl	r5, #8007	; 0x1f47
    15bc:	00434e59 	subeq	r4, r3, r9, asr lr
    15c0:	61656c43 	cmnvs	r5, r3, asr #24
    15c4:	69704772 	ldmdbvs	r0!, {r1, r4, r5, r6, r8, r9, sl, lr}^
    15c8:	746e496f 	strbtvc	r4, [lr], #-2415	; 0xfffff691
    15cc:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    15d0:	47007470 	smlsdxmi	r0, r0, r4, r7
    15d4:	45464150 	strbmi	r4, [r6, #-336]	; 0xfffffeb0
    15d8:	6e45004e 	cdpvs	0, 4, cr0, cr5, cr14, {2}
    15dc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    15e0:	6f697047 	svcvs	0x00697047
    15e4:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    15e8:	47007463 	strmi	r7, [r0, -r3, ror #8]
    15ec:	44555050 	ldrbmi	r5, [r5], #-80	; 0xffffffb0
    15f0:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    15f4:	5f544345 	svcpl	0x00544345
    15f8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    15fc:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1600:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1604:	52415047 	subpl	r5, r1, #71	; 0x47
    1608:	53004e45 	movwpl	r4, #3653	; 0xe45
    160c:	70477465 	subvc	r7, r7, r5, ror #8
    1610:	75466f69 	strbvc	r6, [r6, #-3945]	; 0xfffff097
    1614:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    1618:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    161c:	5f4f4950 	svcpl	0x004f4950
    1620:	00524944 	subseq	r4, r2, r4, asr #18
    1624:	45465047 	strbmi	r5, [r6, #-71]	; 0xffffffb9
    1628:	5047004e 	subpl	r0, r7, lr, asr #32
    162c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1630:	4544004e 	strbmi	r0, [r4, #-78]	; 0xffffffb2
    1634:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    1638:	4749485f 	smlsldmi	r4, r9, pc, r8	; <UNPREDICTABLE>
    163c:	45440048 	strbmi	r0, [r4, #-72]	; 0xffffffb8
    1640:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    1644:	4e4f4e5f 	mcrmi	14, 2, r4, cr15, cr15, {2}
    1648:	50470045 	subpl	r0, r7, r5, asr #32
    164c:	004e454c 	subeq	r4, lr, ip, asr #10
    1650:	55505047 	ldrbpl	r5, [r0, #-71]	; 0xffffffb9
    1654:	4b4c4344 	blmi	131236c <__bss_end+0x12fc83c>
    1658:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    165c:	5f544345 	svcpl	0x00544345
    1660:	49534952 	ldmdbmi	r3, {r1, r4, r6, r8, fp, lr}^
    1664:	2f00474e 	svccs	0x0000474e
    1668:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    166c:	6f636d2f 	svcvs	0x00636d2f
    1670:	69742f72 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1674:	6e6e686e 	cdpvs	8, 6, cr6, cr14, cr14, {3}
    1678:	5269502f 	rsbpl	r5, r9, #47	; 0x2f
    167c:	2f534f54 	svccs	0x00534f54
    1680:	6f6d6544 	svcvs	0x006d6544
    1684:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1688:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    168c:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    1690:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    1694:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    1698:	4c5f5443 	cfldrdmi	mvd5, [pc], {67}	; 0x43
    169c:	4700574f 	strmi	r5, [r0, -pc, asr #14]
    16a0:	56454c50 			; <UNDEFINED> instruction: 0x56454c50
    16a4:	6e756600 	cdpvs	6, 7, cr6, cr5, cr0, {0}
    16a8:	6d754e63 	ldclvs	14, cr4, [r5, #-396]!	; 0xfffffe74
    16ac:	52504700 	subspl	r4, r0, #0, 14
    16b0:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    16b4:	53444550 	movtpl	r4, #17744	; 0x4550
    16b8:	73694400 	cmnvc	r9, #0, 8
    16bc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    16c0:	6f697047 	svcvs	0x00697047
    16c4:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    16c8:	47007463 	strmi	r7, [r0, -r3, ror #8]
    16cc:	45534650 	ldrbmi	r4, [r3, #-1616]	; 0xfffff9b0
    16d0:	6552004c 	ldrbvs	r0, [r2, #-76]	; 0xffffffb4
    16d4:	76726573 			; <UNDEFINED> instruction: 0x76726573
    16d8:	315f6465 	cmpcc	pc, r5, ror #8
    16dc:	73655200 	cmnvc	r5, #0, 4
    16e0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    16e4:	00325f64 	eorseq	r5, r2, r4, ror #30
    16e8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    16ec:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    16f0:	5200335f 	andpl	r3, r0, #2080374785	; 0x7c000001
    16f4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    16f8:	5f646576 	svcpl	0x00646576
    16fc:	65520034 	ldrbvs	r0, [r2, #-52]	; 0xffffffcc
    1700:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1704:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 12a7 <_start-0x6d59>
    1708:	73655200 	cmnvc	r5, #0, 4
    170c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1710:	00365f64 	eorseq	r5, r6, r4, ror #30
    1714:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1718:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    171c:	5200375f 	andpl	r3, r0, #24903680	; 0x17c0000
    1720:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1724:	5f646576 	svcpl	0x00646576
    1728:	65520038 	ldrbvs	r0, [r2, #-56]	; 0xffffffc8
    172c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1730:	395f6465 	ldmdbcc	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    1734:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1738:	5f544345 	svcpl	0x00544345
    173c:	4c4c4146 	stfmie	f4, [ip], {70}	; 0x46
    1740:	00474e49 	subeq	r4, r7, r9, asr #28
    1744:	47746553 			; <UNDEFINED> instruction: 0x47746553
    1748:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    174c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1750:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1754:	5200415f 	andpl	r4, r0, #-1073741801	; 0xc0000017
    1758:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    175c:	5f646576 	svcpl	0x00646576
    1760:	50470042 	subpl	r0, r7, r2, asr #32
    1764:	4f5f4f49 	svcmi	0x005f4f49
    1768:	70005455 	andvc	r5, r0, r5, asr r4
    176c:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0xffffff88
    1770:	756f6976 	strbvc	r6, [pc, #-2422]!	; e02 <_start-0x71fe>
    1774:	6f6c4273 	svcvs	0x006c4273
    1778:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    177c:	61746f54 	cmnvs	r4, r4, asr pc
    1780:	6165486c 	cmnvs	r5, ip, ror #16
    1784:	7a695370 	bvc	1a5654c <__bss_end+0x1a40a1c>
    1788:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    178c:	6b6e694c 	blvs	1b9bcc4 <__bss_end+0x1b86194>
    1790:	6c427800 	mcrrvs	8, 0, r7, r2, cr0
    1794:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1798:	00657a69 	rsbeq	r7, r5, r9, ror #20
    179c:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    17a0:	72467478 	subvc	r7, r6, #120, 8	; 0x78000000
    17a4:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    17a8:	006b636f 	rsbeq	r6, fp, pc, ror #6
    17ac:	6c427870 	mcrrvs	8, 7, r7, r2, cr0
    17b0:	006b636f 	rsbeq	r6, fp, pc, ror #6
    17b4:	4f545278 	svcmi	0x00545278
    17b8:	45485f53 	strbmi	r5, [r8, #-3923]	; 0xfffff0ad
    17bc:	78005041 	stmdavc	r0, {r0, r6, ip, lr}
    17c0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    17c4:	65680074 	strbvs	r0, [r8, #-116]!	; 0xffffff8c
    17c8:	54537061 	ldrbpl	r7, [r3], #-97	; 0xffffff9f
    17cc:	54435552 	strbpl	r5, [r3], #-1362	; 0xfffffaae
    17d0:	5a49535f 	bpl	1256554 <__bss_end+0x1240a24>
    17d4:	76700045 	ldrbtvc	r0, [r0], -r5, asr #32
    17d8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    17dc:	6c6c614d 	stfvse	f6, [ip], #-308	; 0xfffffecc
    17e0:	7000636f 	andvc	r6, r0, pc, ror #6
    17e4:	65487672 	strbvs	r7, [r8, #-1650]	; 0xfffff98e
    17e8:	6e497061 	cdpvs	0, 4, cr7, cr9, cr1, {3}
    17ec:	78007469 	stmdavc	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    17f0:	746e6157 	strbtvc	r6, [lr], #-343	; 0xfffffea9
    17f4:	69536465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    17f8:	6400657a 	strvs	r6, [r0], #-1402	; 0xfffffa86
    17fc:	6d6d7544 	cfstr64vs	mvdx7, [sp, #-272]!	; 0xfffffef0
    1800:	75700079 	ldrbvc	r0, [r0, #-121]!	; 0xffffff87
    1804:	61654863 	cmnvs	r5, r3, ror #16
    1808:	646e4570 	strbtvs	r4, [lr], #-1392	; 0xfffffa90
    180c:	72467800 	subvc	r7, r6, #0, 16
    1810:	79426565 	stmdbvc	r2, {r0, r2, r5, r6, r8, sl, sp, lr}^
    1814:	52736574 	rsbspl	r6, r3, #116, 10	; 0x1d000000
    1818:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    181c:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1820:	48637500 	stmdami	r3!, {r8, sl, ip, sp, lr}^
    1824:	00706165 	rsbseq	r6, r0, r5, ror #2
    1828:	69467870 	stmdbvs	r6, {r4, r5, r6, fp, ip, sp, lr}^
    182c:	46747372 			; <UNDEFINED> instruction: 0x46747372
    1830:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    1834:	6b636f6c 	blvs	18dd5ec <__bss_end+0x18c7abc>
    1838:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    183c:	6c427765 	mcrrvs	7, 6, r7, r2, cr5
    1840:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1844:	006b6e69 	rsbeq	r6, fp, r9, ror #28
    1848:	65527670 	ldrbvs	r7, [r2, #-1648]	; 0xfffff990
    184c:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    1850:	425f4100 	subsmi	r4, pc, #0, 2
    1854:	4b434f4c 	blmi	10d558c <__bss_end+0x10bfa5c>
    1858:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    185c:	5078004b 	rsbspl	r0, r8, fp, asr #32
    1860:	4774726f 	ldrbmi	r7, [r4, -pc, ror #4]!
    1864:	72467465 	subvc	r7, r6, #1694498816	; 0x65000000
    1868:	65486565 	strbvs	r6, [r8, #-1381]	; 0xfffffa9b
    186c:	69537061 	ldmdbvs	r3, {r0, r5, r6, ip, sp, lr}^
    1870:	7000657a 	andvc	r6, r0, sl, ror r5
    1874:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
    1878:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
    187c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1880:	746e496b 	strbtvc	r4, [lr], #-2411	; 0xfffff695
    1884:	6572466f 	ldrbvs	r4, [r2, #-1647]!	; 0xfffff991
    1888:	73694c65 	cmnvc	r9, #25856	; 0x6500
    188c:	50760074 	rsbspl	r0, r6, r4, ror r0
    1890:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1894:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1898:	73696c61 	cmnvc	r9, #24832	; 0x6100
    189c:	6f6c4265 	svcvs	0x006c4265
    18a0:	00736b63 	rsbseq	r6, r3, r3, ror #22
    18a4:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    18a8:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    18ac:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    18b0:	61636f6c 	cmnvs	r3, ip, ror #30
    18b4:	00646574 	rsbeq	r6, r4, r4, ror r5
    18b8:	6f6c4278 	svcvs	0x006c4278
    18bc:	694c6b63 	stmdbvs	ip, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    18c0:	70006b6e 	andvc	r6, r0, lr, ror #22
    18c4:	646e4578 	strbtvs	r4, [lr], #-1400	; 0xfffffa88
    18c8:	6f682f00 	svcvs	0x00682f00
    18cc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1720 <_start-0x68e0>
    18d0:	2f726f63 	svccs	0x00726f63
    18d4:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    18d8:	502f6e6e 	eorpl	r6, pc, lr, ror #28
    18dc:	4f545269 	svcmi	0x00545269
    18e0:	462f2f53 	qsaxmi	r2, pc, r3	; <UNPREDICTABLE>
    18e4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    18e8:	2f534f54 	svccs	0x00534f54
    18ec:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    18f0:	702f6563 	eorvc	r6, pc, r3, ror #10
    18f4:	6174726f 	cmnvs	r4, pc, ror #4
    18f8:	2f656c62 	svccs	0x00656c62
    18fc:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    1900:	2f676e61 	svccs	0x00676e61
    1904:	70616568 	rsbvc	r6, r1, r8, ror #10
    1908:	632e345f 			; <UNDEFINED> instruction: 0x632e345f
    190c:	42787000 	rsbsmi	r7, r8, #0
    1910:	6b636f6c 	blvs	18dd6c8 <__bss_end+0x18c7b98>
    1914:	6e496f54 	mcrvs	15, 2, r6, cr9, cr4, {2}
    1918:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
    191c:	65487800 	strbvs	r7, [r8, #-2048]	; 0xfffff800
    1920:	74007061 	strvc	r7, [r0], #-97	; 0xffffff9f
    1924:	316b7361 	cmncc	fp, r1, ror #6
    1928:	6f682f00 	svcvs	0x00682f00
    192c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1780 <_start-0x6880>
    1930:	2f726f63 	svccs	0x00726f63
    1934:	686e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    1938:	502f6e6e 	eorpl	r6, pc, lr, ror #28
    193c:	4f545269 	svcmi	0x00545269
    1940:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    1944:	6d2f6f6d 	stcvs	15, cr6, [pc, #-436]!	; 1798 <_start-0x6868>
    1948:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
    194c:	61740063 	cmnvs	r4, r3, rrx
    1950:	00326b73 	eorseq	r6, r2, r3, ror fp
    1954:	6e69616d 	powvsez	f6, f1, #5.0
    1958:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
    195c:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    1960:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    1964:	73645f64 	cmnvc	r4, #100, 30	; 0x190
    1968:	2e2e0074 	mcrcs	0, 1, r0, cr14, cr4, {3}
    196c:	2f2e2e2f 	svccs	0x002e2e2f
    1970:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1974:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1978:	2f2e2e2f 	svccs	0x002e2e2f
    197c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1980:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 17e4 <_start-0x681c>
    1984:	2f636269 	svccs	0x00636269
    1988:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    198c:	2f656e69 	svccs	0x00656e69
    1990:	2f6d7261 	svccs	0x006d7261
    1994:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    1998:	732d7970 			; <UNDEFINED> instruction: 0x732d7970
    199c:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    19a0:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
    19a4:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    19a8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    19ac:	2f646c69 	svccs	0x00646c69
    19b0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    19b4:	6a2d6269 	bvs	b5a360 <__bss_end+0xb44830>
    19b8:	5778336f 	ldrbpl	r3, [r8, -pc, ror #6]!
    19bc:	656e2f31 	strbvs	r2, [lr, #-3889]!	; 0xfffff0cf
    19c0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    19c4:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    19c8:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    19cc:	30363130 	eorscc	r3, r6, r0, lsr r1
    19d0:	2f373235 	svccs	0x00373235
    19d4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    19d8:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    19dc:	6f6e2d6d 	svcvs	0x006e2d6d
    19e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    19e4:	2f696261 	svccs	0x00696261
    19e8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    19ec:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1850 <_start-0x67b0>
    19f0:	2f636269 	svccs	0x00636269
    19f4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    19f8:	2f656e69 	svccs	0x00656e69
    19fc:	006d7261 	rsbeq	r7, sp, r1, ror #4
    1a00:	20554e47 	subscs	r4, r5, r7, asr #28
    1a04:	20313143 	eorscs	r3, r1, r3, asr #2
    1a08:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
    1a0c:	30322031 	eorscc	r2, r2, r1, lsr r0
    1a10:	36303731 			; <UNDEFINED> instruction: 0x36303731
    1a14:	2d203032 	stccs	0, cr3, [r0, #-200]!	; 0xffffff38
    1a18:	4f2d2067 	svcmi	0x002d2067
    1a1c:	662d2032 			; <UNDEFINED> instruction: 0x662d2032
    1a20:	622d6f6e 	eorvs	r6, sp, #440	; 0x1b8
    1a24:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    1a28:	61006e69 	tstvs	r0, r9, ror #28
    1a2c:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    1a30:	735f6465 	cmpvc	pc, #1694498816	; 0x65000000
    1a34:	73006372 	movwvc	r6, #882	; 0x372
    1a38:	00306372 	eorseq	r6, r0, r2, ror r3
    1a3c:	306e656c 	rsbcc	r6, lr, ip, ror #10
    1a40:	2f2e2e00 	svccs	0x002e2e00
    1a44:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1a48:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1a4c:	2f2e2e2f 	svccs	0x002e2e2f
    1a50:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1a54:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 18b8 <_start-0x6748>
    1a58:	2f636269 	svccs	0x00636269
    1a5c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1a60:	6d2f676e 	stcvs	7, cr6, [pc, #-440]!	; 18b0 <_start-0x6750>
    1a64:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
    1a68:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1a6c:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    1a70:	5f64656e 	svcpl	0x0064656e
    1a74:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1a78:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    1a7c:	2f646c69 	svccs	0x00646c69
    1a80:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1a84:	6a2d6269 	bvs	b5a430 <__bss_end+0xb44900>
    1a88:	5778336f 	ldrbpl	r3, [r8, -pc, ror #6]!
    1a8c:	656e2f31 	strbvs	r2, [lr, #-3889]!	; 0xfffff0cf
    1a90:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1a94:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    1a98:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    1a9c:	30363130 	eorscc	r3, r6, r0, lsr r1
    1aa0:	2f373235 	svccs	0x00373235
    1aa4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1aa8:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    1aac:	6f6e2d6d 	svcvs	0x006e2d6d
    1ab0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1ab4:	2f696261 	svccs	0x00696261
    1ab8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1abc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1920 <_start-0x66e0>
    1ac0:	2f636269 	svccs	0x00636269
    1ac4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1ac8:	6200676e 	andvs	r6, r0, #28835840	; 0x1b80000
    1acc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1ad0:	656d0072 	strbvs	r0, [sp, #-114]!	; 0xffffff8e
    1ad4:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    1ad8:	72747300 	rsbsvc	r7, r4, #0, 6
    1adc:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    1ae0:	2f2e2e00 	svccs	0x002e2e00
    1ae4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1ae8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1aec:	2f2e2e2f 	svccs	0x002e2e2f
    1af0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1af4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1958 <_start-0x66a8>
    1af8:	2f636269 	svccs	0x00636269
    1afc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1b00:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
    1b04:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    1b08:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0x10bb1f4>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	332e363a 			; <UNDEFINED> instruction: 0x332e363a
   c:	732b312e 			; <UNDEFINED> instruction: 0x732b312e
  10:	35326e76 	ldrcc	r6, [r2, #-3702]!	; 0xfffff18a
  14:	39333033 	ldmdbcc	r3!, {r0, r1, r4, r5, ip, sp}
  18:	7562312d 	strbvc	r3, [r2, #-301]!	; 0xfffffed3
  1c:	31646c69 	cmncc	r4, r9, ror #24
  20:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  24:	20312e33 	eorscs	r2, r1, r3, lsr lr
  28:	37313032 			; <UNDEFINED> instruction: 0x37313032
  2c:	30323630 	eorscc	r3, r2, r0, lsr r6
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00010000 	andeq	r0, r1, r0
  1c:	00000240 	andeq	r0, r0, r0, asr #4
  20:	8b040e42 	blhi	103930 <__bss_end+0xede00>
  24:	0b0d4201 	bleq	350830 <__bss_end+0x33ad00>
  28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
  2c:	000ecb42 	andeq	ip, lr, r2, asr #22
  30:	00000018 	andeq	r0, r0, r8, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	00010240 	andeq	r0, r1, r0, asr #4
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	8b080e42 	blhi	203950 <__bss_end+0x1ede20>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	00040b0c 	andeq	r0, r4, ip, lsl #22
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	0001025c 	andeq	r0, r1, ip, asr r2
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	8b040e42 	blhi	10396c <__bss_end+0xede3c>
  60:	0b0d4201 	bleq	35086c <__bss_end+0x33ad3c>
  64:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
  68:	00000ecb 	andeq	r0, r0, fp, asr #29
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	00010274 	andeq	r0, r1, r4, ror r2
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	8b080e42 	blhi	20398c <__bss_end+0x1ede5c>
  80:	42018e02 	andmi	r8, r1, #2, 28
  84:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
  88:	00080d0c 	andeq	r0, r8, ip, lsl #26
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	000102ac 	andeq	r0, r1, ip, lsr #5
  98:	00000098 	muleq	r0, r8, r0
  9c:	8b080e42 	blhi	2039ac <__bss_end+0x1ede7c>
  a0:	42018e02 	andmi	r8, r1, #2, 28
  a4:	7e040b0c 	vmlavc.f64	d0, d4, d12
  a8:	00080d0c 	andeq	r0, r8, ip, lsl #26
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  b4:	7c020001 	stcvc	0, cr0, [r2], {1}
  b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	000000ac 	andeq	r0, r0, ip, lsr #1
  c4:	00010344 	andeq	r0, r1, r4, asr #6
  c8:	00000098 	muleq	r0, r8, r0
  cc:	8b040e42 	blhi	1039dc <__bss_end+0xedeac>
  d0:	0b0d4201 	bleq	3508dc <__bss_end+0x33adac>
  d4:	420d0d7e 	andmi	r0, sp, #8064	; 0x1f80
  d8:	00000ecb 	andeq	r0, r0, fp, asr #29
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	000000ac 	andeq	r0, r0, ip, lsr #1
  e4:	000103dc 	ldrdeq	r0, [r1], -ip
  e8:	000000b4 	strheq	r0, [r0], -r4
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	000000ac 	andeq	r0, r0, ip, lsr #1
  f4:	00010490 	muleq	r1, r0, r4
  f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	000000ac 	andeq	r0, r0, ip, lsr #1
 104:	00010540 	andeq	r0, r1, r0, asr #10
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	8b040e42 	blhi	103a1c <__bss_end+0xedeec>
 110:	0b0d4201 	bleq	35091c <__bss_end+0x33adec>
 114:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 118:	00000ecb 	andeq	r0, r0, fp, asr #29
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	000000ac 	andeq	r0, r0, ip, lsr #1
 124:	00010584 	andeq	r0, r1, r4, lsl #11
 128:	00000064 	andeq	r0, r0, r4, rrx
 12c:	8b040e42 	blhi	103a3c <__bss_end+0xedf0c>
 130:	0b0d4201 	bleq	35093c <__bss_end+0x33ae0c>
 134:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
 138:	00000ecb 	andeq	r0, r0, fp, asr #29
 13c:	0000000c 	andeq	r0, r0, ip
 140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 144:	7c020001 	stcvc	0, cr0, [r2], {1}
 148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000013c 	andeq	r0, r0, ip, lsr r1
 154:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 158:	00000168 	andeq	r0, r0, r8, ror #2
 15c:	8b080e42 	blhi	203a6c <__bss_end+0x1edf3c>
 160:	42018e02 	andmi	r8, r1, #2, 28
 164:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000013c 	andeq	r0, r0, ip, lsr r1
 174:	00010758 	andeq	r0, r1, r8, asr r7
 178:	000000e4 	andeq	r0, r0, r4, ror #1
 17c:	8b080e42 	blhi	203a8c <__bss_end+0x1edf5c>
 180:	42018e02 	andmi	r8, r1, #2, 28
 184:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	0000013c 	andeq	r0, r0, ip, lsr r1
 194:	0001083c 	andeq	r0, r1, ip, lsr r8
 198:	000000ec 	andeq	r0, r0, ip, ror #1
 19c:	8b080e42 	blhi	203aac <__bss_end+0x1edf7c>
 1a0:	42018e02 	andmi	r8, r1, #2, 28
 1a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1b4:	00010928 	andeq	r0, r1, r8, lsr #18
 1b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1bc:	8b080e42 	blhi	203acc <__bss_end+0x1edf9c>
 1c0:	42018e02 	andmi	r8, r1, #2, 28
 1c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1c8:	080d0cd4 	stmdaeq	sp, {r2, r4, r6, r7, sl, fp}
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1d4:	00010af8 	strdeq	r0, [r1], -r8
 1d8:	00000128 	andeq	r0, r0, r8, lsr #2
 1dc:	8b080e42 	blhi	203aec <__bss_end+0x1edfbc>
 1e0:	42018e02 	andmi	r8, r1, #2, 28
 1e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1e8:	080d0c88 	stmdaeq	sp, {r3, r7, sl, fp}
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1f4:	00010c20 	andeq	r0, r1, r0, lsr #24
 1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
 1fc:	8b080e42 	blhi	203b0c <__bss_end+0x1edfdc>
 200:	42018e02 	andmi	r8, r1, #2, 28
 204:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	0000013c 	andeq	r0, r0, ip, lsr r1
 214:	00010cc8 	andeq	r0, r1, r8, asr #25
 218:	0000008c 	andeq	r0, r0, ip, lsl #1
 21c:	8b080e42 	blhi	203b2c <__bss_end+0x1edffc>
 220:	42018e02 	andmi	r8, r1, #2, 28
 224:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
 228:	00080d0c 	andeq	r0, r8, ip, lsl #26
 22c:	0000000c 	andeq	r0, r0, ip
 230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 234:	7c020001 	stcvc	0, cr0, [r2], {1}
 238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	0000022c 	andeq	r0, r0, ip, lsr #4
 244:	00010d54 	andeq	r0, r1, r4, asr sp
 248:	00000068 	andeq	r0, r0, r8, rrx
 24c:	8b040e42 	blhi	103b5c <__bss_end+0xee02c>
 250:	0b0d4201 	bleq	350a5c <__bss_end+0x33af2c>
 254:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
 258:	00000ecb 	andeq	r0, r0, fp, asr #29
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000022c 	andeq	r0, r0, ip, lsr #4
 264:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
 268:	0000002c 	andeq	r0, r0, ip, lsr #32
 26c:	8b040e42 	blhi	103b7c <__bss_end+0xee04c>
 270:	0b0d4201 	bleq	350a7c <__bss_end+0x33af4c>
 274:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 278:	00000ecb 	andeq	r0, r0, fp, asr #29
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000022c 	andeq	r0, r0, ip, lsr #4
 284:	00010de8 	andeq	r0, r1, r8, ror #27
 288:	00000098 	muleq	r0, r8, r0
 28c:	8b040e42 	blhi	103b9c <__bss_end+0xee06c>
 290:	0b0d4201 	bleq	350a9c <__bss_end+0x33af6c>
 294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 298:	000ecb42 	andeq	ip, lr, r2, asr #22
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2a4:	00010e80 	andeq	r0, r1, r0, lsl #29
 2a8:	000000d8 	ldrdeq	r0, [r0], -r8
 2ac:	8b040e42 	blhi	103bbc <__bss_end+0xee08c>
 2b0:	0b0d4201 	bleq	350abc <__bss_end+0x33af8c>
 2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2c4:	00010f58 	andeq	r0, r1, r8, asr pc
 2c8:	00000098 	muleq	r0, r8, r0
 2cc:	8b040e42 	blhi	103bdc <__bss_end+0xee0ac>
 2d0:	0b0d4201 	bleq	350adc <__bss_end+0x33afac>
 2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000002dc 	ldrdeq	r0, [r0], -ip
 2f4:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 2f8:	00000114 	andeq	r0, r0, r4, lsl r1
 2fc:	8b080e42 	blhi	203c0c <__bss_end+0x1ee0dc>
 300:	42018e02 	andmi	r8, r1, #2, 28
 304:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000002dc 	ldrdeq	r0, [r0], -ip
 314:	00011104 	andeq	r1, r1, r4, lsl #2
 318:	000000c8 	andeq	r0, r0, r8, asr #1
 31c:	8b080e42 	blhi	203c2c <__bss_end+0x1ee0fc>
 320:	42018e02 	andmi	r8, r1, #2, 28
 324:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002dc 	ldrdeq	r0, [r0], -ip
 334:	000111cc 	andeq	r1, r1, ip, asr #3
 338:	000001a4 	andeq	r0, r0, r4, lsr #3
 33c:	8b080e42 	blhi	203c4c <__bss_end+0x1ee11c>
 340:	42018e02 	andmi	r8, r1, #2, 28
 344:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002dc 	ldrdeq	r0, [r0], -ip
 354:	00011370 	andeq	r1, r1, r0, ror r3
 358:	000000dc 	ldrdeq	r0, [r0], -ip
 35c:	8b080e42 	blhi	203c6c <__bss_end+0x1ee13c>
 360:	42018e02 	andmi	r8, r1, #2, 28
 364:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002dc 	ldrdeq	r0, [r0], -ip
 374:	0001144c 	andeq	r1, r1, ip, asr #8
 378:	00000204 	andeq	r0, r0, r4, lsl #4
 37c:	8b080e42 	blhi	203c8c <__bss_end+0x1ee15c>
 380:	42018e02 	andmi	r8, r1, #2, 28
 384:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	000002dc 	ldrdeq	r0, [r0], -ip
 394:	00011650 	andeq	r1, r1, r0, asr r6
 398:	000000e0 	andeq	r0, r0, r0, ror #1
 39c:	8b080e42 	blhi	203cac <__bss_end+0x1ee17c>
 3a0:	42018e02 	andmi	r8, r1, #2, 28
 3a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002dc 	ldrdeq	r0, [r0], -ip
 3b4:	00011730 	andeq	r1, r1, r0, lsr r7
 3b8:	00000034 	andeq	r0, r0, r4, lsr r0
 3bc:	8b080e42 	blhi	203ccc <__bss_end+0x1ee19c>
 3c0:	42018e02 	andmi	r8, r1, #2, 28
 3c4:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000002dc 	ldrdeq	r0, [r0], -ip
 3d4:	00011764 	andeq	r1, r1, r4, ror #14
 3d8:	00000030 	andeq	r0, r0, r0, lsr r0
 3dc:	8b040e42 	blhi	103cec <__bss_end+0xee1bc>
 3e0:	0b0d4201 	bleq	350bec <__bss_end+0x33b0bc>
 3e4:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
 3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000002dc 	ldrdeq	r0, [r0], -ip
 3f4:	00011794 	muleq	r1, r4, r7
 3f8:	00000034 	andeq	r0, r0, r4, lsr r0
 3fc:	8b080e42 	blhi	203d0c <__bss_end+0x1ee1dc>
 400:	42018e02 	andmi	r8, r1, #2, 28
 404:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 408:	00080d0c 	andeq	r0, r8, ip, lsl #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	000002dc 	ldrdeq	r0, [r0], -ip
 414:	000117c8 	andeq	r1, r1, r8, asr #15
 418:	0000012c 	andeq	r0, r0, ip, lsr #2
 41c:	8b080e42 	blhi	203d2c <__bss_end+0x1ee1fc>
 420:	42018e02 	andmi	r8, r1, #2, 28
 424:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	000002dc 	ldrdeq	r0, [r0], -ip
 434:	000118f4 	strdeq	r1, [r1], -r4
 438:	00000090 	muleq	r0, r0, r0
 43c:	8b080e42 	blhi	203d4c <__bss_end+0x1ee21c>
 440:	42018e02 	andmi	r8, r1, #2, 28
 444:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	000002dc 	ldrdeq	r0, [r0], -ip
 454:	00011984 	andeq	r1, r1, r4, lsl #19
 458:	00000104 	andeq	r0, r0, r4, lsl #2
 45c:	8b080e42 	blhi	203d6c <__bss_end+0x1ee23c>
 460:	42018e02 	andmi	r8, r1, #2, 28
 464:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000002dc 	ldrdeq	r0, [r0], -ip
 474:	00011a88 	andeq	r1, r1, r8, lsl #21
 478:	00000044 	andeq	r0, r0, r4, asr #32
 47c:	8b080e42 	blhi	203d8c <__bss_end+0x1ee25c>
 480:	42018e02 	andmi	r8, r1, #2, 28
 484:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
 488:	00080d0c 	andeq	r0, r8, ip, lsl #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000002dc 	ldrdeq	r0, [r0], -ip
 494:	00011acc 	andeq	r1, r1, ip, asr #21
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	8b040e42 	blhi	103dac <__bss_end+0xee27c>
 4a0:	0b0d4201 	bleq	350cac <__bss_end+0x33b17c>
 4a4:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	000002dc 	ldrdeq	r0, [r0], -ip
 4b4:	00011b0c 	andeq	r1, r1, ip, lsl #22
 4b8:	0000004c 	andeq	r0, r0, ip, asr #32
 4bc:	8b080e42 	blhi	203dcc <__bss_end+0x1ee29c>
 4c0:	42018e02 	andmi	r8, r1, #2, 28
 4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
 4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	000002dc 	ldrdeq	r0, [r0], -ip
 4d4:	00011b58 	andeq	r1, r1, r8, asr fp
 4d8:	00000048 	andeq	r0, r0, r8, asr #32
 4dc:	8b040e42 	blhi	103dec <__bss_end+0xee2bc>
 4e0:	0b0d4201 	bleq	350cec <__bss_end+0x33b1bc>
 4e4:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
 4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	00000020 	andeq	r0, r0, r0, lsr #32
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	00011ba0 	andeq	r1, r1, r0, lsr #23
 508:	00000248 	andeq	r0, r0, r8, asr #4
 50c:	8b080e42 	blhi	203e1c <__bss_end+0x1ee2ec>
 510:	42018e02 	andmi	r8, r1, #2, 28
 514:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 518:	0d0c0110 	stfeqs	f0, [ip, #-64]	; 0xffffffc0
 51c:	00000008 	andeq	r0, r0, r8
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000004ec 	andeq	r0, r0, ip, ror #9
 528:	00011de8 	andeq	r1, r1, r8, ror #27
 52c:	00000100 	andeq	r0, r0, r0, lsl #2
 530:	8b080e42 	blhi	203e40 <__bss_end+0x1ee310>
 534:	42018e02 	andmi	r8, r1, #2, 28
 538:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	000004ec 	andeq	r0, r0, ip, ror #9
 548:	00011ee8 	andeq	r1, r1, r8, ror #29
 54c:	00000110 	andeq	r0, r0, r0, lsl r1
 550:	8b080e42 	blhi	203e60 <__bss_end+0x1ee330>
 554:	42018e02 	andmi	r8, r1, #2, 28
 558:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	000004ec 	andeq	r0, r0, ip, ror #9
 568:	00011ff8 	strdeq	r1, [r1], -r8
 56c:	00000084 	andeq	r0, r0, r4, lsl #1
 570:	8b080e42 	blhi	203e80 <__bss_end+0x1ee350>
 574:	42018e02 	andmi	r8, r1, #2, 28
 578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
 57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	000004ec 	andeq	r0, r0, ip, ror #9
 588:	0001207c 	andeq	r2, r1, ip, ror r0
 58c:	00000058 	andeq	r0, r0, r8, asr r0
 590:	8b080e42 	blhi	203ea0 <__bss_end+0x1ee370>
 594:	42018e02 	andmi	r8, r1, #2, 28
 598:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
 59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	000004ec 	andeq	r0, r0, ip, ror #9
 5a8:	000120d4 	ldrdeq	r2, [r1], -r4
 5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 5b0:	8b080e42 	blhi	203ec0 <__bss_end+0x1ee390>
 5b4:	42018e02 	andmi	r8, r1, #2, 28
 5b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
 5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c4:	000004ec 	andeq	r0, r0, ip, ror #9
 5c8:	0001227c 	andeq	r2, r1, ip, ror r2
 5cc:	00000104 	andeq	r0, r0, r4, lsl #2
 5d0:	8b080e42 	blhi	203ee0 <__bss_end+0x1ee3b0>
 5d4:	42018e02 	andmi	r8, r1, #2, 28
 5d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
 5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e4:	000004ec 	andeq	r0, r0, ip, ror #9
 5e8:	00012380 	andeq	r2, r1, r0, lsl #7
 5ec:	0000007c 	andeq	r0, r0, ip, ror r0
 5f0:	8b040e42 	blhi	103f00 <__bss_end+0xee3d0>
 5f4:	0b0d4201 	bleq	350e00 <__bss_end+0x33b2d0>
 5f8:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
 5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 600:	0000001c 	andeq	r0, r0, ip, lsl r0
 604:	000004ec 	andeq	r0, r0, ip, ror #9
 608:	000123fc 	strdeq	r2, [r1], -ip
 60c:	000000f8 	strdeq	r0, [r0], -r8
 610:	8b080e42 	blhi	203f20 <__bss_end+0x1ee3f0>
 614:	42018e02 	andmi	r8, r1, #2, 28
 618:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 620:	0000001c 	andeq	r0, r0, ip, lsl r0
 624:	000004ec 	andeq	r0, r0, ip, ror #9
 628:	000124f4 	strdeq	r2, [r1], -r4
 62c:	0000011c 	andeq	r0, r0, ip, lsl r1
 630:	8b080e42 	blhi	203f40 <__bss_end+0x1ee410>
 634:	42018e02 	andmi	r8, r1, #2, 28
 638:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	000004ec 	andeq	r0, r0, ip, ror #9
 648:	00012610 	andeq	r2, r1, r0, lsl r6
 64c:	0000009c 	muleq	r0, ip, r0
 650:	8b080e42 	blhi	203f60 <__bss_end+0x1ee430>
 654:	42018e02 	andmi	r8, r1, #2, 28
 658:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
 660:	00000018 	andeq	r0, r0, r8, lsl r0
 664:	000004ec 	andeq	r0, r0, ip, ror #9
 668:	000126ac 	andeq	r2, r1, ip, lsr #13
 66c:	00000038 	andeq	r0, r0, r8, lsr r0
 670:	8b080e42 	blhi	203f80 <__bss_end+0x1ee450>
 674:	42018e02 	andmi	r8, r1, #2, 28
 678:	00040b0c 	andeq	r0, r4, ip, lsl #22
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	000004ec 	andeq	r0, r0, ip, ror #9
 684:	000126e4 	andeq	r2, r1, r4, ror #13
 688:	00000030 	andeq	r0, r0, r0, lsr r0
 68c:	8b040e42 	blhi	103f9c <__bss_end+0xee46c>
 690:	0b0d4201 	bleq	350e9c <__bss_end+0x33b36c>
 694:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 698:	00000ecb 	andeq	r0, r0, fp, asr #29
 69c:	00000020 	andeq	r0, r0, r0, lsr #32
 6a0:	000004ec 	andeq	r0, r0, ip, ror #9
 6a4:	00012714 	andeq	r2, r1, r4, lsl r7
 6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
 6ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
 6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
 6b4:	0b0c4201 	bleq	310ec0 <__bss_end+0x2fb390>
 6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
 6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	000004ec 	andeq	r0, r0, ip, ror #9
 6c8:	000128b8 			; <UNDEFINED> instruction: 0x000128b8
 6cc:	00000034 	andeq	r0, r0, r4, lsr r0
 6d0:	8b080e42 	blhi	203fe0 <__bss_end+0x1ee4b0>
 6d4:	42018e02 	andmi	r8, r1, #2, 28
 6d8:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
 6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	000004ec 	andeq	r0, r0, ip, ror #9
 6e8:	000128ec 	andeq	r2, r1, ip, ror #17
 6ec:	00000038 	andeq	r0, r0, r8, lsr r0
 6f0:	8b040e42 	blhi	104000 <__bss_end+0xee4d0>
 6f4:	0b0d4201 	bleq	350f00 <__bss_end+0x33b3d0>
 6f8:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
 6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 700:	0000001c 	andeq	r0, r0, ip, lsl r0
 704:	000004ec 	andeq	r0, r0, ip, ror #9
 708:	00012924 	andeq	r2, r1, r4, lsr #18
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	8b040e42 	blhi	104020 <__bss_end+0xee4f0>
 714:	0b0d4201 	bleq	350f20 <__bss_end+0x33b3f0>
 718:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
 71c:	00000ecb 	andeq	r0, r0, fp, asr #29
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	000004ec 	andeq	r0, r0, ip, ror #9
 728:	00012948 	andeq	r2, r1, r8, asr #18
 72c:	0000021c 	andeq	r0, r0, ip, lsl r2
 730:	8b080e42 	blhi	204040 <__bss_end+0x1ee510>
 734:	42018e02 	andmi	r8, r1, #2, 28
 738:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
 740:	0000001c 	andeq	r0, r0, ip, lsl r0
 744:	000004ec 	andeq	r0, r0, ip, ror #9
 748:	00012b64 	andeq	r2, r1, r4, ror #22
 74c:	0000005c 	andeq	r0, r0, ip, asr r0
 750:	8b080e42 	blhi	204060 <__bss_end+0x1ee530>
 754:	42018e02 	andmi	r8, r1, #2, 28
 758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 760:	0000001c 	andeq	r0, r0, ip, lsl r0
 764:	000004ec 	andeq	r0, r0, ip, ror #9
 768:	00012bc0 	andeq	r2, r1, r0, asr #23
 76c:	0000005c 	andeq	r0, r0, ip, asr r0
 770:	8b080e42 	blhi	204080 <__bss_end+0x1ee550>
 774:	42018e02 	andmi	r8, r1, #2, 28
 778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 780:	0000001c 	andeq	r0, r0, ip, lsl r0
 784:	000004ec 	andeq	r0, r0, ip, ror #9
 788:	00012c1c 	andeq	r2, r1, ip, lsl ip
 78c:	0000007c 	andeq	r0, r0, ip, ror r0
 790:	8b080e42 	blhi	2040a0 <__bss_end+0x1ee570>
 794:	42018e02 	andmi	r8, r1, #2, 28
 798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a4:	000004ec 	andeq	r0, r0, ip, ror #9
 7a8:	00012c98 	muleq	r1, r8, ip
 7ac:	00000108 	andeq	r0, r0, r8, lsl #2
 7b0:	8b040e42 	blhi	1040c0 <__bss_end+0xee590>
 7b4:	0b0d4201 	bleq	350fc0 <__bss_end+0x33b490>
 7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
 7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
 7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c4:	000004ec 	andeq	r0, r0, ip, ror #9
 7c8:	00012da0 	andeq	r2, r1, r0, lsr #27
 7cc:	0000009c 	muleq	r0, ip, r0
 7d0:	8b080e42 	blhi	2040e0 <__bss_end+0x1ee5b0>
 7d4:	42018e02 	andmi	r8, r1, #2, 28
 7d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e4:	000004ec 	andeq	r0, r0, ip, ror #9
 7e8:	00012e3c 	andeq	r2, r1, ip, lsr lr
 7ec:	00000118 	andeq	r0, r0, r8, lsl r1
 7f0:	8b080e42 	blhi	204100 <__bss_end+0x1ee5d0>
 7f4:	42018e02 	andmi	r8, r1, #2, 28
 7f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 800:	0000001c 	andeq	r0, r0, ip, lsl r0
 804:	000004ec 	andeq	r0, r0, ip, ror #9
 808:	00012f54 	andeq	r2, r1, r4, asr pc
 80c:	00000048 	andeq	r0, r0, r8, asr #32
 810:	8b040e42 	blhi	104120 <__bss_end+0xee5f0>
 814:	0b0d4201 	bleq	351020 <__bss_end+0x33b4f0>
 818:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 81c:	00000ecb 	andeq	r0, r0, fp, asr #29
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	000004ec 	andeq	r0, r0, ip, ror #9
 828:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 82c:	000000f4 	strdeq	r0, [r0], -r4
 830:	8b080e42 	blhi	204140 <__bss_end+0x1ee610>
 834:	42018e02 	andmi	r8, r1, #2, 28
 838:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	000004ec 	andeq	r0, r0, ip, ror #9
 848:	00013090 	muleq	r1, r0, r0
 84c:	00000028 	andeq	r0, r0, r8, lsr #32
 850:	8b040e42 	blhi	104160 <__bss_end+0xee630>
 854:	0b0d4201 	bleq	351060 <__bss_end+0x33b530>
 858:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
 85c:	00000ecb 	andeq	r0, r0, fp, asr #29
 860:	00000018 	andeq	r0, r0, r8, lsl r0
 864:	000004ec 	andeq	r0, r0, ip, ror #9
 868:	000130b8 	strheq	r3, [r1], -r8
 86c:	00000030 	andeq	r0, r0, r0, lsr r0
 870:	8b080e42 	blhi	204180 <__bss_end+0x1ee650>
 874:	42018e02 	andmi	r8, r1, #2, 28
 878:	00040b0c 	andeq	r0, r4, ip, lsl #22
 87c:	0000001c 	andeq	r0, r0, ip, lsl r0
 880:	000004ec 	andeq	r0, r0, ip, ror #9
 884:	000130e8 	andeq	r3, r1, r8, ror #1
 888:	000000c0 	andeq	r0, r0, r0, asr #1
 88c:	8b080e42 	blhi	20419c <__bss_end+0x1ee66c>
 890:	42018e02 	andmi	r8, r1, #2, 28
 894:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
 89c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a0:	000004ec 	andeq	r0, r0, ip, ror #9
 8a4:	000131a8 	andeq	r3, r1, r8, lsr #3
 8a8:	000000c0 	andeq	r0, r0, r0, asr #1
 8ac:	8b080e42 	blhi	2041bc <__bss_end+0x1ee68c>
 8b0:	42018e02 	andmi	r8, r1, #2, 28
 8b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
 8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c0:	000004ec 	andeq	r0, r0, ip, ror #9
 8c4:	00013268 	andeq	r3, r1, r8, ror #4
 8c8:	000000bc 	strheq	r0, [r0], -ip
 8cc:	8b080e42 	blhi	2041dc <__bss_end+0x1ee6ac>
 8d0:	42018e02 	andmi	r8, r1, #2, 28
 8d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e0:	000004ec 	andeq	r0, r0, ip, ror #9
 8e4:	00013324 	andeq	r3, r1, r4, lsr #6
 8e8:	000000b8 	strheq	r0, [r0], -r8
 8ec:	8b080e42 	blhi	2041fc <__bss_end+0x1ee6cc>
 8f0:	42018e02 	andmi	r8, r1, #2, 28
 8f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
 8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 900:	000004ec 	andeq	r0, r0, ip, ror #9
 904:	000133dc 	ldrdeq	r3, [r1], -ip
 908:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 90c:	8b080e42 	blhi	20421c <__bss_end+0x1ee6ec>
 910:	42018e02 	andmi	r8, r1, #2, 28
 914:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 91c:	0000001c 	andeq	r0, r0, ip, lsl r0
 920:	000004ec 	andeq	r0, r0, ip, ror #9
 924:	0001348c 	andeq	r3, r1, ip, lsl #9
 928:	00000034 	andeq	r0, r0, r4, lsr r0
 92c:	8b080e42 	blhi	20423c <__bss_end+0x1ee70c>
 930:	42018e02 	andmi	r8, r1, #2, 28
 934:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 938:	00080d0c 	andeq	r0, r8, ip, lsl #26
 93c:	0000000c 	andeq	r0, r0, ip
 940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 944:	7c020001 	stcvc	0, cr0, [r2], {1}
 948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000093c 	andeq	r0, r0, ip, lsr r9
 954:	000134c0 	andeq	r3, r1, r0, asr #9
 958:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 95c:	8b080e42 	blhi	20426c <__bss_end+0x1ee73c>
 960:	42018e02 	andmi	r8, r1, #2, 28
 964:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 968:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	0000093c 	andeq	r0, r0, ip, lsr r9
 974:	00013570 	andeq	r3, r1, r0, ror r5
 978:	000000a0 	andeq	r0, r0, r0, lsr #1
 97c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
 980:	8b038504 	blhi	e1d98 <__bss_end+0xcc268>
 984:	42018e02 	andmi	r8, r1, #2, 28
 988:	00040b0c 	andeq	r0, r4, ip, lsl #22
 98c:	0000001c 	andeq	r0, r0, ip, lsl r0
 990:	0000093c 	andeq	r0, r0, ip, lsr r9
 994:	00013610 	andeq	r3, r1, r0, lsl r6
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	8b040e42 	blhi	1042ac <__bss_end+0xee77c>
 9a0:	0b0d4201 	bleq	3511ac <__bss_end+0x33b67c>
 9a4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9b4:	0001362c 	andeq	r3, r1, ip, lsr #12
 9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9bc:	8b040e42 	blhi	1042cc <__bss_end+0xee79c>
 9c0:	0b0d4201 	bleq	3511cc <__bss_end+0x33b69c>
 9c4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9d4:	00013648 	andeq	r3, r1, r8, asr #12
 9d8:	00000064 	andeq	r0, r0, r4, rrx
 9dc:	8b080e42 	blhi	2042ec <__bss_end+0x1ee7bc>
 9e0:	42018e02 	andmi	r8, r1, #2, 28
 9e4:	6a040b0c 	bvs	10361c <__bss_end+0xedaec>
 9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9f4:	000136ac 	andeq	r3, r1, ip, lsr #13
 9f8:	000000d4 	ldrdeq	r0, [r0], -r4
 9fc:	8b040e42 	blhi	10430c <__bss_end+0xee7dc>
 a00:	0b0d4201 	bleq	35120c <__bss_end+0x33b6dc>
 a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
 a08:	000ecb42 	andeq	ip, lr, r2, asr #22
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	0000093c 	andeq	r0, r0, ip, lsr r9
 a14:	00013780 	andeq	r3, r1, r0, lsl #15
 a18:	000000e0 	andeq	r0, r0, r0, ror #1
 a1c:	8b040e42 	blhi	10432c <__bss_end+0xee7fc>
 a20:	0b0d4201 	bleq	35122c <__bss_end+0x33b6fc>
 a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 a28:	000ecb42 	andeq	ip, lr, r2, asr #22
 a2c:	0000000c 	andeq	r0, r0, ip
 a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a34:	7c020001 	stcvc	0, cr0, [r2], {1}
 a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a44:	00013860 	andeq	r3, r1, r0, ror #16
 a48:	000000dc 	ldrdeq	r0, [r0], -ip
 a4c:	8b040e42 	blhi	10435c <__bss_end+0xee82c>
 a50:	0b0d4201 	bleq	35125c <__bss_end+0x33b72c>
 a54:	0d0d6202 	sfmeq	f6, 4, [sp, #-8]
 a58:	000ecb42 	andeq	ip, lr, r2, asr #22
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a64:	0001393c 	andeq	r3, r1, ip, lsr r9
 a68:	00000034 	andeq	r0, r0, r4, lsr r0
 a6c:	8b080e42 	blhi	20437c <__bss_end+0x1ee84c>
 a70:	42018e02 	andmi	r8, r1, #2, 28
 a74:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a84:	00013970 	andeq	r3, r1, r0, ror r9
 a88:	000000b8 	strheq	r0, [r0], -r8
 a8c:	8b040e42 	blhi	10439c <__bss_end+0xee86c>
 a90:	0b0d4201 	bleq	35129c <__bss_end+0x33b76c>
 a94:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
 a98:	000ecb42 	andeq	ip, lr, r2, asr #22
 a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 aa4:	00013a28 	andeq	r3, r1, r8, lsr #20
 aa8:	00000050 	andeq	r0, r0, r0, asr r0
 aac:	8b040e42 	blhi	1043bc <__bss_end+0xee88c>
 ab0:	0b0d4201 	bleq	3512bc <__bss_end+0x33b78c>
 ab4:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
 abc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ac4:	00013a78 	andeq	r3, r1, r8, ror sl
 ac8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 acc:	8b040e42 	blhi	1043dc <__bss_end+0xee8ac>
 ad0:	0b0d4201 	bleq	3512dc <__bss_end+0x33b7ac>
 ad4:	0d0dce02 	stceq	14, cr12, [sp, #-8]
 ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
 adc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ae4:	00013c28 	andeq	r3, r1, r8, lsr #24
 ae8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 aec:	8b040e42 	blhi	1043fc <__bss_end+0xee8cc>
 af0:	0b0d4201 	bleq	3512fc <__bss_end+0x33b7cc>
 af4:	0d0dd202 	sfmeq	f5, 1, [sp, #-8]
 af8:	000ecb42 	andeq	ip, lr, r2, asr #22
 afc:	0000001c 	andeq	r0, r0, ip, lsl r0
 b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
 b04:	00013de0 	andeq	r3, r1, r0, ror #27
 b08:	00000058 	andeq	r0, r0, r8, asr r0
 b0c:	8b040e42 	blhi	10441c <__bss_end+0xee8ec>
 b10:	0b0d4201 	bleq	35131c <__bss_end+0x33b7ec>
 b14:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
 b18:	00000ecb 	andeq	r0, r0, fp, asr #29
 b1c:	0000000c 	andeq	r0, r0, ip
 b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b24:	7c020001 	stcvc	0, cr0, [r2], {1}
 b28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b34:	00013e38 	andeq	r3, r1, r8, lsr lr
 b38:	000001c8 	andeq	r0, r0, r8, asr #3
 b3c:	8b080e42 	blhi	20444c <__bss_end+0x1ee91c>
 b40:	42018e02 	andmi	r8, r1, #2, 28
 b44:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 b48:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b54:	00014000 	andeq	r4, r1, r0
 b58:	0000007c 	andeq	r0, r0, ip, ror r0
 b5c:	8b080e42 	blhi	20446c <__bss_end+0x1ee93c>
 b60:	42018e02 	andmi	r8, r1, #2, 28
 b64:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 b68:	00080d0c 	andeq	r0, r8, ip, lsl #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b74:	0001407c 	andeq	r4, r1, ip, ror r0
 b78:	00000024 	andeq	r0, r0, r4, lsr #32
 b7c:	8b040e42 	blhi	10448c <__bss_end+0xee95c>
 b80:	0b0d4201 	bleq	35138c <__bss_end+0x33b85c>
 b84:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
 b88:	00000ecb 	andeq	r0, r0, fp, asr #29
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b94:	000140a0 	andeq	r4, r1, r0, lsr #1
 b98:	00000018 	andeq	r0, r0, r8, lsl r0
 b9c:	8b040e42 	blhi	1044ac <__bss_end+0xee97c>
 ba0:	0b0d4201 	bleq	3513ac <__bss_end+0x33b87c>
 ba4:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 ba8:	00000ecb 	andeq	r0, r0, fp, asr #29
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bb4:	000140b8 	strheq	r4, [r1], -r8
 bb8:	000000d8 	ldrdeq	r0, [r0], -r8
 bbc:	8b040e42 	blhi	1044cc <__bss_end+0xee99c>
 bc0:	0b0d4201 	bleq	3513cc <__bss_end+0x33b89c>
 bc4:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
 bc8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bd4:	00014190 	muleq	r1, r0, r1
 bd8:	00000154 	andeq	r0, r0, r4, asr r1
 bdc:	8b040e42 	blhi	1044ec <__bss_end+0xee9bc>
 be0:	0b0d4201 	bleq	3513ec <__bss_end+0x33b8bc>
 be4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
 be8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bec:	0000000c 	andeq	r0, r0, ip
 bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000bec 	andeq	r0, r0, ip, ror #23
 c04:	000142fc 	strdeq	r4, [r1], -ip
 c08:	0000003c 	andeq	r0, r0, ip, lsr r0
 c0c:	8b080e42 	blhi	20451c <__bss_end+0x1ee9ec>
 c10:	42018e02 	andmi	r8, r1, #2, 28
 c14:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c18:	00000018 	andeq	r0, r0, r8, lsl r0
 c1c:	00000bec 	andeq	r0, r0, ip, ror #23
 c20:	00014338 	andeq	r4, r1, r8, lsr r3
 c24:	00000044 	andeq	r0, r0, r4, asr #32
 c28:	8b080e42 	blhi	204538 <__bss_end+0x1eea08>
 c2c:	42018e02 	andmi	r8, r1, #2, 28
 c30:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c34:	00000018 	andeq	r0, r0, r8, lsl r0
 c38:	00000bec 	andeq	r0, r0, ip, ror #23
 c3c:	0001437c 	andeq	r4, r1, ip, ror r3
 c40:	00000098 	muleq	r0, r8, r0
 c44:	8b080e42 	blhi	204554 <__bss_end+0x1eea24>
 c48:	42018e02 	andmi	r8, r1, #2, 28
 c4c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c50:	0000000c 	andeq	r0, r0, ip
 c54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c58:	7c020001 	stcvc	0, cr0, [r2], {1}
 c5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c60:	00000030 	andeq	r0, r0, r0, lsr r0
 c64:	00000c50 	andeq	r0, r0, r0, asr ip
 c68:	00014414 	andeq	r4, r1, r4, lsl r4
 c6c:	00000114 	andeq	r0, r0, r4, lsl r1
 c70:	84140e60 	ldrhi	r0, [r4], #-3680	; 0xfffff1a0
 c74:	86048505 	strhi	r8, [r4], -r5, lsl #10
 c78:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 c7c:	ce5e0201 	cdpgt	2, 5, cr0, cr14, cr1, {0}
 c80:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
 c84:	0e48000e 	cdpeq	0, 4, cr0, cr8, cr14, {0}
 c88:	85058414 	strhi	r8, [r5, #-1044]	; 0xfffffbec
 c8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 c90:	00018e02 	andeq	r8, r1, r2, lsl #28
 c94:	0000000c 	andeq	r0, r0, ip
 c98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c9c:	7c020001 	stcvc	0, cr0, [r2], {1}
 ca0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ca8:	00000c94 	muleq	r0, r4, ip
 cac:	00014528 	andeq	r4, r1, r8, lsr #10
 cb0:	00000114 	andeq	r0, r0, r4, lsl r1
 cb4:	84080e62 	strhi	r0, [r8], #-3682	; 0xfffff19e
 cb8:	02018e02 	andeq	r8, r1, #2, 28
 cbc:	0ec4ce52 	mcreq	14, 6, ip, cr4, cr2, {2}
 cc0:	00000000 	andeq	r0, r0, r0
 cc4:	0000000c 	andeq	r0, r0, ip
 cc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ccc:	7c020001 	stcvc	0, cr0, [r2], {1}
 cd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 cd4:	0000002c 	andeq	r0, r0, ip, lsr #32
 cd8:	00000cc4 	andeq	r0, r0, r4, asr #25
 cdc:	0001463c 	andeq	r4, r1, ip, lsr r6
 ce0:	000000dc 	ldrdeq	r0, [r0], -ip
 ce4:	84100e52 	ldrhi	r0, [r0], #-3666	; 0xfffff1ae
 ce8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 cec:	02018e02 	andeq	r8, r1, #2, 28
 cf0:	c6ce0a40 	strbgt	r0, [lr], r0, asr #20
 cf4:	000ec4c5 	andeq	ip, lr, r5, asr #9
 cf8:	0a500b42 	beq	1403a08 <__bss_end+0x13eded8>
 cfc:	cec6c5c4 	cdpgt	5, 12, cr12, cr6, cr4, {6}
 d00:	0b42000e 	bleq	1080d40 <__bss_end+0x106b210>

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000000 	andeq	r0, r0, r0
   4:	0000001c 	andeq	r0, r0, ip, lsl r0
   8:	1c510001 	mrrcne	0, 0, r0, r1, cr1
   c:	30000000 	andcc	r0, r0, r0
  10:	04000000 	streq	r0, [r0], #-0
  14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
  18:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
  1c:	00009800 	andeq	r9, r0, r0, lsl #16
  20:	51000100 	mrspl	r0, (UNDEF: 16)
  24:	00000098 	muleq	r0, r8, r0
  28:	00000100 	andeq	r0, r0, r0, lsl #2
  2c:	01f30004 	mvnseq	r0, r4
  30:	01009f51 	tsteq	r0, r1, asr pc
  34:	010c0000 	mrseq	r0, (UNDEF: 12)
  38:	00010000 	andeq	r0, r1, r0
  3c:	00010c51 	andeq	r0, r1, r1, asr ip
  40:	00011400 	andeq	r1, r1, r0, lsl #8
  44:	f3000400 	vshl.u8	d0, d0, d0
  48:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
  54:	10000000 	andne	r0, r0, r0
  58:	01000000 	mrseq	r0, (UNDEF: 0)
  5c:	00105200 	andseq	r5, r0, r0, lsl #4
  60:	00140000 	andseq	r0, r4, r0
  64:	00030000 	andeq	r0, r3, r0
  68:	1c9f7f72 	ldcne	15, cr7, [pc], {114}	; 0x72
  6c:	20000000 	andcs	r0, r0, r0
  70:	0b000000 	bleq	78 <_start-0x7f88>
  74:	20007100 	andcs	r7, r0, r0, lsl #2
  78:	225201f3 	subscs	r0, r2, #-1073741764	; 0xc000003c
  7c:	9f220071 	svcls	0x00220071
  80:	00000020 	andeq	r0, r0, r0, lsr #32
  84:	00000030 	andeq	r0, r0, r0, lsr r0
  88:	0071000b 	rsbseq	r0, r1, fp
  8c:	22007120 	andcs	r7, r0, #32, 2
  90:	225201f3 	subscs	r0, r2, #-1073741764	; 0xc000003c
  94:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
  98:	00004c00 	andeq	r4, r0, r0, lsl #24
  9c:	52000100 	andpl	r0, r0, #0, 2
  a0:	0000004c 	andeq	r0, r0, ip, asr #32
  a4:	00000060 	andeq	r0, r0, r0, rrx
  a8:	605e0001 	subsvs	r0, lr, r1
  ac:	70000000 	andvc	r0, r0, r0
  b0:	03000000 	movweq	r0, #0
  b4:	9f107e00 	svcls	0x00107e00
  b8:	00000070 	andeq	r0, r0, r0, ror r0
  bc:	0000009c 	muleq	r0, ip, r0
  c0:	9c5e0001 	mrrcls	0, 0, r0, lr, cr1
  c4:	ac000000 	stcge	0, cr0, [r0], {-0}
  c8:	01000000 	mrseq	r0, (UNDEF: 0)
  cc:	00ac5600 	adceq	r5, ip, r0, lsl #12
  d0:	00b00000 	adcseq	r0, r0, r0
  d4:	00010000 	andeq	r0, r1, r0
  d8:	0000b05c 	andeq	fp, r0, ip, asr r0
  dc:	0000b400 	andeq	fp, r0, r0, lsl #8
  e0:	7c000300 	stcvc	3, cr0, [r0], {-0}
  e4:	00b49f04 	adcseq	r9, r4, r4, lsl #30
  e8:	00c40000 	sbceq	r0, r4, r0
  ec:	00010000 	andeq	r0, r1, r0
  f0:	0000d85c 	andeq	sp, r0, ip, asr r8
  f4:	0000e400 	andeq	lr, r0, r0, lsl #8
  f8:	72000300 	andvc	r0, r0, #0, 6
  fc:	01009f7f 	tsteq	r0, pc, ror pc
 100:	01080000 	mrseq	r0, (UNDEF: 8)
 104:	00010000 	andeq	r0, r1, r0
 108:	00010852 	andeq	r0, r1, r2, asr r8
 10c:	00010c00 	andeq	r0, r1, r0, lsl #24
 110:	72000300 	andvc	r0, r0, #0, 6
 114:	010c9f7f 	tsteq	ip, pc, ror pc
 118:	01140000 	tsteq	r4, r0
 11c:	00010000 	andeq	r0, r1, r0
 120:	00000056 	andeq	r0, r0, r6, asr r0
 124:	00000000 	andeq	r0, r0, r0
 128:	00000400 	andeq	r0, r0, r0, lsl #8
 12c:	00001c00 	andeq	r1, r0, r0, lsl #24
 130:	50000100 	andpl	r0, r0, r0, lsl #2
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000030 	andeq	r0, r0, r0, lsr r0
 13c:	01700003 	cmneq	r0, r3
 140:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 144:	0000d800 	andeq	sp, r0, r0, lsl #16
 148:	50000100 	andpl	r0, r0, r0, lsl #2
 14c:	000000d8 	ldrdeq	r0, [r0], -r8
 150:	000000e0 	andeq	r0, r0, r0, ror #1
 154:	00530001 	subseq	r0, r3, r1
 158:	14000001 	strne	r0, [r0], #-1
 15c:	01000001 	tsteq	r0, r1
 160:	00005000 	andeq	r5, r0, r0
 164:	00000000 	andeq	r0, r0, r0
 168:	00040000 	andeq	r0, r4, r0
 16c:	00200000 	eoreq	r0, r0, r0
 170:	00010000 	andeq	r0, r1, r0
 174:	00002051 	andeq	r2, r0, r1, asr r0
 178:	00002800 	andeq	r2, r0, r0, lsl #16
 17c:	71000300 	mrsvc	r0, LR_irq
 180:	00289f7f 	eoreq	r9, r8, pc, ror pc
 184:	00980000 	addseq	r0, r8, r0
 188:	00010000 	andeq	r0, r1, r0
 18c:	00009851 	andeq	r9, r0, r1, asr r8
 190:	0000d800 	andeq	sp, r0, r0, lsl #16
 194:	f3000400 	vshl.u8	d0, d0, d0
 198:	d89f5101 	ldmle	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
 19c:	ec000000 	stc	0, cr0, [r0], {-0}
 1a0:	01000000 	mrseq	r0, (UNDEF: 0)
 1a4:	00ec5100 	rsceq	r5, ip, r0, lsl #2
 1a8:	00f40000 	rscseq	r0, r4, r0
 1ac:	00030000 	andeq	r0, r3, r0
 1b0:	f49f7f71 			; <UNDEFINED> instruction: 0xf49f7f71
 1b4:	0c000000 	stceq	0, cr0, [r0], {-0}
 1b8:	01000001 	tsteq	r0, r1
 1bc:	010c5100 	mrseq	r5, (UNDEF: 28)
 1c0:	01140000 	tsteq	r4, r0
 1c4:	00040000 	andeq	r0, r4, r0
 1c8:	9f5101f3 	svcls	0x005101f3
	...
 1d4:	0000009c 	muleq	r0, ip, r0
 1d8:	000000ac 	andeq	r0, r0, ip, lsr #1
 1dc:	0c530001 	mrrceq	0, 0, r0, r3, cr1
 1e0:	14000001 	strne	r0, [r0], #-1
 1e4:	01000001 	tsteq	r0, r1
 1e8:	00005300 	andeq	r5, r0, r0, lsl #6
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	004c0000 	subeq	r0, ip, r0
 1f4:	00680000 	rsbeq	r0, r8, r0
 1f8:	00030000 	andeq	r0, r3, r0
 1fc:	689f7473 	ldmvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
 200:	6c000000 	stcvs	0, cr0, [r0], {-0}
 204:	03000000 	movweq	r0, #0
 208:	9f787300 	svcls	0x00787300
 20c:	0000006c 	andeq	r0, r0, ip, rrx
 210:	00000070 	andeq	r0, r0, r0, ror r0
 214:	7c730003 	ldclvc	0, cr0, [r3], #-12
 218:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 21c:	00007800 	andeq	r7, r0, r0, lsl #16
 220:	53000100 	movwpl	r0, #256	; 0x100
 224:	00000078 	andeq	r0, r0, r8, ror r0
 228:	00000084 	andeq	r0, r0, r4, lsl #1
 22c:	70730003 	rsbsvc	r0, r3, r3
 230:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 234:	0000ac00 	andeq	sl, r0, r0, lsl #24
 238:	51000100 	mrspl	r0, (UNDEF: 16)
 23c:	000000ac 	andeq	r0, r0, ip, lsr #1
 240:	000000d8 	ldrdeq	r0, [r0], -r8
 244:	0c540001 	mrrceq	0, 0, r0, r4, cr1
 248:	14000001 	strne	r0, [r0], #-1
 24c:	01000001 	tsteq	r0, r1
 250:	00005100 	andeq	r5, r0, r0, lsl #2
	...
 25c:	00d40000 	sbcseq	r0, r4, r0
 260:	00010000 	andeq	r0, r1, r0
 264:	0000d451 	andeq	sp, r0, r1, asr r4
 268:	0000ec00 	andeq	lr, r0, r0, lsl #24
 26c:	f3000400 	vshl.u8	d0, d0, d0
 270:	ec9f5101 	ldfs	f5, [pc], {1}
 274:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 278:	01000000 	mrseq	r0, (UNDEF: 0)
 27c:	00f85100 	rscseq	r5, r8, r0, lsl #2
 280:	010c0000 	mrseq	r0, (UNDEF: 12)
 284:	00040000 	andeq	r0, r4, r0
 288:	9f5101f3 	svcls	0x005101f3
 28c:	0000010c 	andeq	r0, r0, ip, lsl #2
 290:	00000114 	andeq	r0, r0, r4, lsl r1
 294:	00510001 	subseq	r0, r1, r1
	...
 2a0:	10000000 	andne	r0, r0, r0
 2a4:	01000000 	mrseq	r0, (UNDEF: 0)
 2a8:	00105200 	andseq	r5, r0, r0, lsl #4
 2ac:	00200000 	eoreq	r0, r0, r0
 2b0:	00010000 	andeq	r0, r1, r0
 2b4:	00002052 	andeq	r2, r0, r2, asr r0
 2b8:	00002400 	andeq	r2, r0, r0, lsl #8
 2bc:	72000300 	andvc	r0, r0, #0, 6
 2c0:	00249f7f 	eoreq	r9, r4, pc, ror pc
 2c4:	002c0000 	eoreq	r0, ip, r0
 2c8:	00010000 	andeq	r0, r1, r0
 2cc:	00002c52 	andeq	r2, r0, r2, asr ip
 2d0:	00003800 	andeq	r3, r0, r0, lsl #16
 2d4:	72000300 	andvc	r0, r0, #0, 6
 2d8:	00609f7f 	rsbeq	r9, r0, pc, ror pc
 2dc:	00640000 	rsbeq	r0, r4, r0
 2e0:	00010000 	andeq	r0, r1, r0
 2e4:	00006454 	andeq	r6, r0, r4, asr r4
 2e8:	00007400 	andeq	r7, r0, r0, lsl #8
 2ec:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
 2f0:	00749f10 	rsbseq	r9, r4, r0, lsl pc
 2f4:	00980000 	addseq	r0, r8, r0
 2f8:	00010000 	andeq	r0, r1, r0
 2fc:	0000a454 	andeq	sl, r0, r4, asr r4
 300:	0000a800 	andeq	sl, r0, r0, lsl #16
 304:	5c000100 	stfpls	f0, [r0], {-0}
 308:	000000a8 	andeq	r0, r0, r8, lsr #1
 30c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 310:	047c0003 	ldrbteq	r0, [ip], #-3
 314:	0000b09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 318:	0000b800 	andeq	fp, r0, r0, lsl #16
 31c:	5c000100 	stfpls	f0, [r0], {-0}
 320:	0000010c 	andeq	r0, r0, ip, lsl #2
 324:	00000114 	andeq	r0, r0, r4, lsl r1
 328:	00520001 	subseq	r0, r2, r1
 32c:	00000000 	andeq	r0, r0, r0
 330:	04000000 	streq	r0, [r0], #-0
 334:	20000000 	andcs	r0, r0, r0
 338:	01000000 	mrseq	r0, (UNDEF: 0)
 33c:	00205000 	eoreq	r5, r0, r0
 340:	00980000 	addseq	r0, r8, r0
 344:	00010000 	andeq	r0, r1, r0
 348:	0000c853 	andeq	ip, r0, r3, asr r8
 34c:	00010c00 	andeq	r0, r1, r0, lsl #24
 350:	53000100 	movwpl	r0, #256	; 0x100
 354:	0000010c 	andeq	r0, r0, ip, lsl #2
 358:	00000114 	andeq	r0, r0, r4, lsl r1
 35c:	00500001 	subseq	r0, r0, r1
 360:	00000000 	andeq	r0, r0, r0
 364:	54000000 	strpl	r0, [r0], #-0
 368:	ec000000 	stc	0, cr0, [r0], {-0}
 36c:	03000000 	movweq	r0, #0
 370:	9f200800 	svcls	0x00200800
	...
 37c:	0000004c 	andeq	r0, r0, ip, asr #32
 380:	000000e8 	andeq	r0, r0, r8, ror #1
 384:	e85e0001 	ldmda	lr, {r0}^
 388:	ec000000 	stc	0, cr0, [r0], {-0}
 38c:	22000000 	andcs	r0, r0, #0
 390:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 394:	f31aff08 	vpmax.f16	d15, d10, d8
 398:	ff085101 			; <UNDEFINED> instruction: 0xff085101
 39c:	2124381a 			; <UNDEFINED> instruction: 0x2124381a
 3a0:	085101f3 	ldmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8}^
 3a4:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
 3a8:	1aff0851 	bne	fffc24f4 <_estack+0xf7fb24f4>
 3ac:	40212438 	eormi	r2, r1, r8, lsr r4
 3b0:	009f2124 	addseq	r2, pc, r4, lsr #2
 3b4:	00000000 	andeq	r0, r0, r0
 3b8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
 3bc:	60000000 	andvs	r0, r0, r0
 3c0:	01000000 	mrseq	r0, (UNDEF: 0)
 3c4:	00605300 	rsbeq	r5, r0, r0, lsl #6
 3c8:	006c0000 	rsbeq	r0, ip, r0
 3cc:	00030000 	andeq	r0, r3, r0
 3d0:	6c9f747c 	cfldrsvs	mvf7, [pc], {124}	; 0x7c
 3d4:	70000000 	andvc	r0, r0, r0
 3d8:	03000000 	movweq	r0, #0
 3dc:	9f787c00 	svcls	0x00787c00
 3e0:	00000070 	andeq	r0, r0, r0, ror r0
 3e4:	00000074 	andeq	r0, r0, r4, ror r0
 3e8:	7c7c0003 	ldclvc	0, cr0, [ip], #-12
 3ec:	0000749f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 3f0:	00007c00 	andeq	r7, r0, r0, lsl #24
 3f4:	5c000100 	stfpls	f0, [r0], {-0}
 3f8:	0000007c 	andeq	r0, r0, ip, ror r0
 3fc:	00000084 	andeq	r0, r0, r4, lsl #1
 400:	707c0003 	rsbsvc	r0, ip, r3
 404:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 408:	0000a400 	andeq	sl, r0, r0, lsl #8
 40c:	53000100 	movwpl	r0, #256	; 0x100
 410:	000000a4 	andeq	r0, r0, r4, lsr #1
 414:	000000c8 	andeq	r0, r0, r8, asr #1
 418:	00540001 	subseq	r0, r4, r1
 41c:	00000000 	andeq	r0, r0, r0
 420:	04000000 	streq	r0, [r0], #-0
 424:	d4000000 	strle	r0, [r0], #-0
 428:	06000000 	streq	r0, [r0], -r0
 42c:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
 430:	d49f1aff 	ldrle	r1, [pc], #2815	; 438 <_start-0x7bc8>
 434:	ec000000 	stc	0, cr0, [r0], {-0}
 438:	07000000 	streq	r0, [r0, -r0]
 43c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 440:	9f1aff08 	svcls	0x001aff08
 444:	000000ec 	andeq	r0, r0, ip, ror #1
 448:	000000f8 	strdeq	r0, [r0], -r8
 44c:	00710006 	rsbseq	r0, r1, r6
 450:	9f1aff08 	svcls	0x001aff08
 454:	000000f8 	strdeq	r0, [r0], -r8
 458:	0000010c 	andeq	r0, r0, ip, lsl #2
 45c:	01f30007 	mvnseq	r0, r7
 460:	1aff0851 	bne	fffc25ac <_estack+0xf7fb25ac>
 464:	00010c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
 468:	00011400 	andeq	r1, r1, r0, lsl #8
 46c:	71000600 	tstvc	r0, r0, lsl #12
 470:	1aff0800 	bne	fffc2478 <_estack+0xf7fb2478>
 474:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
 480:	00003400 	andeq	r3, r0, r0, lsl #8
 484:	51000100 	mrspl	r0, (UNDEF: 16)
 488:	00000034 	andeq	r0, r0, r4, lsr r0
 48c:	000000dc 	ldrdeq	r0, [r0], -ip
 490:	01f30004 	mvnseq	r0, r4
 494:	00009f51 	andeq	r9, r0, r1, asr pc
	...
 4a0:	00500000 	subseq	r0, r0, r0
 4a4:	00010000 	andeq	r0, r1, r0
 4a8:	00005052 	andeq	r5, r0, r2, asr r0
 4ac:	00008400 	andeq	r8, r0, r0, lsl #8
 4b0:	52000100 	andpl	r0, r0, #0, 2
 4b4:	00000084 	andeq	r0, r0, r4, lsl #1
 4b8:	00000090 	muleq	r0, r0, r0
 4bc:	7f720003 	svcvc	0x00720003
 4c0:	0000909f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 4c4:	00009800 	andeq	r9, r0, r0, lsl #16
 4c8:	52000100 	andpl	r0, r0, #0, 2
 4cc:	00000098 	muleq	r0, r8, r0
 4d0:	000000a0 	andeq	r0, r0, r0, lsr #1
 4d4:	7f720003 	svcvc	0x00720003
 4d8:	0000cc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 4dc:	0000dc00 	andeq	sp, r0, r0, lsl #24
 4e0:	52000100 	andpl	r0, r0, #0, 2
	...
 4f0:	0000005c 	andeq	r0, r0, ip, asr r0
 4f4:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 4f8:	94000000 	strls	r0, [r0], #-0
 4fc:	01000000 	mrseq	r0, (UNDEF: 0)
 500:	00945300 	addseq	r5, r4, r0, lsl #6
 504:	00980000 	addseq	r0, r8, r0
 508:	00030000 	andeq	r0, r3, r0
 50c:	989f7f73 	ldmls	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
 510:	cc000000 	stcgt	0, cr0, [r0], {-0}
 514:	01000000 	mrseq	r0, (UNDEF: 0)
 518:	00cc5300 	sbceq	r5, ip, r0, lsl #6
 51c:	00dc0000 	sbcseq	r0, ip, r0
 520:	00010000 	andeq	r0, r1, r0
 524:	00000050 	andeq	r0, r0, r0, asr r0
	...
 530:	00003400 	andeq	r3, r0, r0, lsl #8
 534:	51000100 	mrspl	r0, (UNDEF: 16)
 538:	00000034 	andeq	r0, r0, r4, lsr r0
 53c:	0000005c 	andeq	r0, r0, ip, asr r0
 540:	01f30004 	mvnseq	r0, r4
 544:	005c9f51 	subseq	r9, ip, r1, asr pc
 548:	00880000 	addeq	r0, r8, r0
 54c:	00010000 	andeq	r0, r1, r0
 550:	00008851 	andeq	r8, r0, r1, asr r8
 554:	00009000 	andeq	r9, r0, r0
 558:	71000300 	mrsvc	r0, LR_irq
 55c:	00989f7f 	addseq	r9, r8, pc, ror pc
 560:	00a00000 	adceq	r0, r0, r0
 564:	00010000 	andeq	r0, r1, r0
 568:	0000cc51 	andeq	ip, r0, r1, asr ip
 56c:	0000dc00 	andeq	sp, r0, r0, lsl #24
 570:	f3000400 	vshl.u8	d0, d0, d0
 574:	009f5101 	addseq	r5, pc, r1, lsl #2
 578:	00000000 	andeq	r0, r0, r0
 57c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 580:	5c000000 	stcpl	0, cr0, [r0], {-0}
 584:	01000000 	mrseq	r0, (UNDEF: 0)
 588:	00cc5300 	sbceq	r5, ip, r0, lsl #6
 58c:	00dc0000 	sbcseq	r0, ip, r0
 590:	00010000 	andeq	r0, r1, r0
 594:	00000053 	andeq	r0, r0, r3, asr r0
 598:	00000000 	andeq	r0, r0, r0
 59c:	00003800 	andeq	r3, r0, r0, lsl #16
 5a0:	00003c00 	andeq	r3, r0, r0, lsl #24
 5a4:	51000100 	mrspl	r0, (UNDEF: 16)
 5a8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5ac:	00000050 	andeq	r0, r0, r0, asr r0
 5b0:	50560001 	subspl	r0, r6, r1
 5b4:	5c000000 	stcpl	0, cr0, [r0], {-0}
 5b8:	01000000 	mrseq	r0, (UNDEF: 0)
 5bc:	00cc5100 	sbceq	r5, ip, r0, lsl #2
 5c0:	00dc0000 	sbcseq	r0, ip, r0
 5c4:	00010000 	andeq	r0, r1, r0
 5c8:	00000056 	andeq	r0, r0, r6, asr r0
 5cc:	00000000 	andeq	r0, r0, r0
	...
